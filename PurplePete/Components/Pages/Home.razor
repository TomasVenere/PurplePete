@page "/"
@using PurplePete.Services
@using System.Text.RegularExpressions
@rendermode InteractiveServer
@inject BedrockChatAI BedrockChatAI
@inject ConfluenceService ConfluenceService
@inject AccountInfo AccountInfo

<PageTitle>Home</PageTitle>

<div class="chat-container">
    <div class="robot-container">
        <img src="@RobotImage" alt="Purple Pete" class="robot-image" />
    </div>

    <div class="chat-box-container">
        <div class="chat-box">
            @foreach (var message in _messages)
            {
                <div class="message @(message.Sender == "You" ? "user-message" : "bot-message")">
                    <div class="bubble">
                        <strong>@message.Sender:</strong>
                        @if (message.Text.Contains('\n'))
                        {
                            <pre>@message.Text</pre>
                        }
                        else
                        {
                            @message.Text
                        }
                    </div>
                </div>
            }
        </div>

        <div class="input-container">
            <input type="text" @bind="_currentMessage" @bind:event="oninput" placeholder="Type your message..." />
            <button @onclick="SendMessage">Send</button>
        </div>
    </div>
</div>

@code {
    private List<ChatMessage> _messages = new();
    private string _currentMessage = string.Empty;
    private bool _isBotTyping = false;
    private bool _isExpectingAccountNumber = false;
    private bool _awaitingFullAccountConfirmation = false;

    private string RobotImage => _isBotTyping
        ? "/avatars/PurpleRobotTalking.png"
        : "/avatars/PurpleRobot.png";

    private async Task SendMessage()
    {
        if (string.IsNullOrWhiteSpace(_currentMessage)) return;

        var userMessage = _currentMessage;
        _messages.Add(new ChatMessage { Sender = "You", Text = userMessage });
        _currentMessage = string.Empty;
        _isBotTyping = true;
        StateHasChanged();

        await Task.Delay(1000);

        string response;

        if (_awaitingFullAccountConfirmation && userMessage.Trim().Equals("yes", StringComparison.OrdinalIgnoreCase))
        {
            response = await AccountInfo.GetAllAccountsFullDataAsync();
            _awaitingFullAccountConfirmation = false;
        }
        else if (userMessage.Contains("all accounts", StringComparison.OrdinalIgnoreCase))
        {
            response = await AccountInfo.GetAllAccountsSummaryAsync();
            _awaitingFullAccountConfirmation = true;
        }
        else if (AccountInfo.IsCashPercentageFilterQuery(userMessage))
        {
            response = await AccountInfo.GetAccountsByCashPercentageQueryAsync(userMessage);
        }
        else if (_isExpectingAccountNumber)
        {
            if (AccountInfo.IsValidAccountNumber(userMessage))
            {
                response = AccountInfo.GetAccountStatus(userMessage);
                _isExpectingAccountNumber = false;
            }
            else if (AccountInfo.HasInvalidCharacters(userMessage))
            {
                response = "Please provide an account number without any other characters, just the number.";
            }
            else
            {
                response = "That doesn't look like a valid account number. Please try again.";
            }
        }
        else if (AccountInfo.ContainsAccountKeyword(userMessage))
        {
            response = "Sure, can you provide your account number?";
            _isExpectingAccountNumber = true;
        }
        else
        {
            bool isNoAI = Regex.IsMatch(userMessage, @"\bno[\s\-]?ai\b", RegexOptions.IgnoreCase);
            var confluenceResponse = await ConfluenceService.GetConfluenceMatchAsync(userMessage);

            if (isNoAI)
            {
                response = confluenceResponse != null
                    ? "No AI:\n" + confluenceResponse
                    : "No AI:\n" + userMessage;
            }
            else
            {
                response = confluenceResponse != null
                    ? await BedrockChatAI.GetResponseAsync(confluenceResponse, userMessage)
                    : await BedrockChatAI.GetResponseAsync(userMessage, userMessage);
            }
        }

        _messages.Add(new ChatMessage
        {
            Sender = "Purple Pete",
            Text = response
        });

        _isBotTyping = false;
        StateHasChanged();
    }

    public class ChatMessage
    {
        public string? Sender { get; set; }
        public string? Text { get; set; }
    }
}
