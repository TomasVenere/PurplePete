//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------

#pragma warning disable 108 // Disable "CS0108 '{derivedDto}.ToJson()' hides inherited member '{dtoBase}.ToJson()'. Use the new keyword if hiding was intended."
#pragma warning disable 114 // Disable "CS0114 '{derivedDto}.RaisePropertyChanged(String)' hides inherited member 'dtoBase.RaisePropertyChanged(String)'. To make the current member override that implementation, add the override keyword. Otherwise add the new keyword."
#pragma warning disable 472 // Disable "CS0472 The result of the expression is always 'false' since a value of type 'Int32' is never equal to 'null' of type 'Int32?'
#pragma warning disable 612 // Disable "CS0612 '...' is obsolete"
#pragma warning disable 649 // Disable "CS0649 Field is never assigned to, and will always have its default value null"
#pragma warning disable 1573 // Disable "CS1573 Parameter '...' has no matching param tag in the XML comment for ...
#pragma warning disable 1591 // Disable "CS1591 Missing XML comment for publicly visible type or member ..."
#pragma warning disable 8073 // Disable "CS8073 The result of the expression is always 'false' since a value of type 'T' is never equal to 'null' of type 'T?'"
#pragma warning disable 3016 // Disable "CS3016 Arrays as attribute arguments is not CLS-compliant"
#pragma warning disable 8603 // Disable "CS8603 Possible null reference return"
#pragma warning disable 8604 // Disable "CS8604 Possible null reference argument for parameter"
#pragma warning disable 8625 // Disable "CS8625 Cannot convert null literal to non-nullable reference type"
#pragma warning disable 8765 // Disable "CS8765 Nullability of type of parameter doesn't match overridden member (possibly because of nullability attributes)."

namespace PurplePete.ConfluenceProvider.Contracts
{
    using System = global::System;

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial interface IClient : PurplePete.ConfluenceProvider.ISupportsAuthentication
    {
        /// <summary>
        /// Get Admin Key
        /// </summary>
        /// <remarks>
        /// Returns information about the admin key if one is currently enabled for the calling user within the site.
        /// <br/>
        /// <br/>**[Permissions](https://support.atlassian.com/user-management/docs/give-users-admin-permissions/#Centralized-user-management-content) required**:
        /// <br/>User must be an organization or site admin.
        /// </remarks>
        /// <returns>Returned if an admin key is currently enabled for the calling user.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<AdminKeyResponse> GetAdminKeyAsync();

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get Admin Key
        /// </summary>
        /// <remarks>
        /// Returns information about the admin key if one is currently enabled for the calling user within the site.
        /// <br/>
        /// <br/>**[Permissions](https://support.atlassian.com/user-management/docs/give-users-admin-permissions/#Centralized-user-management-content) required**:
        /// <br/>User must be an organization or site admin.
        /// </remarks>
        /// <returns>Returned if an admin key is currently enabled for the calling user.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<AdminKeyResponse> GetAdminKeyAsync(System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Enable Admin Key
        /// </summary>
        /// <remarks>
        /// Enables admin key access for the calling user within the site. If an admin key already exists for the user, a new one will be issued with an updated expiration time.
        /// <br/>
        /// <br/>**Note:** The `durationInMinutes` field within the request body is optional. If the request body is empty or if the `durationInMinutes` is set to 0 minutes, a new admin key will be issued to the calling user with a default duration of 10 minutes.
        /// <br/>
        /// <br/>**[Permissions](https://support.atlassian.com/user-management/docs/give-users-admin-permissions/#Centralized-user-management-content) required**:
        /// <br/>User must be an organization or site admin.
        /// </remarks>
        /// <returns>Returned if a new admin key is successfully issued for the calling user.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<AdminKeyResponse> EnableAdminKeyAsync(object body);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Enable Admin Key
        /// </summary>
        /// <remarks>
        /// Enables admin key access for the calling user within the site. If an admin key already exists for the user, a new one will be issued with an updated expiration time.
        /// <br/>
        /// <br/>**Note:** The `durationInMinutes` field within the request body is optional. If the request body is empty or if the `durationInMinutes` is set to 0 minutes, a new admin key will be issued to the calling user with a default duration of 10 minutes.
        /// <br/>
        /// <br/>**[Permissions](https://support.atlassian.com/user-management/docs/give-users-admin-permissions/#Centralized-user-management-content) required**:
        /// <br/>User must be an organization or site admin.
        /// </remarks>
        /// <returns>Returned if a new admin key is successfully issued for the calling user.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<AdminKeyResponse> EnableAdminKeyAsync(object body, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Disable Admin Key
        /// </summary>
        /// <remarks>
        /// Disables admin key access for the calling user within the site.
        /// <br/>
        /// <br/>**[Permissions](https://support.atlassian.com/user-management/docs/give-users-admin-permissions/#Centralized-user-management-content) required**:
        /// <br/>User must be an organization or site admin.
        /// </remarks>
        /// <returns>Returned if admin key access was successfully disabled for the calling user or if the user did not have an admin key in the first place.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task DisableAdminKeyAsync();

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Disable Admin Key
        /// </summary>
        /// <remarks>
        /// Disables admin key access for the calling user within the site.
        /// <br/>
        /// <br/>**[Permissions](https://support.atlassian.com/user-management/docs/give-users-admin-permissions/#Centralized-user-management-content) required**:
        /// <br/>User must be an organization or site admin.
        /// </remarks>
        /// <returns>Returned if admin key access was successfully disabled for the calling user or if the user did not have an admin key in the first place.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task DisableAdminKeyAsync(System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Get attachments
        /// </summary>
        /// <remarks>
        /// Returns all attachments. The number of results is limited by the `limit` parameter and additional results (if available)
        /// <br/>will be available through the `next` URL present in the `Link` response header.
        /// <br/>
        /// <br/>**[Permissions](https://confluence.atlassian.com/x/_AozKw) required**:
        /// <br/>Permission to view the container of the attachment.
        /// </remarks>
        /// <param name="sort">Used to sort the result by a particular field.</param>
        /// <param name="cursor">Used for pagination, this opaque cursor will be returned in the `next` URL in the `Link` response header. Use the relative URL in the `Link` header to retrieve the `next` set of results.</param>
        /// <param name="status">Filter the results to attachments based on their status. By default, `current` and `archived` are used.</param>
        /// <param name="mediaType">Filters on the mediaType of attachments. Only one may be specified.</param>
        /// <param name="filename">Filters on the file-name of attachments. Only one may be specified.</param>
        /// <param name="limit">Maximum number of attachments per result to return. If more results exist, use the `Link` header to retrieve a relative URL that will return the next set of results.</param>
        /// <returns>Returned if the requested attachments are returned.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Response> GetAttachmentsAsync(AttachmentSortOrder? sort, string cursor, System.Collections.Generic.IEnumerable<Anonymous> status, string mediaType, string filename, int? limit);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get attachments
        /// </summary>
        /// <remarks>
        /// Returns all attachments. The number of results is limited by the `limit` parameter and additional results (if available)
        /// <br/>will be available through the `next` URL present in the `Link` response header.
        /// <br/>
        /// <br/>**[Permissions](https://confluence.atlassian.com/x/_AozKw) required**:
        /// <br/>Permission to view the container of the attachment.
        /// </remarks>
        /// <param name="sort">Used to sort the result by a particular field.</param>
        /// <param name="cursor">Used for pagination, this opaque cursor will be returned in the `next` URL in the `Link` response header. Use the relative URL in the `Link` header to retrieve the `next` set of results.</param>
        /// <param name="status">Filter the results to attachments based on their status. By default, `current` and `archived` are used.</param>
        /// <param name="mediaType">Filters on the mediaType of attachments. Only one may be specified.</param>
        /// <param name="filename">Filters on the file-name of attachments. Only one may be specified.</param>
        /// <param name="limit">Maximum number of attachments per result to return. If more results exist, use the `Link` header to retrieve a relative URL that will return the next set of results.</param>
        /// <returns>Returned if the requested attachments are returned.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Response> GetAttachmentsAsync(AttachmentSortOrder? sort, string cursor, System.Collections.Generic.IEnumerable<Anonymous> status, string mediaType, string filename, int? limit, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Get attachment by id
        /// </summary>
        /// <remarks>
        /// Returns a specific attachment.
        /// <br/>
        /// <br/>**[Permissions](https://confluence.atlassian.com/x/_AozKw) required**:
        /// <br/>Permission to view the attachment's container.
        /// </remarks>
        /// <param name="id">The ID of the attachment to be returned. If you don't know the attachment's ID, use Get attachments for page/blogpost/custom content.</param>
        /// <param name="version">Allows you to retrieve a previously published version. Specify the previous version's number to retrieve its details.</param>
        /// <param name="include_labels">Includes labels associated with this attachment in the response.
        /// <br/>The number of results will be limited to 50 and sorted in the default sort order. 
        /// <br/>A `meta` and `_links` property will be present to indicate if more results are available and a link to retrieve the rest of the results.</param>
        /// <param name="include_properties">Includes content properties associated with this attachment in the response.
        /// <br/>The number of results will be limited to 50 and sorted in the default sort order. 
        /// <br/>A `meta` and `_links` property will be present to indicate if more results are available and a link to retrieve the rest of the results.</param>
        /// <param name="include_operations">Includes operations associated with this attachment in the response, as defined in the `Operation` object.
        /// <br/>The number of results will be limited to 50 and sorted in the default sort order. 
        /// <br/>A `meta` and `_links` property will be present to indicate if more results are available and a link to retrieve the rest of the results.</param>
        /// <param name="include_versions">Includes versions associated with this attachment in the response.
        /// <br/>The number of results will be limited to 50 and sorted in the default sort order. 
        /// <br/>A `meta` and `_links` property will be present to indicate if more results are available and a link to retrieve the rest of the results.</param>
        /// <param name="include_version">Includes the current version associated with this attachment in the response.
        /// <br/>By default this is included and can be omitted by setting the value to `false`.</param>
        /// <param name="include_collaborators">Includes collaborators on the attachment.</param>
        /// <returns>Returned if the requested attachment is returned.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Response2> GetAttachmentByIdAsync(string id, int? version, bool? include_labels, bool? include_properties, bool? include_operations, bool? include_versions, bool? include_version, bool? include_collaborators);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get attachment by id
        /// </summary>
        /// <remarks>
        /// Returns a specific attachment.
        /// <br/>
        /// <br/>**[Permissions](https://confluence.atlassian.com/x/_AozKw) required**:
        /// <br/>Permission to view the attachment's container.
        /// </remarks>
        /// <param name="id">The ID of the attachment to be returned. If you don't know the attachment's ID, use Get attachments for page/blogpost/custom content.</param>
        /// <param name="version">Allows you to retrieve a previously published version. Specify the previous version's number to retrieve its details.</param>
        /// <param name="include_labels">Includes labels associated with this attachment in the response.
        /// <br/>The number of results will be limited to 50 and sorted in the default sort order. 
        /// <br/>A `meta` and `_links` property will be present to indicate if more results are available and a link to retrieve the rest of the results.</param>
        /// <param name="include_properties">Includes content properties associated with this attachment in the response.
        /// <br/>The number of results will be limited to 50 and sorted in the default sort order. 
        /// <br/>A `meta` and `_links` property will be present to indicate if more results are available and a link to retrieve the rest of the results.</param>
        /// <param name="include_operations">Includes operations associated with this attachment in the response, as defined in the `Operation` object.
        /// <br/>The number of results will be limited to 50 and sorted in the default sort order. 
        /// <br/>A `meta` and `_links` property will be present to indicate if more results are available and a link to retrieve the rest of the results.</param>
        /// <param name="include_versions">Includes versions associated with this attachment in the response.
        /// <br/>The number of results will be limited to 50 and sorted in the default sort order. 
        /// <br/>A `meta` and `_links` property will be present to indicate if more results are available and a link to retrieve the rest of the results.</param>
        /// <param name="include_version">Includes the current version associated with this attachment in the response.
        /// <br/>By default this is included and can be omitted by setting the value to `false`.</param>
        /// <param name="include_collaborators">Includes collaborators on the attachment.</param>
        /// <returns>Returned if the requested attachment is returned.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Response2> GetAttachmentByIdAsync(string id, int? version, bool? include_labels, bool? include_properties, bool? include_operations, bool? include_versions, bool? include_version, bool? include_collaborators, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Delete attachment
        /// </summary>
        /// <remarks>
        /// Delete an attachment by id.
        /// <br/>
        /// <br/>Deleting an attachment moves the attachment to the trash, where it can be restored later. To permanently delete an attachment (or "purge" it),
        /// <br/>the endpoint must be called on a **trashed** attachment with the following param `purge=true`.
        /// <br/>
        /// <br/>**[Permissions](https://confluence.atlassian.com/x/_AozKw) required**:
        /// <br/>Permission to view the container of the attachment.
        /// <br/>Permission to delete attachments in the space.
        /// <br/>Permission to administer the space (if attempting to purge).
        /// </remarks>
        /// <param name="id">The ID of the attachment to be deleted.</param>
        /// <param name="purge">If attempting to purge the attachment.</param>
        /// <returns>Returned if the attachment was successfully deleted.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task DeleteAttachmentAsync(long id, bool? purge);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Delete attachment
        /// </summary>
        /// <remarks>
        /// Delete an attachment by id.
        /// <br/>
        /// <br/>Deleting an attachment moves the attachment to the trash, where it can be restored later. To permanently delete an attachment (or "purge" it),
        /// <br/>the endpoint must be called on a **trashed** attachment with the following param `purge=true`.
        /// <br/>
        /// <br/>**[Permissions](https://confluence.atlassian.com/x/_AozKw) required**:
        /// <br/>Permission to view the container of the attachment.
        /// <br/>Permission to delete attachments in the space.
        /// <br/>Permission to administer the space (if attempting to purge).
        /// </remarks>
        /// <param name="id">The ID of the attachment to be deleted.</param>
        /// <param name="purge">If attempting to purge the attachment.</param>
        /// <returns>Returned if the attachment was successfully deleted.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task DeleteAttachmentAsync(long id, bool? purge, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Get labels for attachment
        /// </summary>
        /// <remarks>
        /// Returns the labels of specific attachment. The number of results is limited by the `limit` parameter and additional results (if available)
        /// <br/>will be available through the `next` URL present in the `Link` response header.
        /// <br/>
        /// <br/>**[Permissions](https://confluence.atlassian.com/x/_AozKw) required**:
        /// <br/>Permission to view the parent content of the attachment and its corresponding space.
        /// <br/>Only labels that the user has permission to view will be returned.
        /// </remarks>
        /// <param name="id">The ID of the attachment for which labels should be returned.</param>
        /// <param name="prefix">Filter the results to labels based on their prefix.</param>
        /// <param name="sort">Used to sort the result by a particular field.</param>
        /// <param name="cursor">Used for pagination, this opaque cursor will be returned in the `next` URL in the `Link` response header. Use the relative URL in the `Link` header to retrieve the `next` set of results.</param>
        /// <param name="limit">Maximum number of labels per result to return. If more results exist, use the `Link` header to retrieve a relative URL that will return the next set of results.</param>
        /// <returns>Returned if the requested labels are returned.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Response3> GetAttachmentLabelsAsync(long id, Prefix? prefix, string sort, string cursor, int? limit);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get labels for attachment
        /// </summary>
        /// <remarks>
        /// Returns the labels of specific attachment. The number of results is limited by the `limit` parameter and additional results (if available)
        /// <br/>will be available through the `next` URL present in the `Link` response header.
        /// <br/>
        /// <br/>**[Permissions](https://confluence.atlassian.com/x/_AozKw) required**:
        /// <br/>Permission to view the parent content of the attachment and its corresponding space.
        /// <br/>Only labels that the user has permission to view will be returned.
        /// </remarks>
        /// <param name="id">The ID of the attachment for which labels should be returned.</param>
        /// <param name="prefix">Filter the results to labels based on their prefix.</param>
        /// <param name="sort">Used to sort the result by a particular field.</param>
        /// <param name="cursor">Used for pagination, this opaque cursor will be returned in the `next` URL in the `Link` response header. Use the relative URL in the `Link` header to retrieve the `next` set of results.</param>
        /// <param name="limit">Maximum number of labels per result to return. If more results exist, use the `Link` header to retrieve a relative URL that will return the next set of results.</param>
        /// <returns>Returned if the requested labels are returned.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Response3> GetAttachmentLabelsAsync(long id, Prefix? prefix, string sort, string cursor, int? limit, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Get permitted operations for attachment
        /// </summary>
        /// <remarks>
        /// Returns the permitted operations on specific attachment.
        /// <br/>
        /// <br/>**[Permissions](https://confluence.atlassian.com/x/_AozKw) required**:
        /// <br/>Permission to view the parent content of the attachment and its corresponding space.
        /// </remarks>
        /// <param name="id">The ID of the attachment for which operations should be returned.</param>
        /// <returns>Returned if the requested operations are returned.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<PermittedOperationsResponse> GetAttachmentOperationsAsync(string id);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get permitted operations for attachment
        /// </summary>
        /// <remarks>
        /// Returns the permitted operations on specific attachment.
        /// <br/>
        /// <br/>**[Permissions](https://confluence.atlassian.com/x/_AozKw) required**:
        /// <br/>Permission to view the parent content of the attachment and its corresponding space.
        /// </remarks>
        /// <param name="id">The ID of the attachment for which operations should be returned.</param>
        /// <returns>Returned if the requested operations are returned.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<PermittedOperationsResponse> GetAttachmentOperationsAsync(string id, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Get content properties for attachment
        /// </summary>
        /// <remarks>
        /// Retrieves all Content Properties tied to a specified attachment.
        /// <br/>
        /// <br/>**[Permissions](https://confluence.atlassian.com/x/_AozKw) required**:
        /// <br/>Permission to view the attachment.
        /// </remarks>
        /// <param name="attachment_id">The ID of the attachment for which content properties should be returned.</param>
        /// <param name="key">Filters the response to return a specific content property with matching key (case sensitive).</param>
        /// <param name="sort">Used to sort the result by a particular field.</param>
        /// <param name="cursor">Used for pagination, this opaque cursor will be returned in the `next` URL in the `Link` response header. Use the relative URL in the `Link` header to retrieve the `next` set of results.</param>
        /// <param name="limit">Maximum number of attachments per result to return. If more results exist, use the `Link` header to retrieve a relative URL that will return the next set of results.</param>
        /// <returns>Returned if the requested content properties are successfully retrieved.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Response4> GetAttachmentContentPropertiesAsync(string attachment_id, string key, ContentPropertySortOrder? sort, string cursor, int? limit);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get content properties for attachment
        /// </summary>
        /// <remarks>
        /// Retrieves all Content Properties tied to a specified attachment.
        /// <br/>
        /// <br/>**[Permissions](https://confluence.atlassian.com/x/_AozKw) required**:
        /// <br/>Permission to view the attachment.
        /// </remarks>
        /// <param name="attachment_id">The ID of the attachment for which content properties should be returned.</param>
        /// <param name="key">Filters the response to return a specific content property with matching key (case sensitive).</param>
        /// <param name="sort">Used to sort the result by a particular field.</param>
        /// <param name="cursor">Used for pagination, this opaque cursor will be returned in the `next` URL in the `Link` response header. Use the relative URL in the `Link` header to retrieve the `next` set of results.</param>
        /// <param name="limit">Maximum number of attachments per result to return. If more results exist, use the `Link` header to retrieve a relative URL that will return the next set of results.</param>
        /// <returns>Returned if the requested content properties are successfully retrieved.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Response4> GetAttachmentContentPropertiesAsync(string attachment_id, string key, ContentPropertySortOrder? sort, string cursor, int? limit, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Create content property for attachment
        /// </summary>
        /// <remarks>
        /// Creates a new content property for an attachment.
        /// <br/>
        /// <br/>**[Permissions](https://confluence.atlassian.com/x/_AozKw) required**:
        /// <br/>Permission to update the attachment.
        /// </remarks>
        /// <param name="attachment_id">The ID of the attachment to create a property for.</param>
        /// <param name="body">The content property to be created</param>
        /// <returns>Returned if the content property was created successfully.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<ContentProperty> CreateAttachmentPropertyAsync(string attachment_id, ContentPropertyCreateRequest body);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Create content property for attachment
        /// </summary>
        /// <remarks>
        /// Creates a new content property for an attachment.
        /// <br/>
        /// <br/>**[Permissions](https://confluence.atlassian.com/x/_AozKw) required**:
        /// <br/>Permission to update the attachment.
        /// </remarks>
        /// <param name="attachment_id">The ID of the attachment to create a property for.</param>
        /// <param name="body">The content property to be created</param>
        /// <returns>Returned if the content property was created successfully.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<ContentProperty> CreateAttachmentPropertyAsync(string attachment_id, ContentPropertyCreateRequest body, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Get content property for attachment by id
        /// </summary>
        /// <remarks>
        /// Retrieves a specific Content Property by ID that is attached to a specified attachment.
        /// <br/>
        /// <br/>**[Permissions](https://confluence.atlassian.com/x/_AozKw) required**:
        /// <br/>Permission to view the attachment.
        /// </remarks>
        /// <param name="attachment_id">The ID of the attachment for which content properties should be returned.</param>
        /// <param name="property_id">The ID of the content property to be returned</param>
        /// <returns>Returned if the requested content property is successfully retrieved.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<ContentProperty> GetAttachmentContentPropertiesByIdAsync(string attachment_id, long property_id);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get content property for attachment by id
        /// </summary>
        /// <remarks>
        /// Retrieves a specific Content Property by ID that is attached to a specified attachment.
        /// <br/>
        /// <br/>**[Permissions](https://confluence.atlassian.com/x/_AozKw) required**:
        /// <br/>Permission to view the attachment.
        /// </remarks>
        /// <param name="attachment_id">The ID of the attachment for which content properties should be returned.</param>
        /// <param name="property_id">The ID of the content property to be returned</param>
        /// <returns>Returned if the requested content property is successfully retrieved.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<ContentProperty> GetAttachmentContentPropertiesByIdAsync(string attachment_id, long property_id, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Update content property for attachment by id
        /// </summary>
        /// <remarks>
        /// Update a content property for attachment by its id. 
        /// <br/>
        /// <br/>**[Permissions](https://confluence.atlassian.com/x/_AozKw) required**:
        /// <br/>Permission to edit the attachment.
        /// </remarks>
        /// <param name="attachment_id">The ID of the attachment the property belongs to.</param>
        /// <param name="property_id">The ID of the property to be updated.</param>
        /// <param name="body">The content property to be updated.</param>
        /// <returns>Returned if the content property was updated successfully.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<ContentProperty> UpdateAttachmentPropertyByIdAsync(string attachment_id, long property_id, ContentPropertyUpdateRequest body);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Update content property for attachment by id
        /// </summary>
        /// <remarks>
        /// Update a content property for attachment by its id. 
        /// <br/>
        /// <br/>**[Permissions](https://confluence.atlassian.com/x/_AozKw) required**:
        /// <br/>Permission to edit the attachment.
        /// </remarks>
        /// <param name="attachment_id">The ID of the attachment the property belongs to.</param>
        /// <param name="property_id">The ID of the property to be updated.</param>
        /// <param name="body">The content property to be updated.</param>
        /// <returns>Returned if the content property was updated successfully.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<ContentProperty> UpdateAttachmentPropertyByIdAsync(string attachment_id, long property_id, ContentPropertyUpdateRequest body, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Delete content property for attachment by id
        /// </summary>
        /// <remarks>
        /// Deletes a content property for an attachment by its id. 
        /// <br/>
        /// <br/>**[Permissions](https://confluence.atlassian.com/x/_AozKw) required**:
        /// <br/>Permission to attachment the page.
        /// </remarks>
        /// <param name="attachment_id">The ID of the attachment the property belongs to.</param>
        /// <param name="property_id">The ID of the property to be deleted.</param>
        /// <returns>Returned if the content property was deleted successfully.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task DeleteAttachmentPropertyByIdAsync(string attachment_id, long property_id);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Delete content property for attachment by id
        /// </summary>
        /// <remarks>
        /// Deletes a content property for an attachment by its id. 
        /// <br/>
        /// <br/>**[Permissions](https://confluence.atlassian.com/x/_AozKw) required**:
        /// <br/>Permission to attachment the page.
        /// </remarks>
        /// <param name="attachment_id">The ID of the attachment the property belongs to.</param>
        /// <param name="property_id">The ID of the property to be deleted.</param>
        /// <returns>Returned if the content property was deleted successfully.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task DeleteAttachmentPropertyByIdAsync(string attachment_id, long property_id, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Get attachment versions
        /// </summary>
        /// <remarks>
        /// Returns the versions of specific attachment.
        /// <br/>
        /// <br/>**[Permissions](https://confluence.atlassian.com/x/_AozKw) required**:
        /// <br/>Permission to view the attachment and its corresponding space.
        /// </remarks>
        /// <param name="id">The ID of the attachment to be queried for its versions. If you don't know the attachment ID, use Get attachments and filter the results.</param>
        /// <param name="cursor">Used for pagination, this opaque cursor will be returned in the `next` URL in the `Link` response header. Use the relative URL in the `Link` header to retrieve the `next` set of results.</param>
        /// <param name="limit">Maximum number of versions per result to return. If more results exist, use the `Link` header to retrieve a relative URL that will return the next set of results.</param>
        /// <param name="sort">Used to sort the result by a particular field.</param>
        /// <returns>Returned if the requested attachment versions are returned.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Response5> GetAttachmentVersionsAsync(string id, string cursor, int? limit, VersionSortOrder? sort);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get attachment versions
        /// </summary>
        /// <remarks>
        /// Returns the versions of specific attachment.
        /// <br/>
        /// <br/>**[Permissions](https://confluence.atlassian.com/x/_AozKw) required**:
        /// <br/>Permission to view the attachment and its corresponding space.
        /// </remarks>
        /// <param name="id">The ID of the attachment to be queried for its versions. If you don't know the attachment ID, use Get attachments and filter the results.</param>
        /// <param name="cursor">Used for pagination, this opaque cursor will be returned in the `next` URL in the `Link` response header. Use the relative URL in the `Link` header to retrieve the `next` set of results.</param>
        /// <param name="limit">Maximum number of versions per result to return. If more results exist, use the `Link` header to retrieve a relative URL that will return the next set of results.</param>
        /// <param name="sort">Used to sort the result by a particular field.</param>
        /// <returns>Returned if the requested attachment versions are returned.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Response5> GetAttachmentVersionsAsync(string id, string cursor, int? limit, VersionSortOrder? sort, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Get version details for attachment version
        /// </summary>
        /// <remarks>
        /// Retrieves version details for the specified attachment and version number.
        /// <br/>
        /// <br/>**[Permissions](https://confluence.atlassian.com/x/_AozKw) required**:
        /// <br/>Permission to view the attachment.
        /// </remarks>
        /// <param name="attachment_id">The ID of the attachment for which version details should be returned.</param>
        /// <param name="version_number">The version number of the attachment to be returned.</param>
        /// <returns>Returned if the requested version details are successfully retrieved.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<DetailedVersion> GetAttachmentVersionDetailsAsync(string attachment_id, long version_number);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get version details for attachment version
        /// </summary>
        /// <remarks>
        /// Retrieves version details for the specified attachment and version number.
        /// <br/>
        /// <br/>**[Permissions](https://confluence.atlassian.com/x/_AozKw) required**:
        /// <br/>Permission to view the attachment.
        /// </remarks>
        /// <param name="attachment_id">The ID of the attachment for which version details should be returned.</param>
        /// <param name="version_number">The version number of the attachment to be returned.</param>
        /// <returns>Returned if the requested version details are successfully retrieved.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<DetailedVersion> GetAttachmentVersionDetailsAsync(string attachment_id, long version_number, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Get attachment comments
        /// </summary>
        /// <remarks>
        /// Returns the comments of the specific attachment.
        /// <br/>The number of results is limited by the `limit` parameter and additional results (if available) will be available through
        /// <br/>the `next` URL present in the `Link` response header.
        /// <br/>
        /// <br/>**[Permissions](https://confluence.atlassian.com/x/_AozKw) required**:
        /// <br/>Permission to view the attachment and its corresponding containers.
        /// </remarks>
        /// <param name="id">The ID of the attachment for which comments should be returned.</param>
        /// <param name="body_format">The content format type to be returned in the `body` field of the response. If available, the representation will be available under a response field of the same name under the `body` field.</param>
        /// <param name="cursor">Used for pagination, this opaque cursor will be returned in the `next` URL in the `Link` response header. Use the relative URL in the `Link` header to retrieve the `next` set of results.</param>
        /// <param name="limit">Maximum number of comments per result to return. If more results exist, use the `Link` header to retrieve a relative URL that will return the next set of results.</param>
        /// <param name="sort">Used to sort the result by a particular field.</param>
        /// <param name="version">Version number of the attachment to retrieve comments for. If no version provided, retrieves comments for the latest version.</param>
        /// <returns>Returned if the attachment comments were successfully retrieved</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Response6> GetAttachmentCommentsAsync(string id, PrimaryBodyRepresentation? body_format, string cursor, int? limit, CommentSortOrder? sort, long? version);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get attachment comments
        /// </summary>
        /// <remarks>
        /// Returns the comments of the specific attachment.
        /// <br/>The number of results is limited by the `limit` parameter and additional results (if available) will be available through
        /// <br/>the `next` URL present in the `Link` response header.
        /// <br/>
        /// <br/>**[Permissions](https://confluence.atlassian.com/x/_AozKw) required**:
        /// <br/>Permission to view the attachment and its corresponding containers.
        /// </remarks>
        /// <param name="id">The ID of the attachment for which comments should be returned.</param>
        /// <param name="body_format">The content format type to be returned in the `body` field of the response. If available, the representation will be available under a response field of the same name under the `body` field.</param>
        /// <param name="cursor">Used for pagination, this opaque cursor will be returned in the `next` URL in the `Link` response header. Use the relative URL in the `Link` header to retrieve the `next` set of results.</param>
        /// <param name="limit">Maximum number of comments per result to return. If more results exist, use the `Link` header to retrieve a relative URL that will return the next set of results.</param>
        /// <param name="sort">Used to sort the result by a particular field.</param>
        /// <param name="version">Version number of the attachment to retrieve comments for. If no version provided, retrieves comments for the latest version.</param>
        /// <returns>Returned if the attachment comments were successfully retrieved</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Response6> GetAttachmentCommentsAsync(string id, PrimaryBodyRepresentation? body_format, string cursor, int? limit, CommentSortOrder? sort, long? version, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Get blog posts
        /// </summary>
        /// <remarks>
        /// Returns all blog posts. The number of results is limited by the `limit` parameter and additional results (if available)
        /// <br/>will be available through the `next` URL present in the `Link` response header.
        /// <br/>
        /// <br/>**[Permissions](https://confluence.atlassian.com/x/_AozKw) required**:
        /// <br/>Permission to access the Confluence site ('Can use' global permission).
        /// <br/>Only blog posts that the user has permission to view will be returned.
        /// </remarks>
        /// <param name="id">Filter the results based on blog post ids. Multiple blog post ids can be specified as a comma-separated list.</param>
        /// <param name="space_id">Filter the results based on space ids. Multiple space ids can be specified as a comma-separated list.</param>
        /// <param name="sort">Used to sort the result by a particular field.</param>
        /// <param name="status">Filter the results to blog posts based on their status. By default, `current` is used.</param>
        /// <param name="title">Filter the results to blog posts based on their title.</param>
        /// <param name="body_format">The content format types to be returned in the `body` field of the response. If available, the representation will be available under a response field of the same name under the `body` field.</param>
        /// <param name="cursor">Used for pagination, this opaque cursor will be returned in the `next` URL in the `Link` response header. Use the relative URL in the `Link` header to retrieve the `next` set of results.</param>
        /// <param name="limit">Maximum number of blog posts per result to return. If more results exist, use the `Link` response header to retrieve a relative URL that will return the next set of results.</param>
        /// <returns>Returned if the requested blog posts are returned.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Response7> GetBlogPostsAsync(System.Collections.Generic.IEnumerable<long> id, System.Collections.Generic.IEnumerable<long> space_id, BlogPostSortOrder? sort, System.Collections.Generic.IEnumerable<Anonymous2> status, string title, PrimaryBodyRepresentation? body_format, string cursor, int? limit);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get blog posts
        /// </summary>
        /// <remarks>
        /// Returns all blog posts. The number of results is limited by the `limit` parameter and additional results (if available)
        /// <br/>will be available through the `next` URL present in the `Link` response header.
        /// <br/>
        /// <br/>**[Permissions](https://confluence.atlassian.com/x/_AozKw) required**:
        /// <br/>Permission to access the Confluence site ('Can use' global permission).
        /// <br/>Only blog posts that the user has permission to view will be returned.
        /// </remarks>
        /// <param name="id">Filter the results based on blog post ids. Multiple blog post ids can be specified as a comma-separated list.</param>
        /// <param name="space_id">Filter the results based on space ids. Multiple space ids can be specified as a comma-separated list.</param>
        /// <param name="sort">Used to sort the result by a particular field.</param>
        /// <param name="status">Filter the results to blog posts based on their status. By default, `current` is used.</param>
        /// <param name="title">Filter the results to blog posts based on their title.</param>
        /// <param name="body_format">The content format types to be returned in the `body` field of the response. If available, the representation will be available under a response field of the same name under the `body` field.</param>
        /// <param name="cursor">Used for pagination, this opaque cursor will be returned in the `next` URL in the `Link` response header. Use the relative URL in the `Link` header to retrieve the `next` set of results.</param>
        /// <param name="limit">Maximum number of blog posts per result to return. If more results exist, use the `Link` response header to retrieve a relative URL that will return the next set of results.</param>
        /// <returns>Returned if the requested blog posts are returned.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Response7> GetBlogPostsAsync(System.Collections.Generic.IEnumerable<long> id, System.Collections.Generic.IEnumerable<long> space_id, BlogPostSortOrder? sort, System.Collections.Generic.IEnumerable<Anonymous2> status, string title, PrimaryBodyRepresentation? body_format, string cursor, int? limit, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Create blog post
        /// </summary>
        /// <remarks>
        /// Creates a new blog post in the space specified by the spaceId.
        /// <br/>
        /// <br/>By default this will create the blog post as a non-draft, unless the status is specified as draft.
        /// <br/>If creating a non-draft, the title must not be empty.
        /// <br/>
        /// <br/>Currently only supports the storage representation specified in the body.representation enums below
        /// </remarks>
        /// <param name="private">The blog post will be private. Only the user who creates this blog post will have permission to view and edit one.</param>
        /// <returns>Returned if the blog post was created successfully.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Response8> CreateBlogPostAsync(bool? @private, object body);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Create blog post
        /// </summary>
        /// <remarks>
        /// Creates a new blog post in the space specified by the spaceId.
        /// <br/>
        /// <br/>By default this will create the blog post as a non-draft, unless the status is specified as draft.
        /// <br/>If creating a non-draft, the title must not be empty.
        /// <br/>
        /// <br/>Currently only supports the storage representation specified in the body.representation enums below
        /// </remarks>
        /// <param name="private">The blog post will be private. Only the user who creates this blog post will have permission to view and edit one.</param>
        /// <returns>Returned if the blog post was created successfully.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Response8> CreateBlogPostAsync(bool? @private, object body, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Get blog post by id
        /// </summary>
        /// <remarks>
        /// Returns a specific blog post.
        /// <br/>
        /// <br/>**[Permissions](https://confluence.atlassian.com/x/_AozKw) required**:
        /// <br/>Permission to view the blog post and its corresponding space.
        /// </remarks>
        /// <param name="id">The ID of the blog post to be returned. If you don't know the blog post ID, use Get blog posts and filter the results.</param>
        /// <param name="body_format">The content format types to be returned in the `body` field of the response. If available, the representation will be available under a response field of the same name under the `body` field.</param>
        /// <param name="get_draft">Retrieve the draft version of this blog post.</param>
        /// <param name="status">Filter the blog post being retrieved by its status.</param>
        /// <param name="version">Allows you to retrieve a previously published version. Specify the previous version's number to retrieve its details.</param>
        /// <param name="include_labels">Includes labels associated with this blog post in the response.
        /// <br/>The number of results will be limited to 50 and sorted in the default sort order. 
        /// <br/>A `meta` and `_links` property will be present to indicate if more results are available and a link to retrieve the rest of the results.</param>
        /// <param name="include_properties">Includes content properties associated with this blog post in the response.
        /// <br/>The number of results will be limited to 50 and sorted in the default sort order. 
        /// <br/>A `meta` and `_links` property will be present to indicate if more results are available and a link to retrieve the rest of the results.</param>
        /// <param name="include_operations">Includes operations associated with this blog post in the response, as defined in the `Operation` object.
        /// <br/>The number of results will be limited to 50 and sorted in the default sort order. 
        /// <br/>A `meta` and `_links` property will be present to indicate if more results are available and a link to retrieve the rest of the results.</param>
        /// <param name="include_likes">Includes likes associated with this blog post in the response.
        /// <br/>The number of results will be limited to 50 and sorted in the default sort order. 
        /// <br/>A `meta` and `_links` property will be present to indicate if more results are available and a link to retrieve the rest of the results.</param>
        /// <param name="include_versions">Includes versions associated with this blog post in the response.
        /// <br/>The number of results will be limited to 50 and sorted in the default sort order. 
        /// <br/>A `meta` and `_links` property will be present to indicate if more results are available and a link to retrieve the rest of the results.</param>
        /// <param name="include_version">Includes the current version associated with this blog post in the response.
        /// <br/>By default this is included and can be omitted by setting the value to `false`.</param>
        /// <param name="include_favorited_by_current_user_status">Includes whether this blog post has been favorited by the current user.</param>
        /// <param name="include_webresources">Includes web resources that can be used to render blog post content on a client.</param>
        /// <param name="include_collaborators">Includes collaborators on the blog post.</param>
        /// <returns>Returned if the requested blog post is returned.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Response9> GetBlogPostByIdAsync(long id, PrimaryBodyRepresentationSingle? body_format, bool? get_draft, System.Collections.Generic.IEnumerable<Anonymous3> status, int? version, bool? include_labels, bool? include_properties, bool? include_operations, bool? include_likes, bool? include_versions, bool? include_version, bool? include_favorited_by_current_user_status, bool? include_webresources, bool? include_collaborators);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get blog post by id
        /// </summary>
        /// <remarks>
        /// Returns a specific blog post.
        /// <br/>
        /// <br/>**[Permissions](https://confluence.atlassian.com/x/_AozKw) required**:
        /// <br/>Permission to view the blog post and its corresponding space.
        /// </remarks>
        /// <param name="id">The ID of the blog post to be returned. If you don't know the blog post ID, use Get blog posts and filter the results.</param>
        /// <param name="body_format">The content format types to be returned in the `body` field of the response. If available, the representation will be available under a response field of the same name under the `body` field.</param>
        /// <param name="get_draft">Retrieve the draft version of this blog post.</param>
        /// <param name="status">Filter the blog post being retrieved by its status.</param>
        /// <param name="version">Allows you to retrieve a previously published version. Specify the previous version's number to retrieve its details.</param>
        /// <param name="include_labels">Includes labels associated with this blog post in the response.
        /// <br/>The number of results will be limited to 50 and sorted in the default sort order. 
        /// <br/>A `meta` and `_links` property will be present to indicate if more results are available and a link to retrieve the rest of the results.</param>
        /// <param name="include_properties">Includes content properties associated with this blog post in the response.
        /// <br/>The number of results will be limited to 50 and sorted in the default sort order. 
        /// <br/>A `meta` and `_links` property will be present to indicate if more results are available and a link to retrieve the rest of the results.</param>
        /// <param name="include_operations">Includes operations associated with this blog post in the response, as defined in the `Operation` object.
        /// <br/>The number of results will be limited to 50 and sorted in the default sort order. 
        /// <br/>A `meta` and `_links` property will be present to indicate if more results are available and a link to retrieve the rest of the results.</param>
        /// <param name="include_likes">Includes likes associated with this blog post in the response.
        /// <br/>The number of results will be limited to 50 and sorted in the default sort order. 
        /// <br/>A `meta` and `_links` property will be present to indicate if more results are available and a link to retrieve the rest of the results.</param>
        /// <param name="include_versions">Includes versions associated with this blog post in the response.
        /// <br/>The number of results will be limited to 50 and sorted in the default sort order. 
        /// <br/>A `meta` and `_links` property will be present to indicate if more results are available and a link to retrieve the rest of the results.</param>
        /// <param name="include_version">Includes the current version associated with this blog post in the response.
        /// <br/>By default this is included and can be omitted by setting the value to `false`.</param>
        /// <param name="include_favorited_by_current_user_status">Includes whether this blog post has been favorited by the current user.</param>
        /// <param name="include_webresources">Includes web resources that can be used to render blog post content on a client.</param>
        /// <param name="include_collaborators">Includes collaborators on the blog post.</param>
        /// <returns>Returned if the requested blog post is returned.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Response9> GetBlogPostByIdAsync(long id, PrimaryBodyRepresentationSingle? body_format, bool? get_draft, System.Collections.Generic.IEnumerable<Anonymous3> status, int? version, bool? include_labels, bool? include_properties, bool? include_operations, bool? include_likes, bool? include_versions, bool? include_version, bool? include_favorited_by_current_user_status, bool? include_webresources, bool? include_collaborators, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Update blog post
        /// </summary>
        /// <remarks>
        /// Update a blog post by id.
        /// <br/>
        /// <br/>**[Permissions](https://confluence.atlassian.com/x/_AozKw) required**:
        /// <br/>Permission to view the blog post and its corresponding space. Permission to update blog posts in the space.
        /// </remarks>
        /// <param name="id">The ID of the blog post to be updated. If you don't know the blog post ID, use Get Blog Posts and filter the results.</param>
        /// <returns>Returned if the requested blog post is successfully updated.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Response10> UpdateBlogPostAsync(long id, object body);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Update blog post
        /// </summary>
        /// <remarks>
        /// Update a blog post by id.
        /// <br/>
        /// <br/>**[Permissions](https://confluence.atlassian.com/x/_AozKw) required**:
        /// <br/>Permission to view the blog post and its corresponding space. Permission to update blog posts in the space.
        /// </remarks>
        /// <param name="id">The ID of the blog post to be updated. If you don't know the blog post ID, use Get Blog Posts and filter the results.</param>
        /// <returns>Returned if the requested blog post is successfully updated.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Response10> UpdateBlogPostAsync(long id, object body, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Delete blog post
        /// </summary>
        /// <remarks>
        /// Delete a blog post by id.
        /// <br/>
        /// <br/>By default this will delete blog posts that are non-drafts. To delete a blog post that is a draft, the endpoint must be called on a 
        /// <br/>draft with the following param `draft=true`. Discarded drafts are not sent to the trash and are permanently deleted.
        /// <br/>
        /// <br/>Deleting a blog post that is not a draft moves the blog post to the trash, where it can be restored later.
        /// <br/>To permanently delete a blog post (or "purge" it), the endpoint must be called on a **trashed** blog post with the following param `purge=true`.
        /// <br/>
        /// <br/>**[Permissions](https://confluence.atlassian.com/x/_AozKw) required**:
        /// <br/>Permission to view the blog post and its corresponding space.
        /// <br/>Permission to delete blog posts in the space.
        /// <br/>Permission to administer the space (if attempting to purge).
        /// </remarks>
        /// <param name="id">The ID of the blog post to be deleted.</param>
        /// <param name="purge">If attempting to purge the blog post.</param>
        /// <param name="draft">If attempting to delete a blog post that is a draft.</param>
        /// <returns>Returned if the blog post was successfully deleted.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task DeleteBlogPostAsync(long id, bool? purge, bool? draft);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Delete blog post
        /// </summary>
        /// <remarks>
        /// Delete a blog post by id.
        /// <br/>
        /// <br/>By default this will delete blog posts that are non-drafts. To delete a blog post that is a draft, the endpoint must be called on a 
        /// <br/>draft with the following param `draft=true`. Discarded drafts are not sent to the trash and are permanently deleted.
        /// <br/>
        /// <br/>Deleting a blog post that is not a draft moves the blog post to the trash, where it can be restored later.
        /// <br/>To permanently delete a blog post (or "purge" it), the endpoint must be called on a **trashed** blog post with the following param `purge=true`.
        /// <br/>
        /// <br/>**[Permissions](https://confluence.atlassian.com/x/_AozKw) required**:
        /// <br/>Permission to view the blog post and its corresponding space.
        /// <br/>Permission to delete blog posts in the space.
        /// <br/>Permission to administer the space (if attempting to purge).
        /// </remarks>
        /// <param name="id">The ID of the blog post to be deleted.</param>
        /// <param name="purge">If attempting to purge the blog post.</param>
        /// <param name="draft">If attempting to delete a blog post that is a draft.</param>
        /// <returns>Returned if the blog post was successfully deleted.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task DeleteBlogPostAsync(long id, bool? purge, bool? draft, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Get attachments for blog post
        /// </summary>
        /// <remarks>
        /// Returns the attachments of specific blog post. The number of results is limited by the `limit` parameter and additional results (if available)
        /// <br/>will be available through the `next` URL present in the `Link` response header.
        /// <br/>
        /// <br/>**[Permissions](https://confluence.atlassian.com/x/_AozKw) required**:
        /// <br/>Permission to view the content of the blog post and its corresponding space.
        /// </remarks>
        /// <param name="id">The ID of the blog post for which attachments should be returned.</param>
        /// <param name="sort">Used to sort the result by a particular field.</param>
        /// <param name="cursor">Used for pagination, this opaque cursor will be returned in the `next` URL in the `Link` response header. Use the relative URL in the `Link` header to retrieve the `next` set of results.</param>
        /// <param name="status">Filter the results to attachments based on their status. By default, `current` and `archived` are used.</param>
        /// <param name="mediaType">Filters on the mediaType of attachments. Only one may be specified.</param>
        /// <param name="filename">Filters on the file-name of attachments. Only one may be specified.</param>
        /// <param name="limit">Maximum number of attachments per result to return. If more results exist, use the `Link` header to retrieve a relative URL that will return the next set of results.</param>
        /// <returns>Returned if the requested attachments are returned.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Response11> GetBlogpostAttachmentsAsync(long id, AttachmentSortOrder? sort, string cursor, System.Collections.Generic.IEnumerable<Anonymous4> status, string mediaType, string filename, int? limit);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get attachments for blog post
        /// </summary>
        /// <remarks>
        /// Returns the attachments of specific blog post. The number of results is limited by the `limit` parameter and additional results (if available)
        /// <br/>will be available through the `next` URL present in the `Link` response header.
        /// <br/>
        /// <br/>**[Permissions](https://confluence.atlassian.com/x/_AozKw) required**:
        /// <br/>Permission to view the content of the blog post and its corresponding space.
        /// </remarks>
        /// <param name="id">The ID of the blog post for which attachments should be returned.</param>
        /// <param name="sort">Used to sort the result by a particular field.</param>
        /// <param name="cursor">Used for pagination, this opaque cursor will be returned in the `next` URL in the `Link` response header. Use the relative URL in the `Link` header to retrieve the `next` set of results.</param>
        /// <param name="status">Filter the results to attachments based on their status. By default, `current` and `archived` are used.</param>
        /// <param name="mediaType">Filters on the mediaType of attachments. Only one may be specified.</param>
        /// <param name="filename">Filters on the file-name of attachments. Only one may be specified.</param>
        /// <param name="limit">Maximum number of attachments per result to return. If more results exist, use the `Link` header to retrieve a relative URL that will return the next set of results.</param>
        /// <returns>Returned if the requested attachments are returned.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Response11> GetBlogpostAttachmentsAsync(long id, AttachmentSortOrder? sort, string cursor, System.Collections.Generic.IEnumerable<Anonymous4> status, string mediaType, string filename, int? limit, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Get custom content by type in blog post
        /// </summary>
        /// <remarks>
        /// Returns all custom content for a given type within a given blogpost. The number of results is limited by the `limit` parameter and additional results (if available)
        /// <br/>will be available through the `next` URL present in the `Link` response header.
        /// <br/>
        /// <br/>**[Permissions](https://confluence.atlassian.com/x/_AozKw) required**:
        /// <br/>Permission to view the custom content, the container of the custom content (blog post), and the corresponding space.
        /// </remarks>
        /// <param name="id">The ID of the blog post for which custom content should be returned.</param>
        /// <param name="type">The type of custom content being requested. See: https://developer.atlassian.com/cloud/confluence/custom-content/ for additional details on custom content.</param>
        /// <param name="sort">Used to sort the result by a particular field.</param>
        /// <param name="cursor">Used for pagination, this opaque cursor will be returned in the `next` URL in the `Link` response header. Use the relative URL in the `Link` header to retrieve the `next` set of results.</param>
        /// <param name="limit">Maximum number of pages per result to return. If more results exist, use the `Link` header to retrieve a relative URL that will return the next set of results.</param>
        /// <param name="body_format">The content format types to be returned in the `body` field of the response. If available, the representation will be available under a response field of the same name under the `body` field.
        /// <br/>
        /// <br/>Note: If the custom content body type is `storage`, the `storage` and `atlas_doc_format` body formats are able to be returned. If the custom content body type is `raw`, only the `raw` body format is able to be returned.</param>
        /// <returns>Returned if the requested custom content is returned.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Response12> GetCustomContentByTypeInBlogPostAsync(long id, string type, CustomContentSortOrder? sort, string cursor, int? limit, CustomContentBodyRepresentation? body_format);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get custom content by type in blog post
        /// </summary>
        /// <remarks>
        /// Returns all custom content for a given type within a given blogpost. The number of results is limited by the `limit` parameter and additional results (if available)
        /// <br/>will be available through the `next` URL present in the `Link` response header.
        /// <br/>
        /// <br/>**[Permissions](https://confluence.atlassian.com/x/_AozKw) required**:
        /// <br/>Permission to view the custom content, the container of the custom content (blog post), and the corresponding space.
        /// </remarks>
        /// <param name="id">The ID of the blog post for which custom content should be returned.</param>
        /// <param name="type">The type of custom content being requested. See: https://developer.atlassian.com/cloud/confluence/custom-content/ for additional details on custom content.</param>
        /// <param name="sort">Used to sort the result by a particular field.</param>
        /// <param name="cursor">Used for pagination, this opaque cursor will be returned in the `next` URL in the `Link` response header. Use the relative URL in the `Link` header to retrieve the `next` set of results.</param>
        /// <param name="limit">Maximum number of pages per result to return. If more results exist, use the `Link` header to retrieve a relative URL that will return the next set of results.</param>
        /// <param name="body_format">The content format types to be returned in the `body` field of the response. If available, the representation will be available under a response field of the same name under the `body` field.
        /// <br/>
        /// <br/>Note: If the custom content body type is `storage`, the `storage` and `atlas_doc_format` body formats are able to be returned. If the custom content body type is `raw`, only the `raw` body format is able to be returned.</param>
        /// <returns>Returned if the requested custom content is returned.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Response12> GetCustomContentByTypeInBlogPostAsync(long id, string type, CustomContentSortOrder? sort, string cursor, int? limit, CustomContentBodyRepresentation? body_format, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Get labels for blog post
        /// </summary>
        /// <remarks>
        /// Returns the labels of specific blog post. The number of results is limited by the `limit` parameter and additional results (if available)
        /// <br/>will be available through the `next` URL present in the `Link` response header.
        /// <br/>
        /// <br/>**[Permissions](https://confluence.atlassian.com/x/_AozKw) required**:
        /// <br/>Permission to view the content of the blog post and its corresponding space.
        /// <br/>Only labels that the user has permission to view will be returned.
        /// </remarks>
        /// <param name="id">The ID of the blog post for which labels should be returned.</param>
        /// <param name="prefix">Filter the results to labels based on their prefix.</param>
        /// <param name="sort">Used to sort the result by a particular field.</param>
        /// <param name="cursor">Used for pagination, this opaque cursor will be returned in the `next` URL in the `Link` response header. Use the relative URL in the `Link` header to retrieve the `next` set of results.</param>
        /// <param name="limit">Maximum number of labels per result to return. If more results exist, use the `Link` header to retrieve a relative URL that will return the next set of results.</param>
        /// <returns>Returned if the requested labels are returned.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Response13> GetBlogPostLabelsAsync(long id, Prefix2? prefix, string sort, string cursor, int? limit);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get labels for blog post
        /// </summary>
        /// <remarks>
        /// Returns the labels of specific blog post. The number of results is limited by the `limit` parameter and additional results (if available)
        /// <br/>will be available through the `next` URL present in the `Link` response header.
        /// <br/>
        /// <br/>**[Permissions](https://confluence.atlassian.com/x/_AozKw) required**:
        /// <br/>Permission to view the content of the blog post and its corresponding space.
        /// <br/>Only labels that the user has permission to view will be returned.
        /// </remarks>
        /// <param name="id">The ID of the blog post for which labels should be returned.</param>
        /// <param name="prefix">Filter the results to labels based on their prefix.</param>
        /// <param name="sort">Used to sort the result by a particular field.</param>
        /// <param name="cursor">Used for pagination, this opaque cursor will be returned in the `next` URL in the `Link` response header. Use the relative URL in the `Link` header to retrieve the `next` set of results.</param>
        /// <param name="limit">Maximum number of labels per result to return. If more results exist, use the `Link` header to retrieve a relative URL that will return the next set of results.</param>
        /// <returns>Returned if the requested labels are returned.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Response13> GetBlogPostLabelsAsync(long id, Prefix2? prefix, string sort, string cursor, int? limit, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Get like count for blog post
        /// </summary>
        /// <remarks>
        /// Returns the count of likes of specific blog post.
        /// <br/>
        /// <br/>**[Permissions](https://confluence.atlassian.com/x/_AozKw) required**:
        /// <br/>Permission to view the content of the blog post and its corresponding space.
        /// </remarks>
        /// <param name="id">The ID of the blog post for which like count should be returned.</param>
        /// <returns>Returned if the requested count is returned.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Integer> GetBlogPostLikeCountAsync(long id);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get like count for blog post
        /// </summary>
        /// <remarks>
        /// Returns the count of likes of specific blog post.
        /// <br/>
        /// <br/>**[Permissions](https://confluence.atlassian.com/x/_AozKw) required**:
        /// <br/>Permission to view the content of the blog post and its corresponding space.
        /// </remarks>
        /// <param name="id">The ID of the blog post for which like count should be returned.</param>
        /// <returns>Returned if the requested count is returned.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Integer> GetBlogPostLikeCountAsync(long id, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Get account IDs of likes for blog post
        /// </summary>
        /// <remarks>
        /// Returns the account IDs of likes of specific blog post.
        /// <br/>
        /// <br/>**[Permissions](https://confluence.atlassian.com/x/_AozKw) required**:
        /// <br/>Permission to view the content of the blog post and its corresponding space.
        /// </remarks>
        /// <param name="id">The ID of the blog post for which account IDs should be returned.</param>
        /// <param name="cursor">Used for pagination, this opaque cursor will be returned in the `next` URL in the `Link` response header. Use the relative URL in the `Link` header to retrieve the `next` set of results.</param>
        /// <param name="limit">Maximum number of account IDs per result to return. If more results exist, use the `Link` header to retrieve a relative URL that will return the next set of results.</param>
        /// <returns>Returned if the requested account IDs are returned.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Response14> GetBlogPostLikeUsersAsync(long id, string cursor, int? limit);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get account IDs of likes for blog post
        /// </summary>
        /// <remarks>
        /// Returns the account IDs of likes of specific blog post.
        /// <br/>
        /// <br/>**[Permissions](https://confluence.atlassian.com/x/_AozKw) required**:
        /// <br/>Permission to view the content of the blog post and its corresponding space.
        /// </remarks>
        /// <param name="id">The ID of the blog post for which account IDs should be returned.</param>
        /// <param name="cursor">Used for pagination, this opaque cursor will be returned in the `next` URL in the `Link` response header. Use the relative URL in the `Link` header to retrieve the `next` set of results.</param>
        /// <param name="limit">Maximum number of account IDs per result to return. If more results exist, use the `Link` header to retrieve a relative URL that will return the next set of results.</param>
        /// <returns>Returned if the requested account IDs are returned.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Response14> GetBlogPostLikeUsersAsync(long id, string cursor, int? limit, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Get content properties for blog post
        /// </summary>
        /// <remarks>
        /// Retrieves all Content Properties tied to a specified blog post.
        /// <br/>
        /// <br/>**[Permissions](https://confluence.atlassian.com/x/_AozKw) required**:
        /// <br/>Permission to view the blog post.
        /// </remarks>
        /// <param name="blogpost_id">The ID of the blog post for which content properties should be returned.</param>
        /// <param name="key">Filters the response to return a specific content property with matching key (case sensitive).</param>
        /// <param name="sort">Used to sort the result by a particular field.</param>
        /// <param name="cursor">Used for pagination, this opaque cursor will be returned in the `next` URL in the `Link` response header. Use the relative URL in the `Link` header to retrieve the `next` set of results.</param>
        /// <param name="limit">Maximum number of attachments per result to return. If more results exist, use the `Link` header to retrieve a relative URL that will return the next set of results.</param>
        /// <returns>Returned if the requested content properties are successfully retrieved.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Response15> GetBlogpostContentPropertiesAsync(long blogpost_id, string key, ContentPropertySortOrder? sort, string cursor, int? limit);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get content properties for blog post
        /// </summary>
        /// <remarks>
        /// Retrieves all Content Properties tied to a specified blog post.
        /// <br/>
        /// <br/>**[Permissions](https://confluence.atlassian.com/x/_AozKw) required**:
        /// <br/>Permission to view the blog post.
        /// </remarks>
        /// <param name="blogpost_id">The ID of the blog post for which content properties should be returned.</param>
        /// <param name="key">Filters the response to return a specific content property with matching key (case sensitive).</param>
        /// <param name="sort">Used to sort the result by a particular field.</param>
        /// <param name="cursor">Used for pagination, this opaque cursor will be returned in the `next` URL in the `Link` response header. Use the relative URL in the `Link` header to retrieve the `next` set of results.</param>
        /// <param name="limit">Maximum number of attachments per result to return. If more results exist, use the `Link` header to retrieve a relative URL that will return the next set of results.</param>
        /// <returns>Returned if the requested content properties are successfully retrieved.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Response15> GetBlogpostContentPropertiesAsync(long blogpost_id, string key, ContentPropertySortOrder? sort, string cursor, int? limit, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Create content property for blog post
        /// </summary>
        /// <remarks>
        /// Creates a new property for a blogpost.
        /// <br/>
        /// <br/>**[Permissions](https://confluence.atlassian.com/x/_AozKw) required**:
        /// <br/>Permission to update the blog post.
        /// </remarks>
        /// <param name="blogpost_id">The ID of the blog post to create a property for.</param>
        /// <param name="body">The content property to be created</param>
        /// <returns>Returned if the content property was created successfully.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<ContentProperty> CreateBlogpostPropertyAsync(long blogpost_id, ContentPropertyCreateRequest body);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Create content property for blog post
        /// </summary>
        /// <remarks>
        /// Creates a new property for a blogpost.
        /// <br/>
        /// <br/>**[Permissions](https://confluence.atlassian.com/x/_AozKw) required**:
        /// <br/>Permission to update the blog post.
        /// </remarks>
        /// <param name="blogpost_id">The ID of the blog post to create a property for.</param>
        /// <param name="body">The content property to be created</param>
        /// <returns>Returned if the content property was created successfully.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<ContentProperty> CreateBlogpostPropertyAsync(long blogpost_id, ContentPropertyCreateRequest body, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Get content property for blog post by id
        /// </summary>
        /// <remarks>
        /// Retrieves a specific Content Property by ID that is attached to a specified blog post.
        /// <br/>
        /// <br/>**[Permissions](https://confluence.atlassian.com/x/_AozKw) required**:
        /// <br/>Permission to view the blog post.
        /// </remarks>
        /// <param name="blogpost_id">The ID of the blog post for which content properties should be returned.</param>
        /// <param name="property_id">The ID of the property being requested</param>
        /// <returns>Returned if the requested content property is successfully retrieved.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<ContentProperty> GetBlogpostContentPropertiesByIdAsync(long blogpost_id, long property_id);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get content property for blog post by id
        /// </summary>
        /// <remarks>
        /// Retrieves a specific Content Property by ID that is attached to a specified blog post.
        /// <br/>
        /// <br/>**[Permissions](https://confluence.atlassian.com/x/_AozKw) required**:
        /// <br/>Permission to view the blog post.
        /// </remarks>
        /// <param name="blogpost_id">The ID of the blog post for which content properties should be returned.</param>
        /// <param name="property_id">The ID of the property being requested</param>
        /// <returns>Returned if the requested content property is successfully retrieved.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<ContentProperty> GetBlogpostContentPropertiesByIdAsync(long blogpost_id, long property_id, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Update content property for blog post by id
        /// </summary>
        /// <remarks>
        /// Update a content property for blog post by its id. 
        /// <br/>
        /// <br/>**[Permissions](https://confluence.atlassian.com/x/_AozKw) required**:
        /// <br/>Permission to edit the blog post.
        /// </remarks>
        /// <param name="blogpost_id">The ID of the blog post the property belongs to.</param>
        /// <param name="property_id">The ID of the property to be updated.</param>
        /// <param name="body">The content property to be updated.</param>
        /// <returns>Returned if the content property was updated successfully.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<ContentProperty> UpdateBlogpostPropertyByIdAsync(long blogpost_id, long property_id, ContentPropertyUpdateRequest body);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Update content property for blog post by id
        /// </summary>
        /// <remarks>
        /// Update a content property for blog post by its id. 
        /// <br/>
        /// <br/>**[Permissions](https://confluence.atlassian.com/x/_AozKw) required**:
        /// <br/>Permission to edit the blog post.
        /// </remarks>
        /// <param name="blogpost_id">The ID of the blog post the property belongs to.</param>
        /// <param name="property_id">The ID of the property to be updated.</param>
        /// <param name="body">The content property to be updated.</param>
        /// <returns>Returned if the content property was updated successfully.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<ContentProperty> UpdateBlogpostPropertyByIdAsync(long blogpost_id, long property_id, ContentPropertyUpdateRequest body, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Delete content property for blogpost by id
        /// </summary>
        /// <remarks>
        /// Deletes a content property for a blogpost by its id. 
        /// <br/>
        /// <br/>**[Permissions](https://confluence.atlassian.com/x/_AozKw) required**:
        /// <br/>Permission to edit the blog post.
        /// </remarks>
        /// <param name="blogpost_id">The ID of the blog post the property belongs to.</param>
        /// <param name="property_id">The ID of the property to be deleted.</param>
        /// <returns>Returned if the content property was deleted successfully.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task DeleteBlogpostPropertyByIdAsync(long blogpost_id, long property_id);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Delete content property for blogpost by id
        /// </summary>
        /// <remarks>
        /// Deletes a content property for a blogpost by its id. 
        /// <br/>
        /// <br/>**[Permissions](https://confluence.atlassian.com/x/_AozKw) required**:
        /// <br/>Permission to edit the blog post.
        /// </remarks>
        /// <param name="blogpost_id">The ID of the blog post the property belongs to.</param>
        /// <param name="property_id">The ID of the property to be deleted.</param>
        /// <returns>Returned if the content property was deleted successfully.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task DeleteBlogpostPropertyByIdAsync(long blogpost_id, long property_id, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Get permitted operations for blog post
        /// </summary>
        /// <remarks>
        /// Returns the permitted operations on specific blog post.
        /// <br/>
        /// <br/>**[Permissions](https://confluence.atlassian.com/x/_AozKw) required**:
        /// <br/>Permission to view the parent content of the blog post and its corresponding space.
        /// </remarks>
        /// <param name="id">The ID of the blog post for which operations should be returned.</param>
        /// <returns>Returned if the requested operations are returned.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<PermittedOperationsResponse> GetBlogPostOperationsAsync(long id);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get permitted operations for blog post
        /// </summary>
        /// <remarks>
        /// Returns the permitted operations on specific blog post.
        /// <br/>
        /// <br/>**[Permissions](https://confluence.atlassian.com/x/_AozKw) required**:
        /// <br/>Permission to view the parent content of the blog post and its corresponding space.
        /// </remarks>
        /// <param name="id">The ID of the blog post for which operations should be returned.</param>
        /// <returns>Returned if the requested operations are returned.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<PermittedOperationsResponse> GetBlogPostOperationsAsync(long id, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Get blog post versions
        /// </summary>
        /// <remarks>
        /// Returns the versions of specific blog post. 
        /// <br/>
        /// <br/>**[Permissions](https://confluence.atlassian.com/x/_AozKw) required**:
        /// <br/>Permission to view the blog post and its corresponding space.
        /// </remarks>
        /// <param name="id">The ID of the blog post to be queried for its versions. If you don't know the blog post ID, use Get blog posts and filter the results.</param>
        /// <param name="body_format">The content format types to be returned in the `body` field of the response. If available, the representation will be available under a response field of the same name under the `body` field.</param>
        /// <param name="cursor">Used for pagination, this opaque cursor will be returned in the `next` URL in the `Link` response header. Use the relative URL in the `Link` header to retrieve the `next` set of results.</param>
        /// <param name="limit">Maximum number of versions per result to return. If more results exist, use the `Link` header to retrieve a relative URL that will return the next set of results.</param>
        /// <param name="sort">Used to sort the result by a particular field.</param>
        /// <returns>Returned if the requested blog post versions are returned.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Response16> GetBlogPostVersionsAsync(long id, PrimaryBodyRepresentation? body_format, string cursor, int? limit, VersionSortOrder? sort);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get blog post versions
        /// </summary>
        /// <remarks>
        /// Returns the versions of specific blog post. 
        /// <br/>
        /// <br/>**[Permissions](https://confluence.atlassian.com/x/_AozKw) required**:
        /// <br/>Permission to view the blog post and its corresponding space.
        /// </remarks>
        /// <param name="id">The ID of the blog post to be queried for its versions. If you don't know the blog post ID, use Get blog posts and filter the results.</param>
        /// <param name="body_format">The content format types to be returned in the `body` field of the response. If available, the representation will be available under a response field of the same name under the `body` field.</param>
        /// <param name="cursor">Used for pagination, this opaque cursor will be returned in the `next` URL in the `Link` response header. Use the relative URL in the `Link` header to retrieve the `next` set of results.</param>
        /// <param name="limit">Maximum number of versions per result to return. If more results exist, use the `Link` header to retrieve a relative URL that will return the next set of results.</param>
        /// <param name="sort">Used to sort the result by a particular field.</param>
        /// <returns>Returned if the requested blog post versions are returned.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Response16> GetBlogPostVersionsAsync(long id, PrimaryBodyRepresentation? body_format, string cursor, int? limit, VersionSortOrder? sort, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Get version details for blog post version
        /// </summary>
        /// <remarks>
        /// Retrieves version details for the specified blog post and version number.
        /// <br/>
        /// <br/>**[Permissions](https://confluence.atlassian.com/x/_AozKw) required**:
        /// <br/>Permission to view the blog post.
        /// </remarks>
        /// <param name="blogpost_id">The ID of the blog post for which version details should be returned.</param>
        /// <param name="version_number">The version number of the blog post to be returned.</param>
        /// <returns>Returned if the requested version details are successfully retrieved.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<DetailedVersion> GetBlogPostVersionDetailsAsync(long blogpost_id, long version_number);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get version details for blog post version
        /// </summary>
        /// <remarks>
        /// Retrieves version details for the specified blog post and version number.
        /// <br/>
        /// <br/>**[Permissions](https://confluence.atlassian.com/x/_AozKw) required**:
        /// <br/>Permission to view the blog post.
        /// </remarks>
        /// <param name="blogpost_id">The ID of the blog post for which version details should be returned.</param>
        /// <param name="version_number">The version number of the blog post to be returned.</param>
        /// <returns>Returned if the requested version details are successfully retrieved.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<DetailedVersion> GetBlogPostVersionDetailsAsync(long blogpost_id, long version_number, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Convert content ids to content types
        /// </summary>
        /// <remarks>
        /// Converts a list of content ids into their associated content types. This is useful for users migrating from v1 to v2
        /// <br/>who may have stored just content ids without their associated type. This will return types as they should be used in v2.
        /// <br/>Notably, this will return `inline-comment` for inline comments and `footer-comment` for footer comments, which is distinct from them
        /// <br/>both being represented by `comment` in v1.
        /// <br/>
        /// <br/>**[Permissions](https://confluence.atlassian.com/x/_AozKw) required**:
        /// <br/>Permission to view the requested content. Any content that the user does not have permission to view or does not exist will map to `null` in the response.
        /// </remarks>
        /// <returns>Returned if the requested content ids are successfully converted to their content types</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<ContentIdToContentTypeResponse> ConvertContentIdsToContentTypesAsync(object body);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Convert content ids to content types
        /// </summary>
        /// <remarks>
        /// Converts a list of content ids into their associated content types. This is useful for users migrating from v1 to v2
        /// <br/>who may have stored just content ids without their associated type. This will return types as they should be used in v2.
        /// <br/>Notably, this will return `inline-comment` for inline comments and `footer-comment` for footer comments, which is distinct from them
        /// <br/>both being represented by `comment` in v1.
        /// <br/>
        /// <br/>**[Permissions](https://confluence.atlassian.com/x/_AozKw) required**:
        /// <br/>Permission to view the requested content. Any content that the user does not have permission to view or does not exist will map to `null` in the response.
        /// </remarks>
        /// <returns>Returned if the requested content ids are successfully converted to their content types</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<ContentIdToContentTypeResponse> ConvertContentIdsToContentTypesAsync(object body, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Get custom content by type
        /// </summary>
        /// <remarks>
        /// Returns all custom content for a given type. The number of results is limited by the `limit` parameter and additional results (if available)
        /// <br/>will be available through the `next` URL present in the `Link` response header.
        /// <br/>
        /// <br/>**[Permissions](https://confluence.atlassian.com/x/_AozKw) required**:
        /// <br/>Permission to view the custom content, the container of the custom content, and the corresponding space (if different from the container).
        /// </remarks>
        /// <param name="type">The type of custom content being requested. See: https://developer.atlassian.com/cloud/confluence/custom-content/ for additional details on custom content.</param>
        /// <param name="id">Filter the results based on custom content ids. Multiple custom content ids can be specified as a comma-separated list.</param>
        /// <param name="space_id">Filter the results based on space ids. Multiple space ids can be specified as a comma-separated list.</param>
        /// <param name="sort">Used to sort the result by a particular field.</param>
        /// <param name="cursor">Used for pagination, this opaque cursor will be returned in the `next` URL in the `Link` response header. Use the relative URL in the `Link` header to retrieve the `next` set of results.</param>
        /// <param name="limit">Maximum number of pages per result to return. If more results exist, use the `Link` header to retrieve a relative URL that will return the next set of results.</param>
        /// <param name="body_format">The content format types to be returned in the `body` field of the response. If available, the representation will be available under a response field of the same name under the `body` field.
        /// <br/>
        /// <br/>Note: If the custom content body type is `storage`, the `storage` and `atlas_doc_format` body formats are able to be returned. If the custom content body type is `raw`, only the `raw` body format is able to be returned.</param>
        /// <returns>Returned if the requested custom content is returned.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Response17> GetCustomContentByTypeAsync(string type, System.Collections.Generic.IEnumerable<long> id, System.Collections.Generic.IEnumerable<long> space_id, CustomContentSortOrder? sort, string cursor, int? limit, CustomContentBodyRepresentation? body_format);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get custom content by type
        /// </summary>
        /// <remarks>
        /// Returns all custom content for a given type. The number of results is limited by the `limit` parameter and additional results (if available)
        /// <br/>will be available through the `next` URL present in the `Link` response header.
        /// <br/>
        /// <br/>**[Permissions](https://confluence.atlassian.com/x/_AozKw) required**:
        /// <br/>Permission to view the custom content, the container of the custom content, and the corresponding space (if different from the container).
        /// </remarks>
        /// <param name="type">The type of custom content being requested. See: https://developer.atlassian.com/cloud/confluence/custom-content/ for additional details on custom content.</param>
        /// <param name="id">Filter the results based on custom content ids. Multiple custom content ids can be specified as a comma-separated list.</param>
        /// <param name="space_id">Filter the results based on space ids. Multiple space ids can be specified as a comma-separated list.</param>
        /// <param name="sort">Used to sort the result by a particular field.</param>
        /// <param name="cursor">Used for pagination, this opaque cursor will be returned in the `next` URL in the `Link` response header. Use the relative URL in the `Link` header to retrieve the `next` set of results.</param>
        /// <param name="limit">Maximum number of pages per result to return. If more results exist, use the `Link` header to retrieve a relative URL that will return the next set of results.</param>
        /// <param name="body_format">The content format types to be returned in the `body` field of the response. If available, the representation will be available under a response field of the same name under the `body` field.
        /// <br/>
        /// <br/>Note: If the custom content body type is `storage`, the `storage` and `atlas_doc_format` body formats are able to be returned. If the custom content body type is `raw`, only the `raw` body format is able to be returned.</param>
        /// <returns>Returned if the requested custom content is returned.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Response17> GetCustomContentByTypeAsync(string type, System.Collections.Generic.IEnumerable<long> id, System.Collections.Generic.IEnumerable<long> space_id, CustomContentSortOrder? sort, string cursor, int? limit, CustomContentBodyRepresentation? body_format, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Create custom content
        /// </summary>
        /// <remarks>
        /// Creates a new custom content in the given space, page, blogpost or other custom content.
        /// <br/>
        /// <br/>Only one of `spaceId`, `pageId`, `blogPostId`, or `customContentId` is required in the request body.
        /// <br/>**[Permissions](https://confluence.atlassian.com/x/_AozKw) required**:
        /// <br/>Permission to view the content of the page or blogpost and its corresponding space. Permission to create custom content in the space.
        /// </remarks>
        /// <returns>Returned if the requested custom content is created successfully.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Response18> CreateCustomContentAsync(object body);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Create custom content
        /// </summary>
        /// <remarks>
        /// Creates a new custom content in the given space, page, blogpost or other custom content.
        /// <br/>
        /// <br/>Only one of `spaceId`, `pageId`, `blogPostId`, or `customContentId` is required in the request body.
        /// <br/>**[Permissions](https://confluence.atlassian.com/x/_AozKw) required**:
        /// <br/>Permission to view the content of the page or blogpost and its corresponding space. Permission to create custom content in the space.
        /// </remarks>
        /// <returns>Returned if the requested custom content is created successfully.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Response18> CreateCustomContentAsync(object body, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Get custom content by id
        /// </summary>
        /// <remarks>
        /// Returns a specific piece of custom content. 
        /// <br/>
        /// <br/>**[Permissions](https://confluence.atlassian.com/x/_AozKw) required**:
        /// <br/>Permission to view the custom content, the container of the custom content, and the corresponding space (if different from the container).
        /// </remarks>
        /// <param name="id">The ID of the custom content to be returned. If you don't know the custom content ID, use Get Custom Content by Type and filter the results.</param>
        /// <param name="body_format">The content format types to be returned in the `body` field of the response. If available, the representation will be available under a response field of the same name under the `body` field.
        /// <br/>
        /// <br/>Note: If the custom content body type is `storage`, the `storage` and `atlas_doc_format` body formats are able to be returned. If the custom content body type is `raw`, only the `raw` body format is able to be returned.</param>
        /// <param name="version">Allows you to retrieve a previously published version. Specify the previous version's number to retrieve its details.</param>
        /// <param name="include_labels">Includes labels associated with this custom content in the response.
        /// <br/>The number of results will be limited to 50 and sorted in the default sort order. 
        /// <br/>A `meta` and `_links` property will be present to indicate if more results are available and a link to retrieve the rest of the results.</param>
        /// <param name="include_properties">Includes content properties associated with this custom content in the response.
        /// <br/>The number of results will be limited to 50 and sorted in the default sort order. 
        /// <br/>A `meta` and `_links` property will be present to indicate if more results are available and a link to retrieve the rest of the results.</param>
        /// <param name="include_operations">Includes operations associated with this custom content in the response, as defined in the `Operation` object.
        /// <br/>The number of results will be limited to 50 and sorted in the default sort order. 
        /// <br/>A `meta` and `_links` property will be present to indicate if more results are available and a link to retrieve the rest of the results.</param>
        /// <param name="include_versions">Includes versions associated with this custom content in the response.
        /// <br/>The number of results will be limited to 50 and sorted in the default sort order. 
        /// <br/>A `meta` and `_links` property will be present to indicate if more results are available and a link to retrieve the rest of the results.</param>
        /// <param name="include_version">Includes the current version associated with this custom content in the response.
        /// <br/>By default this is included and can be omitted by setting the value to `false`.</param>
        /// <param name="include_collaborators">Includes collaborators on the custom content.</param>
        /// <returns>Returned if the requested custom content is returned.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Response19> GetCustomContentByIdAsync(long id, CustomContentBodyRepresentationSingle? body_format, int? version, bool? include_labels, bool? include_properties, bool? include_operations, bool? include_versions, bool? include_version, bool? include_collaborators);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get custom content by id
        /// </summary>
        /// <remarks>
        /// Returns a specific piece of custom content. 
        /// <br/>
        /// <br/>**[Permissions](https://confluence.atlassian.com/x/_AozKw) required**:
        /// <br/>Permission to view the custom content, the container of the custom content, and the corresponding space (if different from the container).
        /// </remarks>
        /// <param name="id">The ID of the custom content to be returned. If you don't know the custom content ID, use Get Custom Content by Type and filter the results.</param>
        /// <param name="body_format">The content format types to be returned in the `body` field of the response. If available, the representation will be available under a response field of the same name under the `body` field.
        /// <br/>
        /// <br/>Note: If the custom content body type is `storage`, the `storage` and `atlas_doc_format` body formats are able to be returned. If the custom content body type is `raw`, only the `raw` body format is able to be returned.</param>
        /// <param name="version">Allows you to retrieve a previously published version. Specify the previous version's number to retrieve its details.</param>
        /// <param name="include_labels">Includes labels associated with this custom content in the response.
        /// <br/>The number of results will be limited to 50 and sorted in the default sort order. 
        /// <br/>A `meta` and `_links` property will be present to indicate if more results are available and a link to retrieve the rest of the results.</param>
        /// <param name="include_properties">Includes content properties associated with this custom content in the response.
        /// <br/>The number of results will be limited to 50 and sorted in the default sort order. 
        /// <br/>A `meta` and `_links` property will be present to indicate if more results are available and a link to retrieve the rest of the results.</param>
        /// <param name="include_operations">Includes operations associated with this custom content in the response, as defined in the `Operation` object.
        /// <br/>The number of results will be limited to 50 and sorted in the default sort order. 
        /// <br/>A `meta` and `_links` property will be present to indicate if more results are available and a link to retrieve the rest of the results.</param>
        /// <param name="include_versions">Includes versions associated with this custom content in the response.
        /// <br/>The number of results will be limited to 50 and sorted in the default sort order. 
        /// <br/>A `meta` and `_links` property will be present to indicate if more results are available and a link to retrieve the rest of the results.</param>
        /// <param name="include_version">Includes the current version associated with this custom content in the response.
        /// <br/>By default this is included and can be omitted by setting the value to `false`.</param>
        /// <param name="include_collaborators">Includes collaborators on the custom content.</param>
        /// <returns>Returned if the requested custom content is returned.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Response19> GetCustomContentByIdAsync(long id, CustomContentBodyRepresentationSingle? body_format, int? version, bool? include_labels, bool? include_properties, bool? include_operations, bool? include_versions, bool? include_version, bool? include_collaborators, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Update custom content
        /// </summary>
        /// <remarks>
        /// Update a custom content by id.
        /// <br/>At most one of `spaceId`, `pageId`, `blogPostId`, or `customContentId` is allowed in the request body.
        /// <br/>Note that if `spaceId` is specified, it must be the same as the `spaceId` used for creating the custom content
        /// <br/>as moving custom content to a different space is not supported.
        /// <br/>
        /// <br/>**[Permissions](https://confluence.atlassian.com/x/_AozKw) required**:
        /// <br/>Permission to view the content of the page or blogpost and its corresponding space. Permission to update custom content in the space.
        /// </remarks>
        /// <param name="id">The ID of the custom content to be updated. If you don't know the custom content ID, use Get Custom Content by Type and filter the results.</param>
        /// <returns>Returned if the requested custom content is updated successfully.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Response20> UpdateCustomContentAsync(long id, object body);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Update custom content
        /// </summary>
        /// <remarks>
        /// Update a custom content by id.
        /// <br/>At most one of `spaceId`, `pageId`, `blogPostId`, or `customContentId` is allowed in the request body.
        /// <br/>Note that if `spaceId` is specified, it must be the same as the `spaceId` used for creating the custom content
        /// <br/>as moving custom content to a different space is not supported.
        /// <br/>
        /// <br/>**[Permissions](https://confluence.atlassian.com/x/_AozKw) required**:
        /// <br/>Permission to view the content of the page or blogpost and its corresponding space. Permission to update custom content in the space.
        /// </remarks>
        /// <param name="id">The ID of the custom content to be updated. If you don't know the custom content ID, use Get Custom Content by Type and filter the results.</param>
        /// <returns>Returned if the requested custom content is updated successfully.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Response20> UpdateCustomContentAsync(long id, object body, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Delete custom content
        /// </summary>
        /// <remarks>
        /// Delete a custom content by id.
        /// <br/>
        /// <br/>Deleting a custom content will either move it to the trash or permanently delete it (purge it), depending on the apiSupport.
        /// <br/>To permanently delete a **trashed** custom content, the endpoint must be called with the following param `purge=true`.
        /// <br/>
        /// <br/>**[Permissions](https://confluence.atlassian.com/x/_AozKw) required**:
        /// <br/>Permission to view the content of the page or blogpost and its corresponding space.
        /// <br/>Permission to delete custom content in the space.
        /// <br/>Permission to administer the space (if attempting to purge).
        /// </remarks>
        /// <param name="id">The ID of the custom content to be deleted.</param>
        /// <param name="purge">If attempting to purge the custom content.</param>
        /// <returns>Returned if the custom content was deleted.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task DeleteCustomContentAsync(long id, bool? purge);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Delete custom content
        /// </summary>
        /// <remarks>
        /// Delete a custom content by id.
        /// <br/>
        /// <br/>Deleting a custom content will either move it to the trash or permanently delete it (purge it), depending on the apiSupport.
        /// <br/>To permanently delete a **trashed** custom content, the endpoint must be called with the following param `purge=true`.
        /// <br/>
        /// <br/>**[Permissions](https://confluence.atlassian.com/x/_AozKw) required**:
        /// <br/>Permission to view the content of the page or blogpost and its corresponding space.
        /// <br/>Permission to delete custom content in the space.
        /// <br/>Permission to administer the space (if attempting to purge).
        /// </remarks>
        /// <param name="id">The ID of the custom content to be deleted.</param>
        /// <param name="purge">If attempting to purge the custom content.</param>
        /// <returns>Returned if the custom content was deleted.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task DeleteCustomContentAsync(long id, bool? purge, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Get attachments for custom content
        /// </summary>
        /// <remarks>
        /// Returns the attachments of specific custom content. The number of results is limited by the `limit` parameter and additional results (if available)
        /// <br/>will be available through the `next` URL present in the `Link` response header.
        /// <br/>
        /// <br/>**[Permissions](https://confluence.atlassian.com/x/_AozKw) required**:
        /// <br/>Permission to view the content of the custom content and its corresponding space.
        /// </remarks>
        /// <param name="id">The ID of the custom content for which attachments should be returned.</param>
        /// <param name="sort">Used to sort the result by a particular field.</param>
        /// <param name="cursor">Used for pagination, this opaque cursor will be returned in the `next` URL in the `Link` response header. Use the relative URL in the `Link` header to retrieve the `next` set of results.</param>
        /// <param name="status">Filter the results to attachments based on their status. By default, `current` and `archived` are used.</param>
        /// <param name="mediaType">Filters on the mediaType of attachments. Only one may be specified.</param>
        /// <param name="filename">Filters on the file-name of attachments. Only one may be specified.</param>
        /// <param name="limit">Maximum number of attachments per result to return. If more results exist, use the `Link` header to retrieve a relative URL that will return the next set of results.</param>
        /// <returns>Returned if the requested attachments are returned.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Response21> GetCustomContentAttachmentsAsync(long id, AttachmentSortOrder? sort, string cursor, System.Collections.Generic.IEnumerable<Anonymous5> status, string mediaType, string filename, int? limit);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get attachments for custom content
        /// </summary>
        /// <remarks>
        /// Returns the attachments of specific custom content. The number of results is limited by the `limit` parameter and additional results (if available)
        /// <br/>will be available through the `next` URL present in the `Link` response header.
        /// <br/>
        /// <br/>**[Permissions](https://confluence.atlassian.com/x/_AozKw) required**:
        /// <br/>Permission to view the content of the custom content and its corresponding space.
        /// </remarks>
        /// <param name="id">The ID of the custom content for which attachments should be returned.</param>
        /// <param name="sort">Used to sort the result by a particular field.</param>
        /// <param name="cursor">Used for pagination, this opaque cursor will be returned in the `next` URL in the `Link` response header. Use the relative URL in the `Link` header to retrieve the `next` set of results.</param>
        /// <param name="status">Filter the results to attachments based on their status. By default, `current` and `archived` are used.</param>
        /// <param name="mediaType">Filters on the mediaType of attachments. Only one may be specified.</param>
        /// <param name="filename">Filters on the file-name of attachments. Only one may be specified.</param>
        /// <param name="limit">Maximum number of attachments per result to return. If more results exist, use the `Link` header to retrieve a relative URL that will return the next set of results.</param>
        /// <returns>Returned if the requested attachments are returned.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Response21> GetCustomContentAttachmentsAsync(long id, AttachmentSortOrder? sort, string cursor, System.Collections.Generic.IEnumerable<Anonymous5> status, string mediaType, string filename, int? limit, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Get custom content comments
        /// </summary>
        /// <remarks>
        /// Returns the comments of the specific custom content.
        /// <br/>The number of results is limited by the `limit` parameter and additional results (if available) will be available through
        /// <br/>the `next` URL present in the `Link` response header.
        /// <br/>
        /// <br/>**[Permissions](https://confluence.atlassian.com/x/_AozKw) required**:
        /// <br/>Permission to view the custom content and its corresponding containers.
        /// </remarks>
        /// <param name="id">The ID of the custom content for which comments should be returned.</param>
        /// <param name="body_format">The content format type to be returned in the `body` field of the response. If available, the representation will be available under a response field of the same name under the `body` field.</param>
        /// <param name="cursor">Used for pagination, this opaque cursor will be returned in the `next` URL in the `Link` response header. Use the relative URL in the `Link` header to retrieve the `next` set of results.</param>
        /// <param name="limit">Maximum number of comments per result to return. If more results exist, use the `Link` header to retrieve a relative URL that will return the next set of results.</param>
        /// <param name="sort">Used to sort the result by a particular field.</param>
        /// <returns>Returned if the custom content comments were successfully retrieved</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Response22> GetCustomContentCommentsAsync(long id, PrimaryBodyRepresentation? body_format, string cursor, int? limit, CommentSortOrder? sort);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get custom content comments
        /// </summary>
        /// <remarks>
        /// Returns the comments of the specific custom content.
        /// <br/>The number of results is limited by the `limit` parameter and additional results (if available) will be available through
        /// <br/>the `next` URL present in the `Link` response header.
        /// <br/>
        /// <br/>**[Permissions](https://confluence.atlassian.com/x/_AozKw) required**:
        /// <br/>Permission to view the custom content and its corresponding containers.
        /// </remarks>
        /// <param name="id">The ID of the custom content for which comments should be returned.</param>
        /// <param name="body_format">The content format type to be returned in the `body` field of the response. If available, the representation will be available under a response field of the same name under the `body` field.</param>
        /// <param name="cursor">Used for pagination, this opaque cursor will be returned in the `next` URL in the `Link` response header. Use the relative URL in the `Link` header to retrieve the `next` set of results.</param>
        /// <param name="limit">Maximum number of comments per result to return. If more results exist, use the `Link` header to retrieve a relative URL that will return the next set of results.</param>
        /// <param name="sort">Used to sort the result by a particular field.</param>
        /// <returns>Returned if the custom content comments were successfully retrieved</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Response22> GetCustomContentCommentsAsync(long id, PrimaryBodyRepresentation? body_format, string cursor, int? limit, CommentSortOrder? sort, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Get labels for custom content
        /// </summary>
        /// <remarks>
        /// Returns the labels for a specific piece of custom content. The number of results is limited by the `limit` parameter and additional results (if available)
        /// <br/>will be available through the `next` URL present in the `Link` response header.
        /// <br/>
        /// <br/>**[Permissions](https://confluence.atlassian.com/x/_AozKw) required**:
        /// <br/>Permission to view the custom content and its corresponding space.
        /// <br/>Only labels that the user has permission to view will be returned.
        /// </remarks>
        /// <param name="id">The ID of the custom content for which labels should be returned.</param>
        /// <param name="prefix">Filter the results to labels based on their prefix.</param>
        /// <param name="sort">Used to sort the result by a particular field.</param>
        /// <param name="cursor">Used for pagination, this opaque cursor will be returned in the `next` URL in the `Link` response header. Use the relative URL in the `Link` header to retrieve the `next` set of results.</param>
        /// <param name="limit">Maximum number of labels per result to return. If more results exist, use the `Link` header to retrieve a relative URL that will return the next set of results.</param>
        /// <returns>Returned if the requested labels are returned.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Response23> GetCustomContentLabelsAsync(long id, Prefix3? prefix, string sort, string cursor, int? limit);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get labels for custom content
        /// </summary>
        /// <remarks>
        /// Returns the labels for a specific piece of custom content. The number of results is limited by the `limit` parameter and additional results (if available)
        /// <br/>will be available through the `next` URL present in the `Link` response header.
        /// <br/>
        /// <br/>**[Permissions](https://confluence.atlassian.com/x/_AozKw) required**:
        /// <br/>Permission to view the custom content and its corresponding space.
        /// <br/>Only labels that the user has permission to view will be returned.
        /// </remarks>
        /// <param name="id">The ID of the custom content for which labels should be returned.</param>
        /// <param name="prefix">Filter the results to labels based on their prefix.</param>
        /// <param name="sort">Used to sort the result by a particular field.</param>
        /// <param name="cursor">Used for pagination, this opaque cursor will be returned in the `next` URL in the `Link` response header. Use the relative URL in the `Link` header to retrieve the `next` set of results.</param>
        /// <param name="limit">Maximum number of labels per result to return. If more results exist, use the `Link` header to retrieve a relative URL that will return the next set of results.</param>
        /// <returns>Returned if the requested labels are returned.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Response23> GetCustomContentLabelsAsync(long id, Prefix3? prefix, string sort, string cursor, int? limit, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Get permitted operations for custom content
        /// </summary>
        /// <remarks>
        /// Returns the permitted operations on specific custom content.
        /// <br/>
        /// <br/>**[Permissions](https://confluence.atlassian.com/x/_AozKw) required**:
        /// <br/>Permission to view the parent content of the custom content and its corresponding space.
        /// </remarks>
        /// <param name="id">The ID of the custom content for which operations should be returned.</param>
        /// <returns>Returned if the requested operations are returned.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<PermittedOperationsResponse> GetCustomContentOperationsAsync(long id);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get permitted operations for custom content
        /// </summary>
        /// <remarks>
        /// Returns the permitted operations on specific custom content.
        /// <br/>
        /// <br/>**[Permissions](https://confluence.atlassian.com/x/_AozKw) required**:
        /// <br/>Permission to view the parent content of the custom content and its corresponding space.
        /// </remarks>
        /// <param name="id">The ID of the custom content for which operations should be returned.</param>
        /// <returns>Returned if the requested operations are returned.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<PermittedOperationsResponse> GetCustomContentOperationsAsync(long id, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Get content properties for custom content
        /// </summary>
        /// <remarks>
        /// Retrieves Content Properties tied to a specified custom content.
        /// <br/>
        /// <br/>**[Permissions](https://confluence.atlassian.com/x/_AozKw) required**:
        /// <br/>Permission to view the custom content.
        /// </remarks>
        /// <param name="custom_content_id">The ID of the custom content for which content properties should be returned.</param>
        /// <param name="key">Filters the response to return a specific content property with matching key (case sensitive).</param>
        /// <param name="sort">Used to sort the result by a particular field.</param>
        /// <param name="cursor">Used for pagination, this opaque cursor will be returned in the `next` URL in the `Link` response header. Use the relative URL in the `Link` header to retrieve the `next` set of results.</param>
        /// <param name="limit">Maximum number of attachments per result to return. If more results exist, use the `Link` header to retrieve a relative URL that will return the next set of results.</param>
        /// <returns>Returned if the requested content properties are successfully retrieved.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Response24> GetCustomContentContentPropertiesAsync(long custom_content_id, string key, ContentPropertySortOrder? sort, string cursor, int? limit);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get content properties for custom content
        /// </summary>
        /// <remarks>
        /// Retrieves Content Properties tied to a specified custom content.
        /// <br/>
        /// <br/>**[Permissions](https://confluence.atlassian.com/x/_AozKw) required**:
        /// <br/>Permission to view the custom content.
        /// </remarks>
        /// <param name="custom_content_id">The ID of the custom content for which content properties should be returned.</param>
        /// <param name="key">Filters the response to return a specific content property with matching key (case sensitive).</param>
        /// <param name="sort">Used to sort the result by a particular field.</param>
        /// <param name="cursor">Used for pagination, this opaque cursor will be returned in the `next` URL in the `Link` response header. Use the relative URL in the `Link` header to retrieve the `next` set of results.</param>
        /// <param name="limit">Maximum number of attachments per result to return. If more results exist, use the `Link` header to retrieve a relative URL that will return the next set of results.</param>
        /// <returns>Returned if the requested content properties are successfully retrieved.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Response24> GetCustomContentContentPropertiesAsync(long custom_content_id, string key, ContentPropertySortOrder? sort, string cursor, int? limit, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Create content property for custom content
        /// </summary>
        /// <remarks>
        /// Creates a new content property for a piece of custom content.
        /// <br/>
        /// <br/>**[Permissions](https://confluence.atlassian.com/x/_AozKw) required**:
        /// <br/>Permission to update the custom content.
        /// </remarks>
        /// <param name="custom_content_id">The ID of the custom content to create a property for.</param>
        /// <param name="body">The content property to be created</param>
        /// <returns>Returned if the content property was created successfully.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<ContentProperty> CreateCustomContentPropertyAsync(long custom_content_id, ContentPropertyCreateRequest body);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Create content property for custom content
        /// </summary>
        /// <remarks>
        /// Creates a new content property for a piece of custom content.
        /// <br/>
        /// <br/>**[Permissions](https://confluence.atlassian.com/x/_AozKw) required**:
        /// <br/>Permission to update the custom content.
        /// </remarks>
        /// <param name="custom_content_id">The ID of the custom content to create a property for.</param>
        /// <param name="body">The content property to be created</param>
        /// <returns>Returned if the content property was created successfully.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<ContentProperty> CreateCustomContentPropertyAsync(long custom_content_id, ContentPropertyCreateRequest body, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Get content property for custom content by id
        /// </summary>
        /// <remarks>
        /// Retrieves a specific Content Property by ID that is attached to a specified custom content.
        /// <br/>
        /// <br/>**[Permissions](https://confluence.atlassian.com/x/_AozKw) required**:
        /// <br/>Permission to view the page.
        /// </remarks>
        /// <param name="custom_content_id">The ID of the custom content for which content properties should be returned.</param>
        /// <param name="property_id">The ID of the content property being requested.</param>
        /// <returns>Returned if the requested content property is successfully retrieved.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<ContentProperty> GetCustomContentContentPropertiesByIdAsync(long custom_content_id, long property_id);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get content property for custom content by id
        /// </summary>
        /// <remarks>
        /// Retrieves a specific Content Property by ID that is attached to a specified custom content.
        /// <br/>
        /// <br/>**[Permissions](https://confluence.atlassian.com/x/_AozKw) required**:
        /// <br/>Permission to view the page.
        /// </remarks>
        /// <param name="custom_content_id">The ID of the custom content for which content properties should be returned.</param>
        /// <param name="property_id">The ID of the content property being requested.</param>
        /// <returns>Returned if the requested content property is successfully retrieved.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<ContentProperty> GetCustomContentContentPropertiesByIdAsync(long custom_content_id, long property_id, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Update content property for custom content by id
        /// </summary>
        /// <remarks>
        /// Update a content property for a piece of custom content by its id. 
        /// <br/>
        /// <br/>**[Permissions](https://confluence.atlassian.com/x/_AozKw) required**:
        /// <br/>Permission to edit the custom content.
        /// </remarks>
        /// <param name="custom_content_id">The ID of the custom content the property belongs to.</param>
        /// <param name="property_id">The ID of the property to be updated.</param>
        /// <param name="body">The content property to be updated.</param>
        /// <returns>Returned if the content property was updated successfully.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<ContentProperty> UpdateCustomContentPropertyByIdAsync(long custom_content_id, long property_id, ContentPropertyUpdateRequest body);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Update content property for custom content by id
        /// </summary>
        /// <remarks>
        /// Update a content property for a piece of custom content by its id. 
        /// <br/>
        /// <br/>**[Permissions](https://confluence.atlassian.com/x/_AozKw) required**:
        /// <br/>Permission to edit the custom content.
        /// </remarks>
        /// <param name="custom_content_id">The ID of the custom content the property belongs to.</param>
        /// <param name="property_id">The ID of the property to be updated.</param>
        /// <param name="body">The content property to be updated.</param>
        /// <returns>Returned if the content property was updated successfully.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<ContentProperty> UpdateCustomContentPropertyByIdAsync(long custom_content_id, long property_id, ContentPropertyUpdateRequest body, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Delete content property for custom content by id
        /// </summary>
        /// <remarks>
        /// Deletes a content property for a piece of custom content by its id. 
        /// <br/>
        /// <br/>**[Permissions](https://confluence.atlassian.com/x/_AozKw) required**:
        /// <br/>Permission to edit the custom content.
        /// </remarks>
        /// <param name="custom_content_id">The ID of the custom content the property belongs to.</param>
        /// <param name="property_id">The ID of the property to be deleted.</param>
        /// <returns>Returned if the content property was deleted successfully.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task DeleteCustomContentPropertyByIdAsync(long custom_content_id, long property_id);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Delete content property for custom content by id
        /// </summary>
        /// <remarks>
        /// Deletes a content property for a piece of custom content by its id. 
        /// <br/>
        /// <br/>**[Permissions](https://confluence.atlassian.com/x/_AozKw) required**:
        /// <br/>Permission to edit the custom content.
        /// </remarks>
        /// <param name="custom_content_id">The ID of the custom content the property belongs to.</param>
        /// <param name="property_id">The ID of the property to be deleted.</param>
        /// <returns>Returned if the content property was deleted successfully.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task DeleteCustomContentPropertyByIdAsync(long custom_content_id, long property_id, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Get labels
        /// </summary>
        /// <remarks>
        /// Returns all labels. The number of results is limited by the `limit` parameter and additional results (if available)
        /// <br/>will be available through the `next` URL present in the `Link` response header.
        /// <br/>
        /// <br/>**[Permissions](https://confluence.atlassian.com/x/_AozKw) required**:
        /// <br/>Permission to access the Confluence site ('Can use' global permission).
        /// <br/>Only labels that the user has permission to view will be returned.
        /// </remarks>
        /// <param name="label_id">Filters on label ID. Multiple IDs can be specified as a comma-separated list.</param>
        /// <param name="prefix">Filters on label prefix. Multiple IDs can be specified as a comma-separated list.</param>
        /// <param name="cursor">Used for pagination, this opaque cursor will be returned in the `next` URL in the `Link` response header. Use the relative URL in the `Link` header to retrieve the `next` set of results.</param>
        /// <param name="sort">Used to sort the result by a particular field.</param>
        /// <param name="limit">Maximum number of labels per result to return. If more results exist, use the `Link` header to retrieve a relative URL that will return the next set of results.</param>
        /// <returns>Returned if the requested labels are returned.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Response25> GetLabelsAsync(System.Collections.Generic.IEnumerable<long> label_id, System.Collections.Generic.IEnumerable<string> prefix, string cursor, string sort, int? limit);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get labels
        /// </summary>
        /// <remarks>
        /// Returns all labels. The number of results is limited by the `limit` parameter and additional results (if available)
        /// <br/>will be available through the `next` URL present in the `Link` response header.
        /// <br/>
        /// <br/>**[Permissions](https://confluence.atlassian.com/x/_AozKw) required**:
        /// <br/>Permission to access the Confluence site ('Can use' global permission).
        /// <br/>Only labels that the user has permission to view will be returned.
        /// </remarks>
        /// <param name="label_id">Filters on label ID. Multiple IDs can be specified as a comma-separated list.</param>
        /// <param name="prefix">Filters on label prefix. Multiple IDs can be specified as a comma-separated list.</param>
        /// <param name="cursor">Used for pagination, this opaque cursor will be returned in the `next` URL in the `Link` response header. Use the relative URL in the `Link` header to retrieve the `next` set of results.</param>
        /// <param name="sort">Used to sort the result by a particular field.</param>
        /// <param name="limit">Maximum number of labels per result to return. If more results exist, use the `Link` header to retrieve a relative URL that will return the next set of results.</param>
        /// <returns>Returned if the requested labels are returned.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Response25> GetLabelsAsync(System.Collections.Generic.IEnumerable<long> label_id, System.Collections.Generic.IEnumerable<string> prefix, string cursor, string sort, int? limit, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Get attachments for label
        /// </summary>
        /// <remarks>
        /// Returns the attachments of specified label. The number of results is limited by the `limit` parameter and additional results (if available)
        /// <br/>will be available through the `next` URL present in the `Link` response header.
        /// <br/>
        /// <br/>**[Permissions](https://confluence.atlassian.com/x/_AozKw) required**:
        /// <br/>Permission to view the attachment and its corresponding space.
        /// </remarks>
        /// <param name="id">The ID of the label for which attachments should be returned.</param>
        /// <param name="sort">Used to sort the result by a particular field.</param>
        /// <param name="cursor">Used for pagination, this opaque cursor will be returned in the `next` URL in the `Link` response header. Use the relative URL in the `Link` header to retrieve the `next` set of results.</param>
        /// <param name="limit">Maximum number of pages per result to return. If more results exist, use the `Link` header to retrieve a relative URL that will return the next set of results.</param>
        /// <returns>Returned if the requested attachments for specified label were successfully fetched.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Response26> GetLabelAttachmentsAsync(long id, AttachmentSortOrder? sort, string cursor, int? limit);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get attachments for label
        /// </summary>
        /// <remarks>
        /// Returns the attachments of specified label. The number of results is limited by the `limit` parameter and additional results (if available)
        /// <br/>will be available through the `next` URL present in the `Link` response header.
        /// <br/>
        /// <br/>**[Permissions](https://confluence.atlassian.com/x/_AozKw) required**:
        /// <br/>Permission to view the attachment and its corresponding space.
        /// </remarks>
        /// <param name="id">The ID of the label for which attachments should be returned.</param>
        /// <param name="sort">Used to sort the result by a particular field.</param>
        /// <param name="cursor">Used for pagination, this opaque cursor will be returned in the `next` URL in the `Link` response header. Use the relative URL in the `Link` header to retrieve the `next` set of results.</param>
        /// <param name="limit">Maximum number of pages per result to return. If more results exist, use the `Link` header to retrieve a relative URL that will return the next set of results.</param>
        /// <returns>Returned if the requested attachments for specified label were successfully fetched.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Response26> GetLabelAttachmentsAsync(long id, AttachmentSortOrder? sort, string cursor, int? limit, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Get blog posts for label
        /// </summary>
        /// <remarks>
        /// Returns the blogposts of specified label. The number of results is limited by the `limit` parameter and additional results (if available)
        /// <br/>will be available through the `next` URL present in the `Link` response header.
        /// <br/>
        /// <br/>**[Permissions](https://confluence.atlassian.com/x/_AozKw) required**:
        /// <br/>Permission to view the content of the page and its corresponding space.
        /// </remarks>
        /// <param name="id">The ID of the label for which blog posts should be returned.</param>
        /// <param name="space_id">Filter the results based on space ids. Multiple space ids can be specified as a comma-separated list.</param>
        /// <param name="body_format">The content format types to be returned in the `body` field of the response. If available, the representation will be available under a response field of the same name under the `body` field.</param>
        /// <param name="sort">Used to sort the result by a particular field.</param>
        /// <param name="cursor">Used for pagination, this opaque cursor will be returned in the `next` URL in the `Link` response header. Use the relative URL in the `Link` header to retrieve the `next` set of results.</param>
        /// <param name="limit">Maximum number of blog posts per result to return. If more results exist, use the `Link` header to retrieve a relative URL that will return the next set of results.</param>
        /// <returns>Returned if the requested blog posts for specified label were successfully fetched.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Response27> GetLabelBlogPostsAsync(long id, System.Collections.Generic.IEnumerable<long> space_id, PrimaryBodyRepresentation? body_format, BlogPostSortOrder? sort, string cursor, int? limit);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get blog posts for label
        /// </summary>
        /// <remarks>
        /// Returns the blogposts of specified label. The number of results is limited by the `limit` parameter and additional results (if available)
        /// <br/>will be available through the `next` URL present in the `Link` response header.
        /// <br/>
        /// <br/>**[Permissions](https://confluence.atlassian.com/x/_AozKw) required**:
        /// <br/>Permission to view the content of the page and its corresponding space.
        /// </remarks>
        /// <param name="id">The ID of the label for which blog posts should be returned.</param>
        /// <param name="space_id">Filter the results based on space ids. Multiple space ids can be specified as a comma-separated list.</param>
        /// <param name="body_format">The content format types to be returned in the `body` field of the response. If available, the representation will be available under a response field of the same name under the `body` field.</param>
        /// <param name="sort">Used to sort the result by a particular field.</param>
        /// <param name="cursor">Used for pagination, this opaque cursor will be returned in the `next` URL in the `Link` response header. Use the relative URL in the `Link` header to retrieve the `next` set of results.</param>
        /// <param name="limit">Maximum number of blog posts per result to return. If more results exist, use the `Link` header to retrieve a relative URL that will return the next set of results.</param>
        /// <returns>Returned if the requested blog posts for specified label were successfully fetched.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Response27> GetLabelBlogPostsAsync(long id, System.Collections.Generic.IEnumerable<long> space_id, PrimaryBodyRepresentation? body_format, BlogPostSortOrder? sort, string cursor, int? limit, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Get pages for label
        /// </summary>
        /// <remarks>
        /// Returns the pages of specified label. The number of results is limited by the `limit` parameter and additional results (if available)
        /// <br/>will be available through the `next` URL present in the `Link` response header.
        /// <br/>
        /// <br/>**[Permissions](https://confluence.atlassian.com/x/_AozKw) required**:
        /// <br/>Permission to view the content of the page and its corresponding space.
        /// </remarks>
        /// <param name="id">The ID of the label for which pages should be returned.</param>
        /// <param name="space_id">Filter the results based on space ids. Multiple space ids can be specified as a comma-separated list.</param>
        /// <param name="body_format">The content format types to be returned in the `body` field of the response. If available, the representation will be available under a response field of the same name under the `body` field.</param>
        /// <param name="sort">Used to sort the result by a particular field.</param>
        /// <param name="cursor">Used for pagination, this opaque cursor will be returned in the `next` URL in the `Link` response header. Use the relative URL in the `Link` header to retrieve the `next` set of results.</param>
        /// <param name="limit">Maximum number of pages per result to return. If more results exist, use the `Link` header to retrieve a relative URL that will return the next set of results.</param>
        /// <returns>Returned if the requested pages for specified label were successfully fetched.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Response28> GetLabelPagesAsync(long id, System.Collections.Generic.IEnumerable<long> space_id, PrimaryBodyRepresentation? body_format, PageSortOrder? sort, string cursor, int? limit);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get pages for label
        /// </summary>
        /// <remarks>
        /// Returns the pages of specified label. The number of results is limited by the `limit` parameter and additional results (if available)
        /// <br/>will be available through the `next` URL present in the `Link` response header.
        /// <br/>
        /// <br/>**[Permissions](https://confluence.atlassian.com/x/_AozKw) required**:
        /// <br/>Permission to view the content of the page and its corresponding space.
        /// </remarks>
        /// <param name="id">The ID of the label for which pages should be returned.</param>
        /// <param name="space_id">Filter the results based on space ids. Multiple space ids can be specified as a comma-separated list.</param>
        /// <param name="body_format">The content format types to be returned in the `body` field of the response. If available, the representation will be available under a response field of the same name under the `body` field.</param>
        /// <param name="sort">Used to sort the result by a particular field.</param>
        /// <param name="cursor">Used for pagination, this opaque cursor will be returned in the `next` URL in the `Link` response header. Use the relative URL in the `Link` header to retrieve the `next` set of results.</param>
        /// <param name="limit">Maximum number of pages per result to return. If more results exist, use the `Link` header to retrieve a relative URL that will return the next set of results.</param>
        /// <returns>Returned if the requested pages for specified label were successfully fetched.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Response28> GetLabelPagesAsync(long id, System.Collections.Generic.IEnumerable<long> space_id, PrimaryBodyRepresentation? body_format, PageSortOrder? sort, string cursor, int? limit, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Get pages
        /// </summary>
        /// <remarks>
        /// Returns all pages. The number of results is limited by the `limit` parameter and additional results (if available)
        /// <br/>will be available through the `next` URL present in the `Link` response header.
        /// <br/>
        /// <br/>**[Permissions](https://confluence.atlassian.com/x/_AozKw) required**:
        /// <br/>Permission to access the Confluence site ('Can use' global permission).
        /// <br/>Only pages that the user has permission to view will be returned.
        /// </remarks>
        /// <param name="id">Filter the results based on page ids. Multiple page ids can be specified as a comma-separated list.</param>
        /// <param name="space_id">Filter the results based on space ids. Multiple space ids can be specified as a comma-separated list.</param>
        /// <param name="sort">Used to sort the result by a particular field.</param>
        /// <param name="status">Filter the results to pages based on their status. By default, `current` and `archived` are used.</param>
        /// <param name="title">Filter the results to pages based on their title.</param>
        /// <param name="body_format">The content format types to be returned in the `body` field of the response. If available, the representation will be available under a response field of the same name under the `body` field.</param>
        /// <param name="cursor">Used for pagination, this opaque cursor will be returned in the `next` URL in the `Link` response header. Use the relative URL in the `Link` header to retrieve the `next` set of results.</param>
        /// <param name="limit">Maximum number of pages per result to return. If more results exist, use the `Link` header to retrieve a relative URL that will return the next set of results.</param>
        /// <returns>Returned if the requested pages are returned.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Response29> GetPagesAsync(System.Collections.Generic.IEnumerable<long> id, System.Collections.Generic.IEnumerable<long> space_id, PageSortOrder? sort, System.Collections.Generic.IEnumerable<Anonymous6> status, string title, PrimaryBodyRepresentation? body_format, string cursor, int? limit);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get pages
        /// </summary>
        /// <remarks>
        /// Returns all pages. The number of results is limited by the `limit` parameter and additional results (if available)
        /// <br/>will be available through the `next` URL present in the `Link` response header.
        /// <br/>
        /// <br/>**[Permissions](https://confluence.atlassian.com/x/_AozKw) required**:
        /// <br/>Permission to access the Confluence site ('Can use' global permission).
        /// <br/>Only pages that the user has permission to view will be returned.
        /// </remarks>
        /// <param name="id">Filter the results based on page ids. Multiple page ids can be specified as a comma-separated list.</param>
        /// <param name="space_id">Filter the results based on space ids. Multiple space ids can be specified as a comma-separated list.</param>
        /// <param name="sort">Used to sort the result by a particular field.</param>
        /// <param name="status">Filter the results to pages based on their status. By default, `current` and `archived` are used.</param>
        /// <param name="title">Filter the results to pages based on their title.</param>
        /// <param name="body_format">The content format types to be returned in the `body` field of the response. If available, the representation will be available under a response field of the same name under the `body` field.</param>
        /// <param name="cursor">Used for pagination, this opaque cursor will be returned in the `next` URL in the `Link` response header. Use the relative URL in the `Link` header to retrieve the `next` set of results.</param>
        /// <param name="limit">Maximum number of pages per result to return. If more results exist, use the `Link` header to retrieve a relative URL that will return the next set of results.</param>
        /// <returns>Returned if the requested pages are returned.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Response29> GetPagesAsync(System.Collections.Generic.IEnumerable<long> id, System.Collections.Generic.IEnumerable<long> space_id, PageSortOrder? sort, System.Collections.Generic.IEnumerable<Anonymous6> status, string title, PrimaryBodyRepresentation? body_format, string cursor, int? limit, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Create page
        /// </summary>
        /// <remarks>
        /// Creates a page in the space.
        /// <br/>
        /// <br/>Pages are created as published by default unless specified as a draft in the status field. If creating a published page, the title must be specified.
        /// <br/>
        /// <br/>**[Permissions](https://confluence.atlassian.com/x/_AozKw) required**:
        /// <br/>Permission to view the corresponding space. Permission to create a page in the space.
        /// </remarks>
        /// <param name="embedded">Tag the content as embedded and content will be created in NCS.</param>
        /// <param name="private">The page will be private. Only the user who creates this page will have permission to view and edit one.</param>
        /// <param name="root_level">The page will be created at the root level of the space (outside the space homepage tree). If true, then a 
        /// <br/>value may not be supplied for the `parentId` body parameter.</param>
        /// <returns>Returned if the page was successfully created.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Response30> CreatePageAsync(bool? embedded, bool? @private, bool? root_level, object body);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Create page
        /// </summary>
        /// <remarks>
        /// Creates a page in the space.
        /// <br/>
        /// <br/>Pages are created as published by default unless specified as a draft in the status field. If creating a published page, the title must be specified.
        /// <br/>
        /// <br/>**[Permissions](https://confluence.atlassian.com/x/_AozKw) required**:
        /// <br/>Permission to view the corresponding space. Permission to create a page in the space.
        /// </remarks>
        /// <param name="embedded">Tag the content as embedded and content will be created in NCS.</param>
        /// <param name="private">The page will be private. Only the user who creates this page will have permission to view and edit one.</param>
        /// <param name="root_level">The page will be created at the root level of the space (outside the space homepage tree). If true, then a 
        /// <br/>value may not be supplied for the `parentId` body parameter.</param>
        /// <returns>Returned if the page was successfully created.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Response30> CreatePageAsync(bool? embedded, bool? @private, bool? root_level, object body, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Get page by id
        /// </summary>
        /// <remarks>
        /// Returns a specific page.
        /// <br/>
        /// <br/>**[Permissions](https://confluence.atlassian.com/x/_AozKw) required**:
        /// <br/>Permission to view the page and its corresponding space.
        /// </remarks>
        /// <param name="id">The ID of the page to be returned. If you don't know the page ID, use Get pages and filter the results.</param>
        /// <param name="body_format">The content format types to be returned in the `body` field of the response. If available, the representation will be available under a response field of the same name under the `body` field.</param>
        /// <param name="get_draft">Retrieve the draft version of this page.</param>
        /// <param name="status">Filter the page being retrieved by its status.</param>
        /// <param name="version">Allows you to retrieve a previously published version. Specify the previous version's number to retrieve its details.</param>
        /// <param name="include_labels">Includes labels associated with this page in the response.
        /// <br/>The number of results will be limited to 50 and sorted in the default sort order. 
        /// <br/>A `meta` and `_links` property will be present to indicate if more results are available and a link to retrieve the rest of the results.</param>
        /// <param name="include_properties">Includes content properties associated with this page in the response.
        /// <br/>The number of results will be limited to 50 and sorted in the default sort order. 
        /// <br/>A `meta` and `_links` property will be present to indicate if more results are available and a link to retrieve the rest of the results.</param>
        /// <param name="include_operations">Includes operations associated with this page in the response, as defined in the `Operation` object.
        /// <br/>The number of results will be limited to 50 and sorted in the default sort order. 
        /// <br/>A `meta` and `_links` property will be present to indicate if more results are available and a link to retrieve the rest of the results.</param>
        /// <param name="include_likes">Includes likes associated with this page in the response.
        /// <br/>The number of results will be limited to 50 and sorted in the default sort order. 
        /// <br/>A `meta` and `_links` property will be present to indicate if more results are available and a link to retrieve the rest of the results.</param>
        /// <param name="include_versions">Includes versions associated with this page in the response.
        /// <br/>The number of results will be limited to 50 and sorted in the default sort order. 
        /// <br/>A `meta` and `_links` property will be present to indicate if more results are available and a link to retrieve the rest of the results.</param>
        /// <param name="include_version">Includes the current version associated with this page in the response.
        /// <br/>By default this is included and can be omitted by setting the value to `false`.</param>
        /// <param name="include_favorited_by_current_user_status">Includes whether this page has been favorited by the current user.</param>
        /// <param name="include_webresources">Includes web resources that can be used to render page content on a client.</param>
        /// <param name="include_collaborators">Includes collaborators on the page.</param>
        /// <param name="include_direct_children">Includes direct children of the page, as defined in the `ChildrenResponse` object.</param>
        /// <returns>Returned if the requested page is returned.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Response31> GetPageByIdAsync(long id, PrimaryBodyRepresentationSingle? body_format, bool? get_draft, System.Collections.Generic.IEnumerable<Anonymous7> status, int? version, bool? include_labels, bool? include_properties, bool? include_operations, bool? include_likes, bool? include_versions, bool? include_version, bool? include_favorited_by_current_user_status, bool? include_webresources, bool? include_collaborators, bool? include_direct_children);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get page by id
        /// </summary>
        /// <remarks>
        /// Returns a specific page.
        /// <br/>
        /// <br/>**[Permissions](https://confluence.atlassian.com/x/_AozKw) required**:
        /// <br/>Permission to view the page and its corresponding space.
        /// </remarks>
        /// <param name="id">The ID of the page to be returned. If you don't know the page ID, use Get pages and filter the results.</param>
        /// <param name="body_format">The content format types to be returned in the `body` field of the response. If available, the representation will be available under a response field of the same name under the `body` field.</param>
        /// <param name="get_draft">Retrieve the draft version of this page.</param>
        /// <param name="status">Filter the page being retrieved by its status.</param>
        /// <param name="version">Allows you to retrieve a previously published version. Specify the previous version's number to retrieve its details.</param>
        /// <param name="include_labels">Includes labels associated with this page in the response.
        /// <br/>The number of results will be limited to 50 and sorted in the default sort order. 
        /// <br/>A `meta` and `_links` property will be present to indicate if more results are available and a link to retrieve the rest of the results.</param>
        /// <param name="include_properties">Includes content properties associated with this page in the response.
        /// <br/>The number of results will be limited to 50 and sorted in the default sort order. 
        /// <br/>A `meta` and `_links` property will be present to indicate if more results are available and a link to retrieve the rest of the results.</param>
        /// <param name="include_operations">Includes operations associated with this page in the response, as defined in the `Operation` object.
        /// <br/>The number of results will be limited to 50 and sorted in the default sort order. 
        /// <br/>A `meta` and `_links` property will be present to indicate if more results are available and a link to retrieve the rest of the results.</param>
        /// <param name="include_likes">Includes likes associated with this page in the response.
        /// <br/>The number of results will be limited to 50 and sorted in the default sort order. 
        /// <br/>A `meta` and `_links` property will be present to indicate if more results are available and a link to retrieve the rest of the results.</param>
        /// <param name="include_versions">Includes versions associated with this page in the response.
        /// <br/>The number of results will be limited to 50 and sorted in the default sort order. 
        /// <br/>A `meta` and `_links` property will be present to indicate if more results are available and a link to retrieve the rest of the results.</param>
        /// <param name="include_version">Includes the current version associated with this page in the response.
        /// <br/>By default this is included and can be omitted by setting the value to `false`.</param>
        /// <param name="include_favorited_by_current_user_status">Includes whether this page has been favorited by the current user.</param>
        /// <param name="include_webresources">Includes web resources that can be used to render page content on a client.</param>
        /// <param name="include_collaborators">Includes collaborators on the page.</param>
        /// <param name="include_direct_children">Includes direct children of the page, as defined in the `ChildrenResponse` object.</param>
        /// <returns>Returned if the requested page is returned.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Response31> GetPageByIdAsync(long id, PrimaryBodyRepresentationSingle? body_format, bool? get_draft, System.Collections.Generic.IEnumerable<Anonymous7> status, int? version, bool? include_labels, bool? include_properties, bool? include_operations, bool? include_likes, bool? include_versions, bool? include_version, bool? include_favorited_by_current_user_status, bool? include_webresources, bool? include_collaborators, bool? include_direct_children, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Update page
        /// </summary>
        /// <remarks>
        /// Update a page by id.
        /// <br/>
        /// <br/>When the "current" version is updated, the provided body content is considered as the latest version. This latest body content
        /// <br/>will be attempted to be merged into the draft version through a content reconciliation algorithm. If two versions are significantly diverged, 
        /// <br/>the latest provided content may entirely override what was previously in the draft. 
        /// <br/>
        /// <br/>**[Permissions](https://confluence.atlassian.com/x/_AozKw) required**:
        /// <br/>Permission to view the page and its corresponding space. Permission to update pages in the space.
        /// </remarks>
        /// <param name="id">The ID of the page to be updated. If you don't know the page ID, use Get Pages and filter the results.</param>
        /// <returns>Returned if the requested page is successfully updated.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Response32> UpdatePageAsync(long id, object body);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Update page
        /// </summary>
        /// <remarks>
        /// Update a page by id.
        /// <br/>
        /// <br/>When the "current" version is updated, the provided body content is considered as the latest version. This latest body content
        /// <br/>will be attempted to be merged into the draft version through a content reconciliation algorithm. If two versions are significantly diverged, 
        /// <br/>the latest provided content may entirely override what was previously in the draft. 
        /// <br/>
        /// <br/>**[Permissions](https://confluence.atlassian.com/x/_AozKw) required**:
        /// <br/>Permission to view the page and its corresponding space. Permission to update pages in the space.
        /// </remarks>
        /// <param name="id">The ID of the page to be updated. If you don't know the page ID, use Get Pages and filter the results.</param>
        /// <returns>Returned if the requested page is successfully updated.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Response32> UpdatePageAsync(long id, object body, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Delete page
        /// </summary>
        /// <remarks>
        /// Delete a page by id.
        /// <br/>
        /// <br/>By default this will delete pages that are non-drafts. To delete a page that is a draft, the endpoint must be called on a 
        /// <br/>draft with the following param `draft=true`. Discarded drafts are not sent to the trash and are permanently deleted.
        /// <br/>
        /// <br/>Deleting a page moves the page to the trash, where it can be restored later. To permanently delete a page (or "purge" it),
        /// <br/>the endpoint must be called on a **trashed** page with the following param `purge=true`.
        /// <br/>
        /// <br/>**[Permissions](https://confluence.atlassian.com/x/_AozKw) required**:
        /// <br/>Permission to view the page and its corresponding space.
        /// <br/>Permission to delete pages in the space.
        /// <br/>Permission to administer the space (if attempting to purge).
        /// </remarks>
        /// <param name="id">The ID of the page to be deleted.</param>
        /// <param name="purge">If attempting to purge the page.</param>
        /// <param name="draft">If attempting to delete a page that is a draft.</param>
        /// <returns>Returned if the page was successfully deleted.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task DeletePageAsync(long id, bool? purge, bool? draft);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Delete page
        /// </summary>
        /// <remarks>
        /// Delete a page by id.
        /// <br/>
        /// <br/>By default this will delete pages that are non-drafts. To delete a page that is a draft, the endpoint must be called on a 
        /// <br/>draft with the following param `draft=true`. Discarded drafts are not sent to the trash and are permanently deleted.
        /// <br/>
        /// <br/>Deleting a page moves the page to the trash, where it can be restored later. To permanently delete a page (or "purge" it),
        /// <br/>the endpoint must be called on a **trashed** page with the following param `purge=true`.
        /// <br/>
        /// <br/>**[Permissions](https://confluence.atlassian.com/x/_AozKw) required**:
        /// <br/>Permission to view the page and its corresponding space.
        /// <br/>Permission to delete pages in the space.
        /// <br/>Permission to administer the space (if attempting to purge).
        /// </remarks>
        /// <param name="id">The ID of the page to be deleted.</param>
        /// <param name="purge">If attempting to purge the page.</param>
        /// <param name="draft">If attempting to delete a page that is a draft.</param>
        /// <returns>Returned if the page was successfully deleted.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task DeletePageAsync(long id, bool? purge, bool? draft, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Get attachments for page
        /// </summary>
        /// <remarks>
        /// Returns the attachments of specific page. The number of results is limited by the `limit` parameter and additional results (if available)
        /// <br/>will be available through the `next` URL present in the `Link` response header.
        /// <br/>
        /// <br/>**[Permissions](https://confluence.atlassian.com/x/_AozKw) required**:
        /// <br/>Permission to view the content of the page and its corresponding space.
        /// </remarks>
        /// <param name="id">The ID of the page for which attachments should be returned.</param>
        /// <param name="sort">Used to sort the result by a particular field.</param>
        /// <param name="cursor">Used for pagination, this opaque cursor will be returned in the `next` URL in the `Link` response header. Use the relative URL in the `Link` header to retrieve the `next` set of results.</param>
        /// <param name="status">Filter the results to attachments based on their status. By default, `current` and `archived` are used.</param>
        /// <param name="mediaType">Filters on the mediaType of attachments. Only one may be specified.</param>
        /// <param name="filename">Filters on the file-name of attachments. Only one may be specified.</param>
        /// <param name="limit">Maximum number of attachments per result to return. If more results exist, use the `Link` header to retrieve a relative URL that will return the next set of results.</param>
        /// <returns>Returned if the requested attachments are returned.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Response33> GetPageAttachmentsAsync(long id, AttachmentSortOrder? sort, string cursor, System.Collections.Generic.IEnumerable<Anonymous8> status, string mediaType, string filename, int? limit);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get attachments for page
        /// </summary>
        /// <remarks>
        /// Returns the attachments of specific page. The number of results is limited by the `limit` parameter and additional results (if available)
        /// <br/>will be available through the `next` URL present in the `Link` response header.
        /// <br/>
        /// <br/>**[Permissions](https://confluence.atlassian.com/x/_AozKw) required**:
        /// <br/>Permission to view the content of the page and its corresponding space.
        /// </remarks>
        /// <param name="id">The ID of the page for which attachments should be returned.</param>
        /// <param name="sort">Used to sort the result by a particular field.</param>
        /// <param name="cursor">Used for pagination, this opaque cursor will be returned in the `next` URL in the `Link` response header. Use the relative URL in the `Link` header to retrieve the `next` set of results.</param>
        /// <param name="status">Filter the results to attachments based on their status. By default, `current` and `archived` are used.</param>
        /// <param name="mediaType">Filters on the mediaType of attachments. Only one may be specified.</param>
        /// <param name="filename">Filters on the file-name of attachments. Only one may be specified.</param>
        /// <param name="limit">Maximum number of attachments per result to return. If more results exist, use the `Link` header to retrieve a relative URL that will return the next set of results.</param>
        /// <returns>Returned if the requested attachments are returned.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Response33> GetPageAttachmentsAsync(long id, AttachmentSortOrder? sort, string cursor, System.Collections.Generic.IEnumerable<Anonymous8> status, string mediaType, string filename, int? limit, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Get custom content by type in page
        /// </summary>
        /// <remarks>
        /// Returns all custom content for a given type within a given page. The number of results is limited by the `limit` parameter and additional results (if available)
        /// <br/>will be available through the `next` URL present in the `Link` response header.
        /// <br/>
        /// <br/>**[Permissions](https://confluence.atlassian.com/x/_AozKw) required**:
        /// <br/>Permission to view the custom content, the container of the custom content (page), and the corresponding space.
        /// </remarks>
        /// <param name="id">The ID of the page for which custom content should be returned.</param>
        /// <param name="type">The type of custom content being requested. See: https://developer.atlassian.com/cloud/confluence/custom-content/ for additional details on custom content.</param>
        /// <param name="sort">Used to sort the result by a particular field.</param>
        /// <param name="cursor">Used for pagination, this opaque cursor will be returned in the `next` URL in the `Link` response header. Use the relative URL in the `Link` header to retrieve the `next` set of results.</param>
        /// <param name="limit">Maximum number of pages per result to return. If more results exist, use the `Link` header to retrieve a relative URL that will return the next set of results.</param>
        /// <param name="body_format">The content format types to be returned in the `body` field of the response. If available, the representation will be available under a response field of the same name under the `body` field.
        /// <br/>
        /// <br/>Note: If the custom content body type is `storage`, the `storage` and `atlas_doc_format` body formats are able to be returned. If the custom content body type is `raw`, only the `raw` body format is able to be returned.</param>
        /// <returns>Returned if the requested custom content is returned.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Response34> GetCustomContentByTypeInPageAsync(long id, string type, CustomContentSortOrder? sort, string cursor, int? limit, CustomContentBodyRepresentation? body_format);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get custom content by type in page
        /// </summary>
        /// <remarks>
        /// Returns all custom content for a given type within a given page. The number of results is limited by the `limit` parameter and additional results (if available)
        /// <br/>will be available through the `next` URL present in the `Link` response header.
        /// <br/>
        /// <br/>**[Permissions](https://confluence.atlassian.com/x/_AozKw) required**:
        /// <br/>Permission to view the custom content, the container of the custom content (page), and the corresponding space.
        /// </remarks>
        /// <param name="id">The ID of the page for which custom content should be returned.</param>
        /// <param name="type">The type of custom content being requested. See: https://developer.atlassian.com/cloud/confluence/custom-content/ for additional details on custom content.</param>
        /// <param name="sort">Used to sort the result by a particular field.</param>
        /// <param name="cursor">Used for pagination, this opaque cursor will be returned in the `next` URL in the `Link` response header. Use the relative URL in the `Link` header to retrieve the `next` set of results.</param>
        /// <param name="limit">Maximum number of pages per result to return. If more results exist, use the `Link` header to retrieve a relative URL that will return the next set of results.</param>
        /// <param name="body_format">The content format types to be returned in the `body` field of the response. If available, the representation will be available under a response field of the same name under the `body` field.
        /// <br/>
        /// <br/>Note: If the custom content body type is `storage`, the `storage` and `atlas_doc_format` body formats are able to be returned. If the custom content body type is `raw`, only the `raw` body format is able to be returned.</param>
        /// <returns>Returned if the requested custom content is returned.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Response34> GetCustomContentByTypeInPageAsync(long id, string type, CustomContentSortOrder? sort, string cursor, int? limit, CustomContentBodyRepresentation? body_format, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Get labels for page
        /// </summary>
        /// <remarks>
        /// Returns the labels of specific page. The number of results is limited by the `limit` parameter and additional results (if available)
        /// <br/>will be available through the `next` URL present in the `Link` response header.
        /// <br/>
        /// <br/>**[Permissions](https://confluence.atlassian.com/x/_AozKw) required**:
        /// <br/>Permission to view the content of the page and its corresponding space.
        /// <br/>Only labels that the user has permission to view will be returned.
        /// </remarks>
        /// <param name="id">The ID of the page for which labels should be returned.</param>
        /// <param name="prefix">Filter the results to labels based on their prefix.</param>
        /// <param name="sort">Used to sort the result by a particular field.</param>
        /// <param name="cursor">Used for pagination, this opaque cursor will be returned in the `next` URL in the `Link` response header. Use the relative URL in the `Link` header to retrieve the `next` set of results.</param>
        /// <param name="limit">Maximum number of labels per result to return. If more results exist, use the `Link` header to retrieve a relative URL that will return the next set of results.</param>
        /// <returns>Returned if the requested labels are returned.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Response35> GetPageLabelsAsync(long id, Prefix4? prefix, string sort, string cursor, int? limit);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get labels for page
        /// </summary>
        /// <remarks>
        /// Returns the labels of specific page. The number of results is limited by the `limit` parameter and additional results (if available)
        /// <br/>will be available through the `next` URL present in the `Link` response header.
        /// <br/>
        /// <br/>**[Permissions](https://confluence.atlassian.com/x/_AozKw) required**:
        /// <br/>Permission to view the content of the page and its corresponding space.
        /// <br/>Only labels that the user has permission to view will be returned.
        /// </remarks>
        /// <param name="id">The ID of the page for which labels should be returned.</param>
        /// <param name="prefix">Filter the results to labels based on their prefix.</param>
        /// <param name="sort">Used to sort the result by a particular field.</param>
        /// <param name="cursor">Used for pagination, this opaque cursor will be returned in the `next` URL in the `Link` response header. Use the relative URL in the `Link` header to retrieve the `next` set of results.</param>
        /// <param name="limit">Maximum number of labels per result to return. If more results exist, use the `Link` header to retrieve a relative URL that will return the next set of results.</param>
        /// <returns>Returned if the requested labels are returned.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Response35> GetPageLabelsAsync(long id, Prefix4? prefix, string sort, string cursor, int? limit, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Get like count for page
        /// </summary>
        /// <remarks>
        /// Returns the count of likes of specific page.
        /// <br/>
        /// <br/>**[Permissions](https://confluence.atlassian.com/x/_AozKw) required**:
        /// <br/>Permission to view the content of the page and its corresponding space.
        /// </remarks>
        /// <param name="id">The ID of the page for which like count should be returned.</param>
        /// <returns>Returned if the requested count is returned.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Anonymous17> GetPageLikeCountAsync(long id);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get like count for page
        /// </summary>
        /// <remarks>
        /// Returns the count of likes of specific page.
        /// <br/>
        /// <br/>**[Permissions](https://confluence.atlassian.com/x/_AozKw) required**:
        /// <br/>Permission to view the content of the page and its corresponding space.
        /// </remarks>
        /// <param name="id">The ID of the page for which like count should be returned.</param>
        /// <returns>Returned if the requested count is returned.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Anonymous17> GetPageLikeCountAsync(long id, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Get account IDs of likes for page
        /// </summary>
        /// <remarks>
        /// Returns the account IDs of likes of specific page.
        /// <br/>
        /// <br/>**[Permissions](https://confluence.atlassian.com/x/_AozKw) required**:
        /// <br/>Permission to view the content of the page and its corresponding space.
        /// </remarks>
        /// <param name="id">The ID of the page for which like count should be returned.</param>
        /// <param name="cursor">Used for pagination, this opaque cursor will be returned in the `next` URL in the `Link` response header. Use the relative URL in the `Link` header to retrieve the `next` set of results.</param>
        /// <param name="limit">Maximum number of account IDs per result to return. If more results exist, use the `Link` header to retrieve a relative URL that will return the next set of results.</param>
        /// <returns>Returned if the requested account IDs are returned.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Response36> GetPageLikeUsersAsync(long id, string cursor, int? limit);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get account IDs of likes for page
        /// </summary>
        /// <remarks>
        /// Returns the account IDs of likes of specific page.
        /// <br/>
        /// <br/>**[Permissions](https://confluence.atlassian.com/x/_AozKw) required**:
        /// <br/>Permission to view the content of the page and its corresponding space.
        /// </remarks>
        /// <param name="id">The ID of the page for which like count should be returned.</param>
        /// <param name="cursor">Used for pagination, this opaque cursor will be returned in the `next` URL in the `Link` response header. Use the relative URL in the `Link` header to retrieve the `next` set of results.</param>
        /// <param name="limit">Maximum number of account IDs per result to return. If more results exist, use the `Link` header to retrieve a relative URL that will return the next set of results.</param>
        /// <returns>Returned if the requested account IDs are returned.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Response36> GetPageLikeUsersAsync(long id, string cursor, int? limit, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Get permitted operations for page
        /// </summary>
        /// <remarks>
        /// Returns the permitted operations on specific page.
        /// <br/>
        /// <br/>**[Permissions](https://confluence.atlassian.com/x/_AozKw) required**:
        /// <br/>Permission to view the parent content of the page and its corresponding space.
        /// </remarks>
        /// <param name="id">The ID of the page for which operations should be returned.</param>
        /// <returns>Returned if the requested operations are returned.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<PermittedOperationsResponse> GetPageOperationsAsync(long id);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get permitted operations for page
        /// </summary>
        /// <remarks>
        /// Returns the permitted operations on specific page.
        /// <br/>
        /// <br/>**[Permissions](https://confluence.atlassian.com/x/_AozKw) required**:
        /// <br/>Permission to view the parent content of the page and its corresponding space.
        /// </remarks>
        /// <param name="id">The ID of the page for which operations should be returned.</param>
        /// <returns>Returned if the requested operations are returned.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<PermittedOperationsResponse> GetPageOperationsAsync(long id, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Get content properties for page
        /// </summary>
        /// <remarks>
        /// Retrieves Content Properties tied to a specified page.
        /// <br/>
        /// <br/>**[Permissions](https://confluence.atlassian.com/x/_AozKw) required**:
        /// <br/>Permission to view the page.
        /// </remarks>
        /// <param name="page_id">The ID of the page for which content properties should be returned.</param>
        /// <param name="key">Filters the response to return a specific content property with matching key (case sensitive).</param>
        /// <param name="sort">Used to sort the result by a particular field.</param>
        /// <param name="cursor">Used for pagination, this opaque cursor will be returned in the `next` URL in the `Link` response header. Use the relative URL in the `Link` header to retrieve the `next` set of results.</param>
        /// <param name="limit">Maximum number of attachments per result to return. If more results exist, use the `Link` header to retrieve a relative URL that will return the next set of results.</param>
        /// <returns>Returned if the requested content properties are successfully retrieved.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Response37> GetPageContentPropertiesAsync(long page_id, string key, ContentPropertySortOrder? sort, string cursor, int? limit);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get content properties for page
        /// </summary>
        /// <remarks>
        /// Retrieves Content Properties tied to a specified page.
        /// <br/>
        /// <br/>**[Permissions](https://confluence.atlassian.com/x/_AozKw) required**:
        /// <br/>Permission to view the page.
        /// </remarks>
        /// <param name="page_id">The ID of the page for which content properties should be returned.</param>
        /// <param name="key">Filters the response to return a specific content property with matching key (case sensitive).</param>
        /// <param name="sort">Used to sort the result by a particular field.</param>
        /// <param name="cursor">Used for pagination, this opaque cursor will be returned in the `next` URL in the `Link` response header. Use the relative URL in the `Link` header to retrieve the `next` set of results.</param>
        /// <param name="limit">Maximum number of attachments per result to return. If more results exist, use the `Link` header to retrieve a relative URL that will return the next set of results.</param>
        /// <returns>Returned if the requested content properties are successfully retrieved.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Response37> GetPageContentPropertiesAsync(long page_id, string key, ContentPropertySortOrder? sort, string cursor, int? limit, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Create content property for page
        /// </summary>
        /// <remarks>
        /// Creates a new content property for a page.
        /// <br/>
        /// <br/>**[Permissions](https://confluence.atlassian.com/x/_AozKw) required**:
        /// <br/>Permission to update the page.
        /// </remarks>
        /// <param name="page_id">The ID of the page to create a property for.</param>
        /// <param name="body">The content property to be created</param>
        /// <returns>Returned if the content property was created successfully.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<ContentProperty> CreatePagePropertyAsync(long page_id, ContentPropertyCreateRequest body);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Create content property for page
        /// </summary>
        /// <remarks>
        /// Creates a new content property for a page.
        /// <br/>
        /// <br/>**[Permissions](https://confluence.atlassian.com/x/_AozKw) required**:
        /// <br/>Permission to update the page.
        /// </remarks>
        /// <param name="page_id">The ID of the page to create a property for.</param>
        /// <param name="body">The content property to be created</param>
        /// <returns>Returned if the content property was created successfully.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<ContentProperty> CreatePagePropertyAsync(long page_id, ContentPropertyCreateRequest body, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Get content property for page by id
        /// </summary>
        /// <remarks>
        /// Retrieves a specific Content Property by ID that is attached to a specified page.
        /// <br/>
        /// <br/>**[Permissions](https://confluence.atlassian.com/x/_AozKw) required**:
        /// <br/>Permission to view the page.
        /// </remarks>
        /// <param name="page_id">The ID of the page for which content properties should be returned.</param>
        /// <param name="property_id">The ID of the content property being requested.</param>
        /// <returns>Returned if the requested content property is successfully retrieved.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<ContentProperty> GetPageContentPropertiesByIdAsync(long page_id, long property_id);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get content property for page by id
        /// </summary>
        /// <remarks>
        /// Retrieves a specific Content Property by ID that is attached to a specified page.
        /// <br/>
        /// <br/>**[Permissions](https://confluence.atlassian.com/x/_AozKw) required**:
        /// <br/>Permission to view the page.
        /// </remarks>
        /// <param name="page_id">The ID of the page for which content properties should be returned.</param>
        /// <param name="property_id">The ID of the content property being requested.</param>
        /// <returns>Returned if the requested content property is successfully retrieved.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<ContentProperty> GetPageContentPropertiesByIdAsync(long page_id, long property_id, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Update content property for page by id
        /// </summary>
        /// <remarks>
        /// Update a content property for a page by its id. 
        /// <br/>
        /// <br/>**[Permissions](https://confluence.atlassian.com/x/_AozKw) required**:
        /// <br/>Permission to edit the page.
        /// </remarks>
        /// <param name="page_id">The ID of the page the property belongs to.</param>
        /// <param name="property_id">The ID of the property to be updated.</param>
        /// <param name="body">The content property to be updated.</param>
        /// <returns>Returned if the content property was updated successfully.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<ContentProperty> UpdatePagePropertyByIdAsync(long page_id, long property_id, ContentPropertyUpdateRequest body);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Update content property for page by id
        /// </summary>
        /// <remarks>
        /// Update a content property for a page by its id. 
        /// <br/>
        /// <br/>**[Permissions](https://confluence.atlassian.com/x/_AozKw) required**:
        /// <br/>Permission to edit the page.
        /// </remarks>
        /// <param name="page_id">The ID of the page the property belongs to.</param>
        /// <param name="property_id">The ID of the property to be updated.</param>
        /// <param name="body">The content property to be updated.</param>
        /// <returns>Returned if the content property was updated successfully.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<ContentProperty> UpdatePagePropertyByIdAsync(long page_id, long property_id, ContentPropertyUpdateRequest body, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Delete content property for page by id
        /// </summary>
        /// <remarks>
        /// Deletes a content property for a page by its id. 
        /// <br/>
        /// <br/>**[Permissions](https://confluence.atlassian.com/x/_AozKw) required**:
        /// <br/>Permission to edit the page.
        /// </remarks>
        /// <param name="page_id">The ID of the page the property belongs to.</param>
        /// <param name="property_id">The ID of the property to be deleted.</param>
        /// <returns>Returned if the content property was deleted successfully.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task DeletePagePropertyByIdAsync(long page_id, long property_id);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Delete content property for page by id
        /// </summary>
        /// <remarks>
        /// Deletes a content property for a page by its id. 
        /// <br/>
        /// <br/>**[Permissions](https://confluence.atlassian.com/x/_AozKw) required**:
        /// <br/>Permission to edit the page.
        /// </remarks>
        /// <param name="page_id">The ID of the page the property belongs to.</param>
        /// <param name="property_id">The ID of the property to be deleted.</param>
        /// <returns>Returned if the content property was deleted successfully.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task DeletePagePropertyByIdAsync(long page_id, long property_id, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Update page title
        /// </summary>
        /// <remarks>
        /// Updates the title of a specified page.
        /// <br/>
        /// <br/>**[Permissions](https://confluence.atlassian.com/x/_AozKw) required**:
        /// <br/>Permission to view the page and its corresponding space. Permission to update pages in the space.
        /// </remarks>
        /// <param name="id">The ID of the page to be updated. If you don't know the page ID, use Get Pages and filter the results</param>
        /// <returns>Returned if the requested page is successfully updated.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Response38> UpdatePageTitleAsync(long id, object body);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Update page title
        /// </summary>
        /// <remarks>
        /// Updates the title of a specified page.
        /// <br/>
        /// <br/>**[Permissions](https://confluence.atlassian.com/x/_AozKw) required**:
        /// <br/>Permission to view the page and its corresponding space. Permission to update pages in the space.
        /// </remarks>
        /// <param name="id">The ID of the page to be updated. If you don't know the page ID, use Get Pages and filter the results</param>
        /// <returns>Returned if the requested page is successfully updated.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Response38> UpdatePageTitleAsync(long id, object body, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Get page versions
        /// </summary>
        /// <remarks>
        /// Returns the versions of specific page.
        /// <br/>
        /// <br/>**[Permissions](https://confluence.atlassian.com/x/_AozKw) required**:
        /// <br/>Permission to view the page and its corresponding space.
        /// </remarks>
        /// <param name="id">The ID of the page to be queried for its versions. If you don't know the page ID, use Get pages and filter the results.</param>
        /// <param name="body_format">The content format types to be returned in the `body` field of the response. If available, the representation will be available under a response field of the same name under the `body` field.</param>
        /// <param name="cursor">Used for pagination, this opaque cursor will be returned in the `next` URL in the `Link` response header. Use the relative URL in the `Link` header to retrieve the `next` set of results.</param>
        /// <param name="limit">Maximum number of versions per result to return. If more results exist, use the `Link` header to retrieve a relative URL that will return the next set of results.</param>
        /// <param name="sort">Used to sort the result by a particular field.</param>
        /// <returns>Returned if the requested page versions are returned.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Response39> GetPageVersionsAsync(long id, PrimaryBodyRepresentation? body_format, string cursor, int? limit, VersionSortOrder? sort);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get page versions
        /// </summary>
        /// <remarks>
        /// Returns the versions of specific page.
        /// <br/>
        /// <br/>**[Permissions](https://confluence.atlassian.com/x/_AozKw) required**:
        /// <br/>Permission to view the page and its corresponding space.
        /// </remarks>
        /// <param name="id">The ID of the page to be queried for its versions. If you don't know the page ID, use Get pages and filter the results.</param>
        /// <param name="body_format">The content format types to be returned in the `body` field of the response. If available, the representation will be available under a response field of the same name under the `body` field.</param>
        /// <param name="cursor">Used for pagination, this opaque cursor will be returned in the `next` URL in the `Link` response header. Use the relative URL in the `Link` header to retrieve the `next` set of results.</param>
        /// <param name="limit">Maximum number of versions per result to return. If more results exist, use the `Link` header to retrieve a relative URL that will return the next set of results.</param>
        /// <param name="sort">Used to sort the result by a particular field.</param>
        /// <returns>Returned if the requested page versions are returned.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Response39> GetPageVersionsAsync(long id, PrimaryBodyRepresentation? body_format, string cursor, int? limit, VersionSortOrder? sort, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Create whiteboard
        /// </summary>
        /// <remarks>
        /// Creates a whiteboard in the space.
        /// <br/>
        /// <br/>**[Permissions](https://confluence.atlassian.com/x/_AozKw) required**:
        /// <br/>Permission to view the corresponding space. Permission to create a whiteboard in the space.
        /// </remarks>
        /// <param name="private">The whiteboard will be private. Only the user who creates this whiteboard will have permission to view and edit one.</param>
        /// <returns>Returned if the whiteboard was successfully created.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Response40> CreateWhiteboardAsync(bool? @private, object body);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Create whiteboard
        /// </summary>
        /// <remarks>
        /// Creates a whiteboard in the space.
        /// <br/>
        /// <br/>**[Permissions](https://confluence.atlassian.com/x/_AozKw) required**:
        /// <br/>Permission to view the corresponding space. Permission to create a whiteboard in the space.
        /// </remarks>
        /// <param name="private">The whiteboard will be private. Only the user who creates this whiteboard will have permission to view and edit one.</param>
        /// <returns>Returned if the whiteboard was successfully created.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Response40> CreateWhiteboardAsync(bool? @private, object body, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Get whiteboard by id
        /// </summary>
        /// <remarks>
        /// Returns a specific whiteboard.
        /// <br/>
        /// <br/>**[Permissions](https://confluence.atlassian.com/x/_AozKw) required**:
        /// <br/>Permission to view the whiteboard and its corresponding space.
        /// </remarks>
        /// <param name="id">The ID of the whiteboard to be returned</param>
        /// <param name="include_collaborators">Includes collaborators on the whiteboard.</param>
        /// <param name="include_direct_children">Includes direct children of the whiteboard, as defined in the `ChildrenResponse` object.</param>
        /// <param name="include_operations">Includes operations associated with this whiteboard in the response, as defined in the `Operation` object.
        /// <br/>The number of results will be limited to 50 and sorted in the default sort order.
        /// <br/>A `meta` and `_links` property will be present to indicate if more results are available and a link to retrieve the rest of the results.</param>
        /// <param name="include_properties">Includes content properties associated with this whiteboard in the response.
        /// <br/>The number of results will be limited to 50 and sorted in the default sort order.
        /// <br/>A `meta` and `_links` property will be present to indicate if more results are available and a link to retrieve the rest of the results.</param>
        /// <returns>Returned if the requested whiteboard is returned.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Response41> GetWhiteboardByIdAsync(long id, bool? include_collaborators, bool? include_direct_children, bool? include_operations, bool? include_properties);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get whiteboard by id
        /// </summary>
        /// <remarks>
        /// Returns a specific whiteboard.
        /// <br/>
        /// <br/>**[Permissions](https://confluence.atlassian.com/x/_AozKw) required**:
        /// <br/>Permission to view the whiteboard and its corresponding space.
        /// </remarks>
        /// <param name="id">The ID of the whiteboard to be returned</param>
        /// <param name="include_collaborators">Includes collaborators on the whiteboard.</param>
        /// <param name="include_direct_children">Includes direct children of the whiteboard, as defined in the `ChildrenResponse` object.</param>
        /// <param name="include_operations">Includes operations associated with this whiteboard in the response, as defined in the `Operation` object.
        /// <br/>The number of results will be limited to 50 and sorted in the default sort order.
        /// <br/>A `meta` and `_links` property will be present to indicate if more results are available and a link to retrieve the rest of the results.</param>
        /// <param name="include_properties">Includes content properties associated with this whiteboard in the response.
        /// <br/>The number of results will be limited to 50 and sorted in the default sort order.
        /// <br/>A `meta` and `_links` property will be present to indicate if more results are available and a link to retrieve the rest of the results.</param>
        /// <returns>Returned if the requested whiteboard is returned.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Response41> GetWhiteboardByIdAsync(long id, bool? include_collaborators, bool? include_direct_children, bool? include_operations, bool? include_properties, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Delete whiteboard
        /// </summary>
        /// <remarks>
        /// Delete a whiteboard by id.
        /// <br/>
        /// <br/>Deleting a whiteboard moves the whiteboard to the trash, where it can be restored later
        /// <br/>
        /// <br/>**[Permissions](https://confluence.atlassian.com/x/_AozKw) required**:
        /// <br/>Permission to view the whiteboard and its corresponding space.
        /// <br/>Permission to delete whiteboards in the space.
        /// </remarks>
        /// <param name="id">The ID of the whiteboard to be deleted.</param>
        /// <returns>Returned if the whiteboard was successfully deleted.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task DeleteWhiteboardAsync(long id);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Delete whiteboard
        /// </summary>
        /// <remarks>
        /// Delete a whiteboard by id.
        /// <br/>
        /// <br/>Deleting a whiteboard moves the whiteboard to the trash, where it can be restored later
        /// <br/>
        /// <br/>**[Permissions](https://confluence.atlassian.com/x/_AozKw) required**:
        /// <br/>Permission to view the whiteboard and its corresponding space.
        /// <br/>Permission to delete whiteboards in the space.
        /// </remarks>
        /// <param name="id">The ID of the whiteboard to be deleted.</param>
        /// <returns>Returned if the whiteboard was successfully deleted.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task DeleteWhiteboardAsync(long id, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Get content properties for whiteboard
        /// </summary>
        /// <remarks>
        /// Retrieves Content Properties tied to a specified whiteboard.
        /// <br/>
        /// <br/>**[Permissions](https://confluence.atlassian.com/x/_AozKw) required**:
        /// <br/>Permission to view the whiteboard.
        /// </remarks>
        /// <param name="id">The ID of the whiteboard for which content properties should be returned.</param>
        /// <param name="key">Filters the response to return a specific content property with matching key (case sensitive).</param>
        /// <param name="sort">Used to sort the result by a particular field.</param>
        /// <param name="cursor">Used for pagination, this opaque cursor will be returned in the `next` URL in the `Link` response header. Use the relative URL in the `Link` header to retrieve the `next` set of results.</param>
        /// <param name="limit">Maximum number of attachments per result to return. If more results exist, use the `Link` header to retrieve a relative URL that will return the next set of results.</param>
        /// <returns>Returned if the requested content properties are successfully retrieved.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Response42> GetWhiteboardContentPropertiesAsync(long id, string key, ContentPropertySortOrder? sort, string cursor, int? limit);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get content properties for whiteboard
        /// </summary>
        /// <remarks>
        /// Retrieves Content Properties tied to a specified whiteboard.
        /// <br/>
        /// <br/>**[Permissions](https://confluence.atlassian.com/x/_AozKw) required**:
        /// <br/>Permission to view the whiteboard.
        /// </remarks>
        /// <param name="id">The ID of the whiteboard for which content properties should be returned.</param>
        /// <param name="key">Filters the response to return a specific content property with matching key (case sensitive).</param>
        /// <param name="sort">Used to sort the result by a particular field.</param>
        /// <param name="cursor">Used for pagination, this opaque cursor will be returned in the `next` URL in the `Link` response header. Use the relative URL in the `Link` header to retrieve the `next` set of results.</param>
        /// <param name="limit">Maximum number of attachments per result to return. If more results exist, use the `Link` header to retrieve a relative URL that will return the next set of results.</param>
        /// <returns>Returned if the requested content properties are successfully retrieved.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Response42> GetWhiteboardContentPropertiesAsync(long id, string key, ContentPropertySortOrder? sort, string cursor, int? limit, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Create content property for whiteboard
        /// </summary>
        /// <remarks>
        /// Creates a new content property for a whiteboard.
        /// <br/>
        /// <br/>**[Permissions](https://confluence.atlassian.com/x/_AozKw) required**:
        /// <br/>Permission to update the whiteboard.
        /// </remarks>
        /// <param name="id">The ID of the whiteboard to create a property for.</param>
        /// <param name="body">The content property to be created</param>
        /// <returns>Returned if the content property was created successfully.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<ContentProperty> CreateWhiteboardPropertyAsync(long id, ContentPropertyCreateRequest body);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Create content property for whiteboard
        /// </summary>
        /// <remarks>
        /// Creates a new content property for a whiteboard.
        /// <br/>
        /// <br/>**[Permissions](https://confluence.atlassian.com/x/_AozKw) required**:
        /// <br/>Permission to update the whiteboard.
        /// </remarks>
        /// <param name="id">The ID of the whiteboard to create a property for.</param>
        /// <param name="body">The content property to be created</param>
        /// <returns>Returned if the content property was created successfully.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<ContentProperty> CreateWhiteboardPropertyAsync(long id, ContentPropertyCreateRequest body, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Get content property for whiteboard by id
        /// </summary>
        /// <remarks>
        /// Retrieves a specific Content Property by ID that is attached to a specified whiteboard.
        /// <br/>
        /// <br/>**[Permissions](https://confluence.atlassian.com/x/_AozKw) required**:
        /// <br/>Permission to view the whiteboard.
        /// </remarks>
        /// <param name="whiteboard_id">The ID of the whiteboard for which content properties should be returned.</param>
        /// <param name="property_id">The ID of the content property being requested.</param>
        /// <returns>Returned if the requested content property is successfully retrieved.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<ContentProperty> GetWhiteboardContentPropertiesByIdAsync(long whiteboard_id, long property_id);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get content property for whiteboard by id
        /// </summary>
        /// <remarks>
        /// Retrieves a specific Content Property by ID that is attached to a specified whiteboard.
        /// <br/>
        /// <br/>**[Permissions](https://confluence.atlassian.com/x/_AozKw) required**:
        /// <br/>Permission to view the whiteboard.
        /// </remarks>
        /// <param name="whiteboard_id">The ID of the whiteboard for which content properties should be returned.</param>
        /// <param name="property_id">The ID of the content property being requested.</param>
        /// <returns>Returned if the requested content property is successfully retrieved.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<ContentProperty> GetWhiteboardContentPropertiesByIdAsync(long whiteboard_id, long property_id, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Update content property for whiteboard by id
        /// </summary>
        /// <remarks>
        /// Update a content property for a whiteboard by its id. 
        /// <br/>
        /// <br/>**[Permissions](https://confluence.atlassian.com/x/_AozKw) required**:
        /// <br/>Permission to edit the whiteboard.
        /// </remarks>
        /// <param name="whiteboard_id">The ID of the whiteboard the property belongs to.</param>
        /// <param name="property_id">The ID of the property to be updated.</param>
        /// <param name="body">The content property to be updated.</param>
        /// <returns>Returned if the content property was updated successfully.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<ContentProperty> UpdateWhiteboardPropertyByIdAsync(long whiteboard_id, long property_id, ContentPropertyUpdateRequest body);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Update content property for whiteboard by id
        /// </summary>
        /// <remarks>
        /// Update a content property for a whiteboard by its id. 
        /// <br/>
        /// <br/>**[Permissions](https://confluence.atlassian.com/x/_AozKw) required**:
        /// <br/>Permission to edit the whiteboard.
        /// </remarks>
        /// <param name="whiteboard_id">The ID of the whiteboard the property belongs to.</param>
        /// <param name="property_id">The ID of the property to be updated.</param>
        /// <param name="body">The content property to be updated.</param>
        /// <returns>Returned if the content property was updated successfully.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<ContentProperty> UpdateWhiteboardPropertyByIdAsync(long whiteboard_id, long property_id, ContentPropertyUpdateRequest body, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Delete content property for whiteboard by id
        /// </summary>
        /// <remarks>
        /// Deletes a content property for a whiteboard by its id. 
        /// <br/>
        /// <br/>**[Permissions](https://confluence.atlassian.com/x/_AozKw) required**:
        /// <br/>Permission to edit the whiteboard.
        /// </remarks>
        /// <param name="whiteboard_id">The ID of the whiteboard the property belongs to.</param>
        /// <param name="property_id">The ID of the property to be deleted.</param>
        /// <returns>Returned if the content property was deleted successfully.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task DeleteWhiteboardPropertyByIdAsync(long whiteboard_id, long property_id);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Delete content property for whiteboard by id
        /// </summary>
        /// <remarks>
        /// Deletes a content property for a whiteboard by its id. 
        /// <br/>
        /// <br/>**[Permissions](https://confluence.atlassian.com/x/_AozKw) required**:
        /// <br/>Permission to edit the whiteboard.
        /// </remarks>
        /// <param name="whiteboard_id">The ID of the whiteboard the property belongs to.</param>
        /// <param name="property_id">The ID of the property to be deleted.</param>
        /// <returns>Returned if the content property was deleted successfully.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task DeleteWhiteboardPropertyByIdAsync(long whiteboard_id, long property_id, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Get permitted operations for a whiteboard
        /// </summary>
        /// <remarks>
        /// Returns the permitted operations on specific whiteboard.
        /// <br/>
        /// <br/>**[Permissions](https://confluence.atlassian.com/x/_AozKw) required**:
        /// <br/>Permission to view the whiteboard and its corresponding space.
        /// </remarks>
        /// <param name="id">The ID of the whiteboard for which operations should be returned.</param>
        /// <returns>Returned if the requested operations are returned.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<PermittedOperationsResponse> GetWhiteboardOperationsAsync(long id);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get permitted operations for a whiteboard
        /// </summary>
        /// <remarks>
        /// Returns the permitted operations on specific whiteboard.
        /// <br/>
        /// <br/>**[Permissions](https://confluence.atlassian.com/x/_AozKw) required**:
        /// <br/>Permission to view the whiteboard and its corresponding space.
        /// </remarks>
        /// <param name="id">The ID of the whiteboard for which operations should be returned.</param>
        /// <returns>Returned if the requested operations are returned.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<PermittedOperationsResponse> GetWhiteboardOperationsAsync(long id, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Get direct children of a whiteboard
        /// </summary>
        /// <remarks>
        /// Returns all children for given whiteboard id in the content tree. The number of results is limited by the `limit` parameter and additional results (if available)
        /// <br/>will be available through the `next` URL present in the `Link` response header.
        /// <br/>
        /// <br/>The following types of content will be returned:
        /// <br/>- Database
        /// <br/>- Embed
        /// <br/>- Folder
        /// <br/>- Page
        /// <br/>- Whiteboard
        /// <br/>
        /// <br/>This endpoint returns minimal information about each child. To fetch more details, use a related endpoint based on the content type, such
        /// <br/>as:
        /// <br/>
        /// <br/>- [Get database by id](https://developer.atlassian.com/cloud/confluence/rest/v2/api-group-database/#api-databases-id-get)
        /// <br/>- [Get embed by id](https://developer.atlassian.com/cloud/confluence/rest/v2/api-group-smart-link/#api-embeds-id-get)
        /// <br/>- [Get folder by id](https://developer.atlassian.com/cloud/confluence/rest/v2/api-group-folder/#api-folders-id-get)
        /// <br/>- [Get page by id](https://developer.atlassian.com/cloud/confluence/rest/v2/api-group-page/#api-pages-id-get)
        /// <br/>- [Get whiteboard by id](https://developer.atlassian.com/cloud/confluence/rest/v2/api-group-whiteboard/#api-whiteboards-id-get).
        /// <br/>
        /// <br/>**[Permissions](https://confluence.atlassian.com/x/_AozKw) required**:
        /// <br/>Permission to access the Confluence site ('Can use' global permission).
        /// <br/>Only content that the user has permission to view will be returned.
        /// </remarks>
        /// <param name="id">The ID of the parent whiteboard.</param>
        /// <param name="cursor">Used for pagination, this opaque cursor will be returned in the `next` URL in the `Link` response header. Use the relative URL in the `Link` header to retrieve the `next` set of results.</param>
        /// <param name="limit">Maximum number of items per result to return. If more results exist, use the `Link` header to retrieve a relative URL that will return the next set of results.</param>
        /// <param name="sort">Used to sort the result by a particular field.</param>
        /// <returns>Returned if the requested children are returned.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Response43> GetWhiteboardDirectChildrenAsync(long id, string cursor, int? limit, string sort);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get direct children of a whiteboard
        /// </summary>
        /// <remarks>
        /// Returns all children for given whiteboard id in the content tree. The number of results is limited by the `limit` parameter and additional results (if available)
        /// <br/>will be available through the `next` URL present in the `Link` response header.
        /// <br/>
        /// <br/>The following types of content will be returned:
        /// <br/>- Database
        /// <br/>- Embed
        /// <br/>- Folder
        /// <br/>- Page
        /// <br/>- Whiteboard
        /// <br/>
        /// <br/>This endpoint returns minimal information about each child. To fetch more details, use a related endpoint based on the content type, such
        /// <br/>as:
        /// <br/>
        /// <br/>- [Get database by id](https://developer.atlassian.com/cloud/confluence/rest/v2/api-group-database/#api-databases-id-get)
        /// <br/>- [Get embed by id](https://developer.atlassian.com/cloud/confluence/rest/v2/api-group-smart-link/#api-embeds-id-get)
        /// <br/>- [Get folder by id](https://developer.atlassian.com/cloud/confluence/rest/v2/api-group-folder/#api-folders-id-get)
        /// <br/>- [Get page by id](https://developer.atlassian.com/cloud/confluence/rest/v2/api-group-page/#api-pages-id-get)
        /// <br/>- [Get whiteboard by id](https://developer.atlassian.com/cloud/confluence/rest/v2/api-group-whiteboard/#api-whiteboards-id-get).
        /// <br/>
        /// <br/>**[Permissions](https://confluence.atlassian.com/x/_AozKw) required**:
        /// <br/>Permission to access the Confluence site ('Can use' global permission).
        /// <br/>Only content that the user has permission to view will be returned.
        /// </remarks>
        /// <param name="id">The ID of the parent whiteboard.</param>
        /// <param name="cursor">Used for pagination, this opaque cursor will be returned in the `next` URL in the `Link` response header. Use the relative URL in the `Link` header to retrieve the `next` set of results.</param>
        /// <param name="limit">Maximum number of items per result to return. If more results exist, use the `Link` header to retrieve a relative URL that will return the next set of results.</param>
        /// <param name="sort">Used to sort the result by a particular field.</param>
        /// <returns>Returned if the requested children are returned.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Response43> GetWhiteboardDirectChildrenAsync(long id, string cursor, int? limit, string sort, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Get descendants of a whiteboard
        /// </summary>
        /// <remarks>
        /// Returns descendants in the content tree for a given whiteboard by ID in top-to-bottom order (that is, the highest descendant is the first
        /// <br/>item in the response payload). The number of results is limited by the `limit` parameter and additional results (if available)
        /// <br/>will be available by calling this endpoint with the cursor in the response payload. There is also a `depth` parameter specifying depth
        /// <br/>of descendants to be fetched.
        /// <br/>
        /// <br/>The following types of content will be returned:
        /// <br/>- Database
        /// <br/>- Embed
        /// <br/>- Folder
        /// <br/>- Page
        /// <br/>- Whiteboard
        /// <br/>
        /// <br/>This endpoint returns minimal information about each descendant. To fetch more details, use a related endpoint based on the content type, such
        /// <br/>as:
        /// <br/>
        /// <br/>- [Get database by id](https://developer.atlassian.com/cloud/confluence/rest/v2/api-group-database/#api-databases-id-get)
        /// <br/>- [Get embed by id](https://developer.atlassian.com/cloud/confluence/rest/v2/api-group-smart-link/#api-embeds-id-get)
        /// <br/>- [Get folder by id](https://developer.atlassian.com/cloud/confluence/rest/v2/api-group-folder/#api-folders-id-get)
        /// <br/>- [Get page by id](https://developer.atlassian.com/cloud/confluence/rest/v2/api-group-page/#api-pages-id-get)
        /// <br/>- [Get whiteboard by id](https://developer.atlassian.com/cloud/confluence/rest/v2/api-group-whiteboard/#api-whiteboards-id-get).
        /// <br/>
        /// <br/>**[Permissions](https://confluence.atlassian.com/x/_AozKw) required**:
        /// <br/>Permission to access the Confluence site ('Can use' global permission).
        /// <br/>Permission to view the whiteboard and its corresponding space
        /// </remarks>
        /// <param name="id">The ID of the whiteboard.</param>
        /// <param name="limit">Maximum number of items per result to return. If more results exist, call the endpoint with the cursor to fetch the next set of results.</param>
        /// <param name="depth">Maximum depth of descendants to return. If more results are required, use the endpoint corresponding to the content type of the deepest descendant to fetch more descendants.</param>
        /// <param name="cursor">Used for pagination, this opaque cursor will be returned in the `next` URL in the `Link` response header. Use the relative URL in the `Link` header to retrieve the `next` set of results.</param>
        /// <returns>Returned if the requested descendants are returned.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Response44> GetWhiteboardDescendantsAsync(long id, int? limit, int? depth, string cursor);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get descendants of a whiteboard
        /// </summary>
        /// <remarks>
        /// Returns descendants in the content tree for a given whiteboard by ID in top-to-bottom order (that is, the highest descendant is the first
        /// <br/>item in the response payload). The number of results is limited by the `limit` parameter and additional results (if available)
        /// <br/>will be available by calling this endpoint with the cursor in the response payload. There is also a `depth` parameter specifying depth
        /// <br/>of descendants to be fetched.
        /// <br/>
        /// <br/>The following types of content will be returned:
        /// <br/>- Database
        /// <br/>- Embed
        /// <br/>- Folder
        /// <br/>- Page
        /// <br/>- Whiteboard
        /// <br/>
        /// <br/>This endpoint returns minimal information about each descendant. To fetch more details, use a related endpoint based on the content type, such
        /// <br/>as:
        /// <br/>
        /// <br/>- [Get database by id](https://developer.atlassian.com/cloud/confluence/rest/v2/api-group-database/#api-databases-id-get)
        /// <br/>- [Get embed by id](https://developer.atlassian.com/cloud/confluence/rest/v2/api-group-smart-link/#api-embeds-id-get)
        /// <br/>- [Get folder by id](https://developer.atlassian.com/cloud/confluence/rest/v2/api-group-folder/#api-folders-id-get)
        /// <br/>- [Get page by id](https://developer.atlassian.com/cloud/confluence/rest/v2/api-group-page/#api-pages-id-get)
        /// <br/>- [Get whiteboard by id](https://developer.atlassian.com/cloud/confluence/rest/v2/api-group-whiteboard/#api-whiteboards-id-get).
        /// <br/>
        /// <br/>**[Permissions](https://confluence.atlassian.com/x/_AozKw) required**:
        /// <br/>Permission to access the Confluence site ('Can use' global permission).
        /// <br/>Permission to view the whiteboard and its corresponding space
        /// </remarks>
        /// <param name="id">The ID of the whiteboard.</param>
        /// <param name="limit">Maximum number of items per result to return. If more results exist, call the endpoint with the cursor to fetch the next set of results.</param>
        /// <param name="depth">Maximum depth of descendants to return. If more results are required, use the endpoint corresponding to the content type of the deepest descendant to fetch more descendants.</param>
        /// <param name="cursor">Used for pagination, this opaque cursor will be returned in the `next` URL in the `Link` response header. Use the relative URL in the `Link` header to retrieve the `next` set of results.</param>
        /// <returns>Returned if the requested descendants are returned.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Response44> GetWhiteboardDescendantsAsync(long id, int? limit, int? depth, string cursor, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Get all ancestors of whiteboard
        /// </summary>
        /// <remarks>
        /// Returns all ancestors for a given whiteboard by ID in top-to-bottom order (that is, the highest ancestor is the first
        /// <br/>item in the response payload). The number of results is limited by the `limit` parameter and additional results (if available)
        /// <br/>will be available by calling this endpoint with the ID of first ancestor in the response payload.
        /// <br/>
        /// <br/>This endpoint returns minimal information about each ancestor. To fetch more details, use a related endpoint, such
        /// <br/>as [Get whiteboard by id](https://developer.atlassian.com/cloud/confluence/rest/v2/api-group-whiteboard/#api-whiteboards-id-get).
        /// <br/>
        /// <br/>**[Permissions](https://confluence.atlassian.com/x/_AozKw) required**:
        /// <br/>Permission to access the Confluence site ('Can use' global permission).
        /// <br/>Permission to view the whiteboard and its corresponding space
        /// </remarks>
        /// <param name="id">The ID of the whiteboard.</param>
        /// <param name="limit">Maximum number of items per result to return. If more results exist, call the endpoint with the highest ancestor's ID to fetch the next set of results.</param>
        /// <returns>Returned if the requested ancestors are returned.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Response45> GetWhiteboardAncestorsAsync(long id, int? limit);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get all ancestors of whiteboard
        /// </summary>
        /// <remarks>
        /// Returns all ancestors for a given whiteboard by ID in top-to-bottom order (that is, the highest ancestor is the first
        /// <br/>item in the response payload). The number of results is limited by the `limit` parameter and additional results (if available)
        /// <br/>will be available by calling this endpoint with the ID of first ancestor in the response payload.
        /// <br/>
        /// <br/>This endpoint returns minimal information about each ancestor. To fetch more details, use a related endpoint, such
        /// <br/>as [Get whiteboard by id](https://developer.atlassian.com/cloud/confluence/rest/v2/api-group-whiteboard/#api-whiteboards-id-get).
        /// <br/>
        /// <br/>**[Permissions](https://confluence.atlassian.com/x/_AozKw) required**:
        /// <br/>Permission to access the Confluence site ('Can use' global permission).
        /// <br/>Permission to view the whiteboard and its corresponding space
        /// </remarks>
        /// <param name="id">The ID of the whiteboard.</param>
        /// <param name="limit">Maximum number of items per result to return. If more results exist, call the endpoint with the highest ancestor's ID to fetch the next set of results.</param>
        /// <returns>Returned if the requested ancestors are returned.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Response45> GetWhiteboardAncestorsAsync(long id, int? limit, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Create database
        /// </summary>
        /// <remarks>
        /// Creates a database in the space.
        /// <br/>
        /// <br/>**[Permissions](https://confluence.atlassian.com/x/_AozKw) required**:
        /// <br/>Permission to view the corresponding space. Permission to create a database in the space.
        /// </remarks>
        /// <param name="private">The database will be private. Only the user who creates this database will have permission to view and edit one.</param>
        /// <returns>Returned if the database was successfully created.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Response46> CreateDatabaseAsync(bool? @private, object body);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Create database
        /// </summary>
        /// <remarks>
        /// Creates a database in the space.
        /// <br/>
        /// <br/>**[Permissions](https://confluence.atlassian.com/x/_AozKw) required**:
        /// <br/>Permission to view the corresponding space. Permission to create a database in the space.
        /// </remarks>
        /// <param name="private">The database will be private. Only the user who creates this database will have permission to view and edit one.</param>
        /// <returns>Returned if the database was successfully created.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Response46> CreateDatabaseAsync(bool? @private, object body, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Get database by id
        /// </summary>
        /// <remarks>
        /// Returns a specific database.
        /// <br/>
        /// <br/>**[Permissions](https://confluence.atlassian.com/x/_AozKw) required**:
        /// <br/>Permission to view the database and its corresponding space.
        /// </remarks>
        /// <param name="id">The ID of the database to be returned</param>
        /// <param name="include_collaborators">Includes collaborators on the database.</param>
        /// <param name="include_direct_children">Includes direct children of the database, as defined in the `ChildrenResponse` object.</param>
        /// <param name="include_operations">Includes operations associated with this database in the response, as defined in the `Operation` object.
        /// <br/>The number of results will be limited to 50 and sorted in the default sort order.
        /// <br/>A `meta` and `_links` property will be present to indicate if more results are available and a link to retrieve the rest of the results.</param>
        /// <param name="include_properties">Includes content properties associated with this database in the response.
        /// <br/>The number of results will be limited to 50 and sorted in the default sort order.
        /// <br/>A `meta` and `_links` property will be present to indicate if more results are available and a link to retrieve the rest of the results.</param>
        /// <returns>Returned if the requested database is returned.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Response47> GetDatabaseByIdAsync(long id, bool? include_collaborators, bool? include_direct_children, bool? include_operations, bool? include_properties);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get database by id
        /// </summary>
        /// <remarks>
        /// Returns a specific database.
        /// <br/>
        /// <br/>**[Permissions](https://confluence.atlassian.com/x/_AozKw) required**:
        /// <br/>Permission to view the database and its corresponding space.
        /// </remarks>
        /// <param name="id">The ID of the database to be returned</param>
        /// <param name="include_collaborators">Includes collaborators on the database.</param>
        /// <param name="include_direct_children">Includes direct children of the database, as defined in the `ChildrenResponse` object.</param>
        /// <param name="include_operations">Includes operations associated with this database in the response, as defined in the `Operation` object.
        /// <br/>The number of results will be limited to 50 and sorted in the default sort order.
        /// <br/>A `meta` and `_links` property will be present to indicate if more results are available and a link to retrieve the rest of the results.</param>
        /// <param name="include_properties">Includes content properties associated with this database in the response.
        /// <br/>The number of results will be limited to 50 and sorted in the default sort order.
        /// <br/>A `meta` and `_links` property will be present to indicate if more results are available and a link to retrieve the rest of the results.</param>
        /// <returns>Returned if the requested database is returned.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Response47> GetDatabaseByIdAsync(long id, bool? include_collaborators, bool? include_direct_children, bool? include_operations, bool? include_properties, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Delete database
        /// </summary>
        /// <remarks>
        /// Delete a database by id.
        /// <br/>
        /// <br/>Deleting a database moves the database to the trash, where it can be restored later
        /// <br/>
        /// <br/>**[Permissions](https://confluence.atlassian.com/x/_AozKw) required**:
        /// <br/>Permission to view the database and its corresponding space.
        /// <br/>Permission to delete databases in the space.
        /// </remarks>
        /// <param name="id">The ID of the database to be deleted.</param>
        /// <returns>Returned if the database was successfully deleted.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task DeleteDatabaseAsync(long id);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Delete database
        /// </summary>
        /// <remarks>
        /// Delete a database by id.
        /// <br/>
        /// <br/>Deleting a database moves the database to the trash, where it can be restored later
        /// <br/>
        /// <br/>**[Permissions](https://confluence.atlassian.com/x/_AozKw) required**:
        /// <br/>Permission to view the database and its corresponding space.
        /// <br/>Permission to delete databases in the space.
        /// </remarks>
        /// <param name="id">The ID of the database to be deleted.</param>
        /// <returns>Returned if the database was successfully deleted.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task DeleteDatabaseAsync(long id, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Get content properties for database
        /// </summary>
        /// <remarks>
        /// Retrieves Content Properties tied to a specified database.
        /// <br/>
        /// <br/>**[Permissions](https://confluence.atlassian.com/x/_AozKw) required**:
        /// <br/>Permission to view the database.
        /// </remarks>
        /// <param name="id">The ID of the database for which content properties should be returned.</param>
        /// <param name="key">Filters the response to return a specific content property with matching key (case sensitive).</param>
        /// <param name="sort">Used to sort the result by a particular field.</param>
        /// <param name="cursor">Used for pagination, this opaque cursor will be returned in the `next` URL in the `Link` response header. Use the relative URL in the `Link` header to retrieve the `next` set of results.</param>
        /// <param name="limit">Maximum number of attachments per result to return. If more results exist, use the `Link` header to retrieve a relative URL that will return the next set of results.</param>
        /// <returns>Returned if the requested content properties are successfully retrieved.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Response48> GetDatabaseContentPropertiesAsync(long id, string key, ContentPropertySortOrder? sort, string cursor, int? limit);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get content properties for database
        /// </summary>
        /// <remarks>
        /// Retrieves Content Properties tied to a specified database.
        /// <br/>
        /// <br/>**[Permissions](https://confluence.atlassian.com/x/_AozKw) required**:
        /// <br/>Permission to view the database.
        /// </remarks>
        /// <param name="id">The ID of the database for which content properties should be returned.</param>
        /// <param name="key">Filters the response to return a specific content property with matching key (case sensitive).</param>
        /// <param name="sort">Used to sort the result by a particular field.</param>
        /// <param name="cursor">Used for pagination, this opaque cursor will be returned in the `next` URL in the `Link` response header. Use the relative URL in the `Link` header to retrieve the `next` set of results.</param>
        /// <param name="limit">Maximum number of attachments per result to return. If more results exist, use the `Link` header to retrieve a relative URL that will return the next set of results.</param>
        /// <returns>Returned if the requested content properties are successfully retrieved.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Response48> GetDatabaseContentPropertiesAsync(long id, string key, ContentPropertySortOrder? sort, string cursor, int? limit, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Create content property for database
        /// </summary>
        /// <remarks>
        /// Creates a new content property for a database.
        /// <br/>
        /// <br/>**[Permissions](https://confluence.atlassian.com/x/_AozKw) required**:
        /// <br/>Permission to update the database.
        /// </remarks>
        /// <param name="id">The ID of the database to create a property for.</param>
        /// <param name="body">The content property to be created</param>
        /// <returns>Returned if the content property was created successfully.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<ContentProperty> CreateDatabasePropertyAsync(long id, ContentPropertyCreateRequest body);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Create content property for database
        /// </summary>
        /// <remarks>
        /// Creates a new content property for a database.
        /// <br/>
        /// <br/>**[Permissions](https://confluence.atlassian.com/x/_AozKw) required**:
        /// <br/>Permission to update the database.
        /// </remarks>
        /// <param name="id">The ID of the database to create a property for.</param>
        /// <param name="body">The content property to be created</param>
        /// <returns>Returned if the content property was created successfully.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<ContentProperty> CreateDatabasePropertyAsync(long id, ContentPropertyCreateRequest body, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Get content property for database by id
        /// </summary>
        /// <remarks>
        /// Retrieves a specific Content Property by ID that is attached to a specified database.
        /// <br/>
        /// <br/>**[Permissions](https://confluence.atlassian.com/x/_AozKw) required**:
        /// <br/>Permission to view the database.
        /// </remarks>
        /// <param name="database_id">The ID of the database for which content properties should be returned.</param>
        /// <param name="property_id">The ID of the content property being requested.</param>
        /// <returns>Returned if the requested content property is successfully retrieved.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<ContentProperty> GetDatabaseContentPropertiesByIdAsync(long database_id, long property_id);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get content property for database by id
        /// </summary>
        /// <remarks>
        /// Retrieves a specific Content Property by ID that is attached to a specified database.
        /// <br/>
        /// <br/>**[Permissions](https://confluence.atlassian.com/x/_AozKw) required**:
        /// <br/>Permission to view the database.
        /// </remarks>
        /// <param name="database_id">The ID of the database for which content properties should be returned.</param>
        /// <param name="property_id">The ID of the content property being requested.</param>
        /// <returns>Returned if the requested content property is successfully retrieved.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<ContentProperty> GetDatabaseContentPropertiesByIdAsync(long database_id, long property_id, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Update content property for database by id
        /// </summary>
        /// <remarks>
        /// Update a content property for a database by its id. 
        /// <br/>
        /// <br/>**[Permissions](https://confluence.atlassian.com/x/_AozKw) required**:
        /// <br/>Permission to edit the database.
        /// </remarks>
        /// <param name="database_id">The ID of the database the property belongs to.</param>
        /// <param name="property_id">The ID of the property to be updated.</param>
        /// <param name="body">The content property to be updated.</param>
        /// <returns>Returned if the content property was updated successfully.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<ContentProperty> UpdateDatabasePropertyByIdAsync(long database_id, long property_id, ContentPropertyUpdateRequest body);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Update content property for database by id
        /// </summary>
        /// <remarks>
        /// Update a content property for a database by its id. 
        /// <br/>
        /// <br/>**[Permissions](https://confluence.atlassian.com/x/_AozKw) required**:
        /// <br/>Permission to edit the database.
        /// </remarks>
        /// <param name="database_id">The ID of the database the property belongs to.</param>
        /// <param name="property_id">The ID of the property to be updated.</param>
        /// <param name="body">The content property to be updated.</param>
        /// <returns>Returned if the content property was updated successfully.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<ContentProperty> UpdateDatabasePropertyByIdAsync(long database_id, long property_id, ContentPropertyUpdateRequest body, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Delete content property for database by id
        /// </summary>
        /// <remarks>
        /// Deletes a content property for a database by its id. 
        /// <br/>
        /// <br/>**[Permissions](https://confluence.atlassian.com/x/_AozKw) required**:
        /// <br/>Permission to edit the database.
        /// </remarks>
        /// <param name="database_id">The ID of the database the property belongs to.</param>
        /// <param name="property_id">The ID of the property to be deleted.</param>
        /// <returns>Returned if the content property was deleted successfully.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task DeleteDatabasePropertyByIdAsync(long database_id, long property_id);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Delete content property for database by id
        /// </summary>
        /// <remarks>
        /// Deletes a content property for a database by its id. 
        /// <br/>
        /// <br/>**[Permissions](https://confluence.atlassian.com/x/_AozKw) required**:
        /// <br/>Permission to edit the database.
        /// </remarks>
        /// <param name="database_id">The ID of the database the property belongs to.</param>
        /// <param name="property_id">The ID of the property to be deleted.</param>
        /// <returns>Returned if the content property was deleted successfully.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task DeleteDatabasePropertyByIdAsync(long database_id, long property_id, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Get permitted operations for a database
        /// </summary>
        /// <remarks>
        /// Returns the permitted operations on specific database.
        /// <br/>
        /// <br/>**[Permissions](https://confluence.atlassian.com/x/_AozKw) required**:
        /// <br/>Permission to view the database and its corresponding space.
        /// </remarks>
        /// <param name="id">The ID of the database for which operations should be returned.</param>
        /// <returns>Returned if the requested operations are returned.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<PermittedOperationsResponse> GetDatabaseOperationsAsync(long id);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get permitted operations for a database
        /// </summary>
        /// <remarks>
        /// Returns the permitted operations on specific database.
        /// <br/>
        /// <br/>**[Permissions](https://confluence.atlassian.com/x/_AozKw) required**:
        /// <br/>Permission to view the database and its corresponding space.
        /// </remarks>
        /// <param name="id">The ID of the database for which operations should be returned.</param>
        /// <returns>Returned if the requested operations are returned.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<PermittedOperationsResponse> GetDatabaseOperationsAsync(long id, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Get direct children of a database
        /// </summary>
        /// <remarks>
        /// Returns all children for given database id in the content tree. The number of results is limited by the `limit` parameter and additional results (if available)
        /// <br/>will be available through the `next` URL present in the `Link` response header.
        /// <br/>
        /// <br/>The following types of content will be returned:
        /// <br/>- Database
        /// <br/>- Embed
        /// <br/>- Folder
        /// <br/>- Page
        /// <br/>- Whiteboard
        /// <br/>
        /// <br/>This endpoint returns minimal information about each child. To fetch more details, use a related endpoint based on the content type, such
        /// <br/>as:
        /// <br/>
        /// <br/>- [Get database by id](https://developer.atlassian.com/cloud/confluence/rest/v2/api-group-database/#api-databases-id-get)
        /// <br/>- [Get embed by id](https://developer.atlassian.com/cloud/confluence/rest/v2/api-group-smart-link/#api-embeds-id-get)
        /// <br/>- [Get folder by id](https://developer.atlassian.com/cloud/confluence/rest/v2/api-group-folder/#api-folders-id-get)
        /// <br/>- [Get page by id](https://developer.atlassian.com/cloud/confluence/rest/v2/api-group-page/#api-pages-id-get)
        /// <br/>- [Get whiteboard by id](https://developer.atlassian.com/cloud/confluence/rest/v2/api-group-whiteboard/#api-whiteboards-id-get).
        /// <br/>
        /// <br/>**[Permissions](https://confluence.atlassian.com/x/_AozKw) required**:
        /// <br/>Permission to access the Confluence site ('Can use' global permission).
        /// <br/>Only content that the user has permission to view will be returned.
        /// </remarks>
        /// <param name="id">The ID of the parent database.</param>
        /// <param name="cursor">Used for pagination, this opaque cursor will be returned in the `next` URL in the `Link` response header. Use the relative URL in the `Link` header to retrieve the `next` set of results.</param>
        /// <param name="limit">Maximum number of items per result to return. If more results exist, use the `Link` header to retrieve a relative URL that will return the next set of results.</param>
        /// <param name="sort">Used to sort the result by a particular field.</param>
        /// <returns>Returned if the requested children are returned.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Response49> GetDatabaseDirectChildrenAsync(long id, string cursor, int? limit, string sort);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get direct children of a database
        /// </summary>
        /// <remarks>
        /// Returns all children for given database id in the content tree. The number of results is limited by the `limit` parameter and additional results (if available)
        /// <br/>will be available through the `next` URL present in the `Link` response header.
        /// <br/>
        /// <br/>The following types of content will be returned:
        /// <br/>- Database
        /// <br/>- Embed
        /// <br/>- Folder
        /// <br/>- Page
        /// <br/>- Whiteboard
        /// <br/>
        /// <br/>This endpoint returns minimal information about each child. To fetch more details, use a related endpoint based on the content type, such
        /// <br/>as:
        /// <br/>
        /// <br/>- [Get database by id](https://developer.atlassian.com/cloud/confluence/rest/v2/api-group-database/#api-databases-id-get)
        /// <br/>- [Get embed by id](https://developer.atlassian.com/cloud/confluence/rest/v2/api-group-smart-link/#api-embeds-id-get)
        /// <br/>- [Get folder by id](https://developer.atlassian.com/cloud/confluence/rest/v2/api-group-folder/#api-folders-id-get)
        /// <br/>- [Get page by id](https://developer.atlassian.com/cloud/confluence/rest/v2/api-group-page/#api-pages-id-get)
        /// <br/>- [Get whiteboard by id](https://developer.atlassian.com/cloud/confluence/rest/v2/api-group-whiteboard/#api-whiteboards-id-get).
        /// <br/>
        /// <br/>**[Permissions](https://confluence.atlassian.com/x/_AozKw) required**:
        /// <br/>Permission to access the Confluence site ('Can use' global permission).
        /// <br/>Only content that the user has permission to view will be returned.
        /// </remarks>
        /// <param name="id">The ID of the parent database.</param>
        /// <param name="cursor">Used for pagination, this opaque cursor will be returned in the `next` URL in the `Link` response header. Use the relative URL in the `Link` header to retrieve the `next` set of results.</param>
        /// <param name="limit">Maximum number of items per result to return. If more results exist, use the `Link` header to retrieve a relative URL that will return the next set of results.</param>
        /// <param name="sort">Used to sort the result by a particular field.</param>
        /// <returns>Returned if the requested children are returned.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Response49> GetDatabaseDirectChildrenAsync(long id, string cursor, int? limit, string sort, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Get descendants of a database
        /// </summary>
        /// <remarks>
        /// Returns descendants in the content tree for a given database by ID in top-to-bottom order (that is, the highest descendant is the first
        /// <br/>item in the response payload). The number of results is limited by the `limit` parameter and additional results (if available)
        /// <br/>will be available by calling this endpoint with the cursor in the response payload. There is also a `depth` parameter specifying depth
        /// <br/>of descendants to be fetched.
        /// <br/>
        /// <br/>The following types of content will be returned:
        /// <br/>- Database
        /// <br/>- Embed
        /// <br/>- Folder
        /// <br/>- Page
        /// <br/>- Whiteboard
        /// <br/>
        /// <br/>This endpoint returns minimal information about each descendant. To fetch more details, use a related endpoint based on the content type, such
        /// <br/>as:
        /// <br/>
        /// <br/>- [Get database by id](https://developer.atlassian.com/cloud/confluence/rest/v2/api-group-database/#api-databases-id-get)
        /// <br/>- [Get embed by id](https://developer.atlassian.com/cloud/confluence/rest/v2/api-group-smart-link/#api-embeds-id-get)
        /// <br/>- [Get folder by id](https://developer.atlassian.com/cloud/confluence/rest/v2/api-group-folder/#api-folders-id-get)
        /// <br/>- [Get page by id](https://developer.atlassian.com/cloud/confluence/rest/v2/api-group-page/#api-pages-id-get)
        /// <br/>- [Get whiteboard by id](https://developer.atlassian.com/cloud/confluence/rest/v2/api-group-whiteboard/#api-whiteboards-id-get).
        /// <br/>
        /// <br/>**[Permissions](https://confluence.atlassian.com/x/_AozKw) required**:
        /// <br/>Permission to access the Confluence site ('Can use' global permission).
        /// <br/>Permission to view the database and its corresponding space
        /// </remarks>
        /// <param name="id">The ID of the database.</param>
        /// <param name="limit">Maximum number of items per result to return. If more results exist, call the endpoint with the cursor to fetch the next set of results.</param>
        /// <param name="depth">Maximum depth of descendants to return. If more results are required, use the endpoint corresponding to the content type of the deepest descendant to fetch more descendants.</param>
        /// <param name="cursor">Used for pagination, this opaque cursor will be returned in the `next` URL in the `Link` response header. Use the relative URL in the `Link` header to retrieve the `next` set of results.</param>
        /// <returns>Returned if the requested descendants are returned.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Response50> GetDatabaseDescendantsAsync(long id, int? limit, int? depth, string cursor);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get descendants of a database
        /// </summary>
        /// <remarks>
        /// Returns descendants in the content tree for a given database by ID in top-to-bottom order (that is, the highest descendant is the first
        /// <br/>item in the response payload). The number of results is limited by the `limit` parameter and additional results (if available)
        /// <br/>will be available by calling this endpoint with the cursor in the response payload. There is also a `depth` parameter specifying depth
        /// <br/>of descendants to be fetched.
        /// <br/>
        /// <br/>The following types of content will be returned:
        /// <br/>- Database
        /// <br/>- Embed
        /// <br/>- Folder
        /// <br/>- Page
        /// <br/>- Whiteboard
        /// <br/>
        /// <br/>This endpoint returns minimal information about each descendant. To fetch more details, use a related endpoint based on the content type, such
        /// <br/>as:
        /// <br/>
        /// <br/>- [Get database by id](https://developer.atlassian.com/cloud/confluence/rest/v2/api-group-database/#api-databases-id-get)
        /// <br/>- [Get embed by id](https://developer.atlassian.com/cloud/confluence/rest/v2/api-group-smart-link/#api-embeds-id-get)
        /// <br/>- [Get folder by id](https://developer.atlassian.com/cloud/confluence/rest/v2/api-group-folder/#api-folders-id-get)
        /// <br/>- [Get page by id](https://developer.atlassian.com/cloud/confluence/rest/v2/api-group-page/#api-pages-id-get)
        /// <br/>- [Get whiteboard by id](https://developer.atlassian.com/cloud/confluence/rest/v2/api-group-whiteboard/#api-whiteboards-id-get).
        /// <br/>
        /// <br/>**[Permissions](https://confluence.atlassian.com/x/_AozKw) required**:
        /// <br/>Permission to access the Confluence site ('Can use' global permission).
        /// <br/>Permission to view the database and its corresponding space
        /// </remarks>
        /// <param name="id">The ID of the database.</param>
        /// <param name="limit">Maximum number of items per result to return. If more results exist, call the endpoint with the cursor to fetch the next set of results.</param>
        /// <param name="depth">Maximum depth of descendants to return. If more results are required, use the endpoint corresponding to the content type of the deepest descendant to fetch more descendants.</param>
        /// <param name="cursor">Used for pagination, this opaque cursor will be returned in the `next` URL in the `Link` response header. Use the relative URL in the `Link` header to retrieve the `next` set of results.</param>
        /// <returns>Returned if the requested descendants are returned.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Response50> GetDatabaseDescendantsAsync(long id, int? limit, int? depth, string cursor, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Get all ancestors of database
        /// </summary>
        /// <remarks>
        /// Returns all ancestors for a given database by ID in top-to-bottom order (that is, the highest ancestor is the first
        /// <br/>item in the response payload). The number of results is limited by the `limit` parameter and additional results (if available)
        /// <br/>will be available by calling this endpoint with the ID of first ancestor in the response payload.
        /// <br/>
        /// <br/>This endpoint returns minimal information about each ancestor. To fetch more details, use a related endpoint, such
        /// <br/>as [Get database by id](https://developer.atlassian.com/cloud/confluence/rest/v2/api-group-database/#api-databases-id-get).
        /// <br/>
        /// <br/>**[Permissions](https://confluence.atlassian.com/x/_AozKw) required**:
        /// <br/>Permission to access the Confluence site ('Can use' global permission).
        /// <br/>Permission to view the database and its corresponding space
        /// </remarks>
        /// <param name="id">The ID of the database.</param>
        /// <param name="limit">Maximum number of items per result to return. If more results exist, call the endpoint with the highest ancestor's ID to fetch the next set of results.</param>
        /// <returns>Returned if the requested ancestors are returned.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Response51> GetDatabaseAncestorsAsync(long id, int? limit);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get all ancestors of database
        /// </summary>
        /// <remarks>
        /// Returns all ancestors for a given database by ID in top-to-bottom order (that is, the highest ancestor is the first
        /// <br/>item in the response payload). The number of results is limited by the `limit` parameter and additional results (if available)
        /// <br/>will be available by calling this endpoint with the ID of first ancestor in the response payload.
        /// <br/>
        /// <br/>This endpoint returns minimal information about each ancestor. To fetch more details, use a related endpoint, such
        /// <br/>as [Get database by id](https://developer.atlassian.com/cloud/confluence/rest/v2/api-group-database/#api-databases-id-get).
        /// <br/>
        /// <br/>**[Permissions](https://confluence.atlassian.com/x/_AozKw) required**:
        /// <br/>Permission to access the Confluence site ('Can use' global permission).
        /// <br/>Permission to view the database and its corresponding space
        /// </remarks>
        /// <param name="id">The ID of the database.</param>
        /// <param name="limit">Maximum number of items per result to return. If more results exist, call the endpoint with the highest ancestor's ID to fetch the next set of results.</param>
        /// <returns>Returned if the requested ancestors are returned.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Response51> GetDatabaseAncestorsAsync(long id, int? limit, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Create Smart Link in the content tree
        /// </summary>
        /// <remarks>
        /// Creates a Smart Link in the content tree in the space.
        /// <br/>
        /// <br/>**[Permissions](https://confluence.atlassian.com/x/_AozKw) required**:
        /// <br/>Permission to view the corresponding space. Permission to create a Smart Link in the content tree in the space.
        /// </remarks>
        /// <returns>Returned if the Smart Link was successfully created in the content tree.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Response52> CreateSmartLinkAsync(object body);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Create Smart Link in the content tree
        /// </summary>
        /// <remarks>
        /// Creates a Smart Link in the content tree in the space.
        /// <br/>
        /// <br/>**[Permissions](https://confluence.atlassian.com/x/_AozKw) required**:
        /// <br/>Permission to view the corresponding space. Permission to create a Smart Link in the content tree in the space.
        /// </remarks>
        /// <returns>Returned if the Smart Link was successfully created in the content tree.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Response52> CreateSmartLinkAsync(object body, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Get Smart Link in the content tree by id
        /// </summary>
        /// <remarks>
        /// Returns a specific Smart Link in the content tree.
        /// <br/>
        /// <br/>**[Permissions](https://confluence.atlassian.com/x/_AozKw) required**:
        /// <br/>Permission to view the Smart Link in the content tree and its corresponding space.
        /// </remarks>
        /// <param name="id">The ID of the Smart Link in the content tree to be returned.</param>
        /// <param name="include_collaborators">Includes collaborators on the Smart Link.</param>
        /// <param name="include_direct_children">Includes direct children of the Smart Link, as defined in the `ChildrenResponse` object.</param>
        /// <param name="include_operations">Includes operations associated with this Smart Link in the response, as defined in the `Operation` object.
        /// <br/>The number of results will be limited to 50 and sorted in the default sort order.
        /// <br/>A `meta` and `_links` property will be present to indicate if more results are available and a link to retrieve the rest of the results.</param>
        /// <param name="include_properties">Includes content properties associated with this Smart Link in the response.
        /// <br/>The number of results will be limited to 50 and sorted in the default sort order.
        /// <br/>A `meta` and `_links` property will be present to indicate if more results are available and a link to retrieve the rest of the results.</param>
        /// <returns>Returned if the requested Smart Link in the content tree is returned.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Response53> GetSmartLinkByIdAsync(long id, bool? include_collaborators, bool? include_direct_children, bool? include_operations, bool? include_properties);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get Smart Link in the content tree by id
        /// </summary>
        /// <remarks>
        /// Returns a specific Smart Link in the content tree.
        /// <br/>
        /// <br/>**[Permissions](https://confluence.atlassian.com/x/_AozKw) required**:
        /// <br/>Permission to view the Smart Link in the content tree and its corresponding space.
        /// </remarks>
        /// <param name="id">The ID of the Smart Link in the content tree to be returned.</param>
        /// <param name="include_collaborators">Includes collaborators on the Smart Link.</param>
        /// <param name="include_direct_children">Includes direct children of the Smart Link, as defined in the `ChildrenResponse` object.</param>
        /// <param name="include_operations">Includes operations associated with this Smart Link in the response, as defined in the `Operation` object.
        /// <br/>The number of results will be limited to 50 and sorted in the default sort order.
        /// <br/>A `meta` and `_links` property will be present to indicate if more results are available and a link to retrieve the rest of the results.</param>
        /// <param name="include_properties">Includes content properties associated with this Smart Link in the response.
        /// <br/>The number of results will be limited to 50 and sorted in the default sort order.
        /// <br/>A `meta` and `_links` property will be present to indicate if more results are available and a link to retrieve the rest of the results.</param>
        /// <returns>Returned if the requested Smart Link in the content tree is returned.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Response53> GetSmartLinkByIdAsync(long id, bool? include_collaborators, bool? include_direct_children, bool? include_operations, bool? include_properties, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Delete Smart Link in the content tree
        /// </summary>
        /// <remarks>
        /// Delete a Smart Link in the content tree by id.
        /// <br/>
        /// <br/>Deleting a Smart Link in the content tree moves the Smart Link to the trash, where it can be restored later
        /// <br/>
        /// <br/>**[Permissions](https://confluence.atlassian.com/x/_AozKw) required**:
        /// <br/>Permission to view the Smart Link in the content tree and its corresponding space.
        /// <br/>Permission to delete Smart Links in the content tree in the space.
        /// </remarks>
        /// <param name="id">The ID of the Smart Link in the content tree to be deleted.</param>
        /// <returns>Returned if the Smart Link in the content tree was successfully deleted.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task DeleteSmartLinkAsync(long id);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Delete Smart Link in the content tree
        /// </summary>
        /// <remarks>
        /// Delete a Smart Link in the content tree by id.
        /// <br/>
        /// <br/>Deleting a Smart Link in the content tree moves the Smart Link to the trash, where it can be restored later
        /// <br/>
        /// <br/>**[Permissions](https://confluence.atlassian.com/x/_AozKw) required**:
        /// <br/>Permission to view the Smart Link in the content tree and its corresponding space.
        /// <br/>Permission to delete Smart Links in the content tree in the space.
        /// </remarks>
        /// <param name="id">The ID of the Smart Link in the content tree to be deleted.</param>
        /// <returns>Returned if the Smart Link in the content tree was successfully deleted.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task DeleteSmartLinkAsync(long id, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Get content properties for Smart Link in the content tree
        /// </summary>
        /// <remarks>
        /// Retrieves Content Properties tied to a specified Smart Link in the content tree.
        /// <br/>
        /// <br/>**[Permissions](https://confluence.atlassian.com/x/_AozKw) required**:
        /// <br/>Permission to view the Smart Link in the content tree.
        /// </remarks>
        /// <param name="id">The ID of the Smart Link in the content tree for which content properties should be returned.</param>
        /// <param name="key">Filters the response to return a specific content property with matching key (case sensitive).</param>
        /// <param name="sort">Used to sort the result by a particular field.</param>
        /// <param name="cursor">Used for pagination, this opaque cursor will be returned in the `next` URL in the `Link` response header. Use the relative URL in the `Link` header to retrieve the `next` set of results.</param>
        /// <param name="limit">Maximum number of Smart Links per result to return. If more results exist, use the `Link` header to retrieve a relative URL that will return the next set of results.</param>
        /// <returns>Returned if the requested content properties are successfully retrieved.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Response54> GetSmartLinkContentPropertiesAsync(long id, string key, ContentPropertySortOrder? sort, string cursor, int? limit);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get content properties for Smart Link in the content tree
        /// </summary>
        /// <remarks>
        /// Retrieves Content Properties tied to a specified Smart Link in the content tree.
        /// <br/>
        /// <br/>**[Permissions](https://confluence.atlassian.com/x/_AozKw) required**:
        /// <br/>Permission to view the Smart Link in the content tree.
        /// </remarks>
        /// <param name="id">The ID of the Smart Link in the content tree for which content properties should be returned.</param>
        /// <param name="key">Filters the response to return a specific content property with matching key (case sensitive).</param>
        /// <param name="sort">Used to sort the result by a particular field.</param>
        /// <param name="cursor">Used for pagination, this opaque cursor will be returned in the `next` URL in the `Link` response header. Use the relative URL in the `Link` header to retrieve the `next` set of results.</param>
        /// <param name="limit">Maximum number of Smart Links per result to return. If more results exist, use the `Link` header to retrieve a relative URL that will return the next set of results.</param>
        /// <returns>Returned if the requested content properties are successfully retrieved.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Response54> GetSmartLinkContentPropertiesAsync(long id, string key, ContentPropertySortOrder? sort, string cursor, int? limit, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Create content property for Smart Link in the content tree
        /// </summary>
        /// <remarks>
        /// Creates a new content property for a Smart Link in the content tree.
        /// <br/>
        /// <br/>**[Permissions](https://confluence.atlassian.com/x/_AozKw) required**:
        /// <br/>Permission to update the Smart Link in the content tree.
        /// </remarks>
        /// <param name="id">The ID of the Smart Link in the content tree to create a property for.</param>
        /// <param name="body">The content property to be created</param>
        /// <returns>Returned if the content property was created successfully.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<ContentProperty> CreateSmartLinkPropertyAsync(long id, ContentPropertyCreateRequest body);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Create content property for Smart Link in the content tree
        /// </summary>
        /// <remarks>
        /// Creates a new content property for a Smart Link in the content tree.
        /// <br/>
        /// <br/>**[Permissions](https://confluence.atlassian.com/x/_AozKw) required**:
        /// <br/>Permission to update the Smart Link in the content tree.
        /// </remarks>
        /// <param name="id">The ID of the Smart Link in the content tree to create a property for.</param>
        /// <param name="body">The content property to be created</param>
        /// <returns>Returned if the content property was created successfully.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<ContentProperty> CreateSmartLinkPropertyAsync(long id, ContentPropertyCreateRequest body, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Get content property for Smart Link in the content tree by id
        /// </summary>
        /// <remarks>
        /// Retrieves a specific Content Property by ID that is attached to a specified Smart Link in the content tree.
        /// <br/>
        /// <br/>**[Permissions](https://confluence.atlassian.com/x/_AozKw) required**:
        /// <br/>Permission to view the Smart Link in the content tree.
        /// </remarks>
        /// <param name="embed_id">The ID of the Smart Link in the content tree for which content properties should be returned.</param>
        /// <param name="property_id">The ID of the content property being requested.</param>
        /// <returns>Returned if the requested content property is successfully retrieved.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<ContentProperty> GetSmartLinkContentPropertiesByIdAsync(long embed_id, long property_id);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get content property for Smart Link in the content tree by id
        /// </summary>
        /// <remarks>
        /// Retrieves a specific Content Property by ID that is attached to a specified Smart Link in the content tree.
        /// <br/>
        /// <br/>**[Permissions](https://confluence.atlassian.com/x/_AozKw) required**:
        /// <br/>Permission to view the Smart Link in the content tree.
        /// </remarks>
        /// <param name="embed_id">The ID of the Smart Link in the content tree for which content properties should be returned.</param>
        /// <param name="property_id">The ID of the content property being requested.</param>
        /// <returns>Returned if the requested content property is successfully retrieved.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<ContentProperty> GetSmartLinkContentPropertiesByIdAsync(long embed_id, long property_id, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Update content property for Smart Link in the content tree by id
        /// </summary>
        /// <remarks>
        /// Update a content property for a Smart Link in the content tree by its id. 
        /// <br/>
        /// <br/>**[Permissions](https://confluence.atlassian.com/x/_AozKw) required**:
        /// <br/>Permission to edit the Smart Link in the content tree.
        /// </remarks>
        /// <param name="embed_id">The ID of the Smart Link in the content tree the property belongs to.</param>
        /// <param name="property_id">The ID of the property to be updated.</param>
        /// <param name="body">The content property to be updated.</param>
        /// <returns>Returned if the content property was updated successfully.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<ContentProperty> UpdateSmartLinkPropertyByIdAsync(long embed_id, long property_id, ContentPropertyUpdateRequest body);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Update content property for Smart Link in the content tree by id
        /// </summary>
        /// <remarks>
        /// Update a content property for a Smart Link in the content tree by its id. 
        /// <br/>
        /// <br/>**[Permissions](https://confluence.atlassian.com/x/_AozKw) required**:
        /// <br/>Permission to edit the Smart Link in the content tree.
        /// </remarks>
        /// <param name="embed_id">The ID of the Smart Link in the content tree the property belongs to.</param>
        /// <param name="property_id">The ID of the property to be updated.</param>
        /// <param name="body">The content property to be updated.</param>
        /// <returns>Returned if the content property was updated successfully.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<ContentProperty> UpdateSmartLinkPropertyByIdAsync(long embed_id, long property_id, ContentPropertyUpdateRequest body, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Delete content property for Smart Link in the content tree by id
        /// </summary>
        /// <remarks>
        /// Deletes a content property for a Smart Link in the content tree by its id. 
        /// <br/>
        /// <br/>**[Permissions](https://confluence.atlassian.com/x/_AozKw) required**:
        /// <br/>Permission to edit the Smart Link in the content tree.
        /// </remarks>
        /// <param name="embed_id">The ID of the Smart Link in the content tree the property belongs to.</param>
        /// <param name="property_id">The ID of the property to be deleted.</param>
        /// <returns>Returned if the content property was deleted successfully.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task DeleteSmartLinkPropertyByIdAsync(long embed_id, long property_id);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Delete content property for Smart Link in the content tree by id
        /// </summary>
        /// <remarks>
        /// Deletes a content property for a Smart Link in the content tree by its id. 
        /// <br/>
        /// <br/>**[Permissions](https://confluence.atlassian.com/x/_AozKw) required**:
        /// <br/>Permission to edit the Smart Link in the content tree.
        /// </remarks>
        /// <param name="embed_id">The ID of the Smart Link in the content tree the property belongs to.</param>
        /// <param name="property_id">The ID of the property to be deleted.</param>
        /// <returns>Returned if the content property was deleted successfully.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task DeleteSmartLinkPropertyByIdAsync(long embed_id, long property_id, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Get permitted operations for a Smart Link in the content tree
        /// </summary>
        /// <remarks>
        /// Returns the permitted operations on specific Smart Link in the content tree.
        /// <br/>
        /// <br/>**[Permissions](https://confluence.atlassian.com/x/_AozKw) required**:
        /// <br/>Permission to view the Smart Link in the content tree and its corresponding space.
        /// </remarks>
        /// <param name="id">The ID of the Smart Link in the content tree for which operations should be returned.</param>
        /// <returns>Returned if the requested operations are returned.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<PermittedOperationsResponse> GetSmartLinkOperationsAsync(long id);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get permitted operations for a Smart Link in the content tree
        /// </summary>
        /// <remarks>
        /// Returns the permitted operations on specific Smart Link in the content tree.
        /// <br/>
        /// <br/>**[Permissions](https://confluence.atlassian.com/x/_AozKw) required**:
        /// <br/>Permission to view the Smart Link in the content tree and its corresponding space.
        /// </remarks>
        /// <param name="id">The ID of the Smart Link in the content tree for which operations should be returned.</param>
        /// <returns>Returned if the requested operations are returned.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<PermittedOperationsResponse> GetSmartLinkOperationsAsync(long id, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Get direct children of a Smart Link
        /// </summary>
        /// <remarks>
        /// Returns all children for given smart link id in the content tree. The number of results is limited by the `limit` parameter and additional results (if available)
        /// <br/>will be available through the `next` URL present in the `Link` response header.
        /// <br/>
        /// <br/>The following types of content will be returned:
        /// <br/>- Database
        /// <br/>- Embed
        /// <br/>- Folder
        /// <br/>- Page
        /// <br/>- Whiteboard
        /// <br/>
        /// <br/>This endpoint returns minimal information about each child. To fetch more details, use a related endpoint based on the content type, such
        /// <br/>as:
        /// <br/>
        /// <br/>- [Get database by id](https://developer.atlassian.com/cloud/confluence/rest/v2/api-group-database/#api-databases-id-get)
        /// <br/>- [Get embed by id](https://developer.atlassian.com/cloud/confluence/rest/v2/api-group-smart-link/#api-embeds-id-get)
        /// <br/>- [Get folder by id](https://developer.atlassian.com/cloud/confluence/rest/v2/api-group-folder/#api-folders-id-get)
        /// <br/>- [Get page by id](https://developer.atlassian.com/cloud/confluence/rest/v2/api-group-page/#api-pages-id-get)
        /// <br/>- [Get whiteboard by id](https://developer.atlassian.com/cloud/confluence/rest/v2/api-group-whiteboard/#api-whiteboards-id-get).
        /// <br/>
        /// <br/>**[Permissions](https://confluence.atlassian.com/x/_AozKw) required**:
        /// <br/>Permission to access the Confluence site ('Can use' global permission).
        /// <br/>Only content that the user has permission to view will be returned.
        /// </remarks>
        /// <param name="id">The ID of the parent smart link.</param>
        /// <param name="cursor">Used for pagination, this opaque cursor will be returned in the `next` URL in the `Link` response header. Use the relative URL in the `Link` header to retrieve the `next` set of results.</param>
        /// <param name="limit">Maximum number of items per result to return. If more results exist, use the `Link` header to retrieve a relative URL that will return the next set of results.</param>
        /// <param name="sort">Used to sort the result by a particular field.</param>
        /// <returns>Returned if the requested children are returned.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Response55> GetSmartLinkDirectChildrenAsync(long id, string cursor, int? limit, string sort);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get direct children of a Smart Link
        /// </summary>
        /// <remarks>
        /// Returns all children for given smart link id in the content tree. The number of results is limited by the `limit` parameter and additional results (if available)
        /// <br/>will be available through the `next` URL present in the `Link` response header.
        /// <br/>
        /// <br/>The following types of content will be returned:
        /// <br/>- Database
        /// <br/>- Embed
        /// <br/>- Folder
        /// <br/>- Page
        /// <br/>- Whiteboard
        /// <br/>
        /// <br/>This endpoint returns minimal information about each child. To fetch more details, use a related endpoint based on the content type, such
        /// <br/>as:
        /// <br/>
        /// <br/>- [Get database by id](https://developer.atlassian.com/cloud/confluence/rest/v2/api-group-database/#api-databases-id-get)
        /// <br/>- [Get embed by id](https://developer.atlassian.com/cloud/confluence/rest/v2/api-group-smart-link/#api-embeds-id-get)
        /// <br/>- [Get folder by id](https://developer.atlassian.com/cloud/confluence/rest/v2/api-group-folder/#api-folders-id-get)
        /// <br/>- [Get page by id](https://developer.atlassian.com/cloud/confluence/rest/v2/api-group-page/#api-pages-id-get)
        /// <br/>- [Get whiteboard by id](https://developer.atlassian.com/cloud/confluence/rest/v2/api-group-whiteboard/#api-whiteboards-id-get).
        /// <br/>
        /// <br/>**[Permissions](https://confluence.atlassian.com/x/_AozKw) required**:
        /// <br/>Permission to access the Confluence site ('Can use' global permission).
        /// <br/>Only content that the user has permission to view will be returned.
        /// </remarks>
        /// <param name="id">The ID of the parent smart link.</param>
        /// <param name="cursor">Used for pagination, this opaque cursor will be returned in the `next` URL in the `Link` response header. Use the relative URL in the `Link` header to retrieve the `next` set of results.</param>
        /// <param name="limit">Maximum number of items per result to return. If more results exist, use the `Link` header to retrieve a relative URL that will return the next set of results.</param>
        /// <param name="sort">Used to sort the result by a particular field.</param>
        /// <returns>Returned if the requested children are returned.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Response55> GetSmartLinkDirectChildrenAsync(long id, string cursor, int? limit, string sort, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Get descendants of a smart link
        /// </summary>
        /// <remarks>
        /// Returns descendants in the content tree for a given smart link by ID in top-to-bottom order (that is, the highest descendant is the first
        /// <br/>item in the response payload). The number of results is limited by the `limit` parameter and additional results (if available)
        /// <br/>will be available by calling this endpoint with the cursor in the response payload. There is also a `depth` parameter specifying depth
        /// <br/>of descendants to be fetched.
        /// <br/>
        /// <br/>The following types of content will be returned:
        /// <br/>- Database
        /// <br/>- Embed
        /// <br/>- Folder
        /// <br/>- Page
        /// <br/>- Whiteboard
        /// <br/>
        /// <br/>
        /// <br/>This endpoint returns minimal information about each descendant. To fetch more details, use a related endpoint based on the content type, such
        /// <br/>as:
        /// <br/>
        /// <br/>- [Get database by id](https://developer.atlassian.com/cloud/confluence/rest/v2/api-group-database/#api-databases-id-get)
        /// <br/>- [Get embed by id](https://developer.atlassian.com/cloud/confluence/rest/v2/api-group-smart-link/#api-embeds-id-get)
        /// <br/>- [Get folder by id](https://developer.atlassian.com/cloud/confluence/rest/v2/api-group-folder/#api-folders-id-get)
        /// <br/>- [Get page by id](https://developer.atlassian.com/cloud/confluence/rest/v2/api-group-page/#api-pages-id-get)
        /// <br/>- [Get whiteboard by id](https://developer.atlassian.com/cloud/confluence/rest/v2/api-group-whiteboard/#api-whiteboards-id-get).
        /// <br/>
        /// <br/>**[Permissions](https://confluence.atlassian.com/x/_AozKw) required**:
        /// <br/>Permission to access the Confluence site ('Can use' global permission).
        /// <br/>Permission to view the smart link and its corresponding space
        /// </remarks>
        /// <param name="id">The ID of the smart link.</param>
        /// <param name="limit">Maximum number of items per result to return. If more results exist, call the endpoint with the cursor to fetch the next set of results.</param>
        /// <param name="depth">Maximum depth of descendants to return. If more results are required, use the endpoint corresponding to the content type of the deepest descendant to fetch more descendants.</param>
        /// <param name="cursor">Used for pagination, this opaque cursor will be returned in the `next` URL in the `Link` response header. Use the relative URL in the `Link` header to retrieve the `next` set of results.</param>
        /// <returns>Returned if the requested descendants are returned.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Response56> GetSmartLinkDescendantsAsync(long id, int? limit, int? depth, string cursor);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get descendants of a smart link
        /// </summary>
        /// <remarks>
        /// Returns descendants in the content tree for a given smart link by ID in top-to-bottom order (that is, the highest descendant is the first
        /// <br/>item in the response payload). The number of results is limited by the `limit` parameter and additional results (if available)
        /// <br/>will be available by calling this endpoint with the cursor in the response payload. There is also a `depth` parameter specifying depth
        /// <br/>of descendants to be fetched.
        /// <br/>
        /// <br/>The following types of content will be returned:
        /// <br/>- Database
        /// <br/>- Embed
        /// <br/>- Folder
        /// <br/>- Page
        /// <br/>- Whiteboard
        /// <br/>
        /// <br/>
        /// <br/>This endpoint returns minimal information about each descendant. To fetch more details, use a related endpoint based on the content type, such
        /// <br/>as:
        /// <br/>
        /// <br/>- [Get database by id](https://developer.atlassian.com/cloud/confluence/rest/v2/api-group-database/#api-databases-id-get)
        /// <br/>- [Get embed by id](https://developer.atlassian.com/cloud/confluence/rest/v2/api-group-smart-link/#api-embeds-id-get)
        /// <br/>- [Get folder by id](https://developer.atlassian.com/cloud/confluence/rest/v2/api-group-folder/#api-folders-id-get)
        /// <br/>- [Get page by id](https://developer.atlassian.com/cloud/confluence/rest/v2/api-group-page/#api-pages-id-get)
        /// <br/>- [Get whiteboard by id](https://developer.atlassian.com/cloud/confluence/rest/v2/api-group-whiteboard/#api-whiteboards-id-get).
        /// <br/>
        /// <br/>**[Permissions](https://confluence.atlassian.com/x/_AozKw) required**:
        /// <br/>Permission to access the Confluence site ('Can use' global permission).
        /// <br/>Permission to view the smart link and its corresponding space
        /// </remarks>
        /// <param name="id">The ID of the smart link.</param>
        /// <param name="limit">Maximum number of items per result to return. If more results exist, call the endpoint with the cursor to fetch the next set of results.</param>
        /// <param name="depth">Maximum depth of descendants to return. If more results are required, use the endpoint corresponding to the content type of the deepest descendant to fetch more descendants.</param>
        /// <param name="cursor">Used for pagination, this opaque cursor will be returned in the `next` URL in the `Link` response header. Use the relative URL in the `Link` header to retrieve the `next` set of results.</param>
        /// <returns>Returned if the requested descendants are returned.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Response56> GetSmartLinkDescendantsAsync(long id, int? limit, int? depth, string cursor, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Get all ancestors of Smart Link in content tree
        /// </summary>
        /// <remarks>
        /// Returns all ancestors for a given Smart Link in the content tree by ID in top-to-bottom order (that is, the highest ancestor is
        /// <br/>the first item in the response payload). The number of results is limited by the `limit` parameter and additional results 
        /// <br/>(if available) will be available by calling this endpoint with the ID of first ancestor in the response payload.
        /// <br/>
        /// <br/>This endpoint returns minimal information about each ancestor. To fetch more details, use a related endpoint, such
        /// <br/>as [Get Smart Link in the content tree by id](https://developer.atlassian.com/cloud/confluence/rest/v2/api-group-smart-link/#api-embeds-id-get).
        /// <br/>
        /// <br/>**[Permissions](https://confluence.atlassian.com/x/_AozKw) required**:
        /// <br/>Permission to access the Confluence site ('Can use' global permission).
        /// <br/>Permission to view the Smart Link in the content tree and its corresponding space
        /// </remarks>
        /// <param name="id">The ID of the Smart Link in the content tree.</param>
        /// <param name="limit">Maximum number of items per result to return. If more results exist, call the endpoint with the highest ancestor's ID to fetch the next set of results.</param>
        /// <returns>Returned if the requested ancestors are returned.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Response57> GetSmartLinkAncestorsAsync(long id, int? limit);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get all ancestors of Smart Link in content tree
        /// </summary>
        /// <remarks>
        /// Returns all ancestors for a given Smart Link in the content tree by ID in top-to-bottom order (that is, the highest ancestor is
        /// <br/>the first item in the response payload). The number of results is limited by the `limit` parameter and additional results 
        /// <br/>(if available) will be available by calling this endpoint with the ID of first ancestor in the response payload.
        /// <br/>
        /// <br/>This endpoint returns minimal information about each ancestor. To fetch more details, use a related endpoint, such
        /// <br/>as [Get Smart Link in the content tree by id](https://developer.atlassian.com/cloud/confluence/rest/v2/api-group-smart-link/#api-embeds-id-get).
        /// <br/>
        /// <br/>**[Permissions](https://confluence.atlassian.com/x/_AozKw) required**:
        /// <br/>Permission to access the Confluence site ('Can use' global permission).
        /// <br/>Permission to view the Smart Link in the content tree and its corresponding space
        /// </remarks>
        /// <param name="id">The ID of the Smart Link in the content tree.</param>
        /// <param name="limit">Maximum number of items per result to return. If more results exist, call the endpoint with the highest ancestor's ID to fetch the next set of results.</param>
        /// <returns>Returned if the requested ancestors are returned.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Response57> GetSmartLinkAncestorsAsync(long id, int? limit, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Create folder
        /// </summary>
        /// <remarks>
        /// Creates a folder in the space.
        /// <br/>
        /// <br/>**[Permissions](https://confluence.atlassian.com/x/_AozKw) required**:
        /// <br/>Permission to view the corresponding space. Permission to create a folder in the space.
        /// </remarks>
        /// <returns>Returned if the folder was successfully created in the content tree.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Response58> CreateFolderAsync(object body);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Create folder
        /// </summary>
        /// <remarks>
        /// Creates a folder in the space.
        /// <br/>
        /// <br/>**[Permissions](https://confluence.atlassian.com/x/_AozKw) required**:
        /// <br/>Permission to view the corresponding space. Permission to create a folder in the space.
        /// </remarks>
        /// <returns>Returned if the folder was successfully created in the content tree.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Response58> CreateFolderAsync(object body, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Get folder by id
        /// </summary>
        /// <remarks>
        /// Returns a specific folder.
        /// <br/>
        /// <br/>**[Permissions](https://confluence.atlassian.com/x/_AozKw) required**:
        /// <br/>Permission to view the folder and its corresponding space.
        /// </remarks>
        /// <param name="id">The ID of the folder to be returned.</param>
        /// <param name="include_collaborators">Includes collaborators on the folder.</param>
        /// <param name="include_direct_children">Includes direct children of the folder, as defined in the `ChildrenResponse` object.</param>
        /// <param name="include_operations">Includes operations associated with this folder in the response, as defined in the `Operation` object.
        /// <br/>The number of results will be limited to 50 and sorted in the default sort order.
        /// <br/>A `meta` and `_links` property will be present to indicate if more results are available and a link to retrieve the rest of the results.</param>
        /// <param name="include_properties">Includes content properties associated with this folder in the response.
        /// <br/>The number of results will be limited to 50 and sorted in the default sort order.
        /// <br/>A `meta` and `_links` property will be present to indicate if more results are available and a link to retrieve the rest of the results.</param>
        /// <returns>Returned if the requested folder is returned.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Response59> GetFolderByIdAsync(long id, bool? include_collaborators, bool? include_direct_children, bool? include_operations, bool? include_properties);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get folder by id
        /// </summary>
        /// <remarks>
        /// Returns a specific folder.
        /// <br/>
        /// <br/>**[Permissions](https://confluence.atlassian.com/x/_AozKw) required**:
        /// <br/>Permission to view the folder and its corresponding space.
        /// </remarks>
        /// <param name="id">The ID of the folder to be returned.</param>
        /// <param name="include_collaborators">Includes collaborators on the folder.</param>
        /// <param name="include_direct_children">Includes direct children of the folder, as defined in the `ChildrenResponse` object.</param>
        /// <param name="include_operations">Includes operations associated with this folder in the response, as defined in the `Operation` object.
        /// <br/>The number of results will be limited to 50 and sorted in the default sort order.
        /// <br/>A `meta` and `_links` property will be present to indicate if more results are available and a link to retrieve the rest of the results.</param>
        /// <param name="include_properties">Includes content properties associated with this folder in the response.
        /// <br/>The number of results will be limited to 50 and sorted in the default sort order.
        /// <br/>A `meta` and `_links` property will be present to indicate if more results are available and a link to retrieve the rest of the results.</param>
        /// <returns>Returned if the requested folder is returned.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Response59> GetFolderByIdAsync(long id, bool? include_collaborators, bool? include_direct_children, bool? include_operations, bool? include_properties, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Delete folder
        /// </summary>
        /// <remarks>
        /// Delete a folder by id.
        /// <br/>
        /// <br/>Deleting a folder moves the folder to the trash, where it can be restored later
        /// <br/>
        /// <br/>**[Permissions](https://confluence.atlassian.com/x/_AozKw) required**:
        /// <br/>Permission to view the folder and its corresponding space.
        /// <br/>Permission to delete folders in the space.
        /// </remarks>
        /// <param name="id">The ID of the folder to be deleted.</param>
        /// <returns>Returned if the folder was successfully deleted.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task DeleteFolderAsync(long id);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Delete folder
        /// </summary>
        /// <remarks>
        /// Delete a folder by id.
        /// <br/>
        /// <br/>Deleting a folder moves the folder to the trash, where it can be restored later
        /// <br/>
        /// <br/>**[Permissions](https://confluence.atlassian.com/x/_AozKw) required**:
        /// <br/>Permission to view the folder and its corresponding space.
        /// <br/>Permission to delete folders in the space.
        /// </remarks>
        /// <param name="id">The ID of the folder to be deleted.</param>
        /// <returns>Returned if the folder was successfully deleted.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task DeleteFolderAsync(long id, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Get content properties for folder
        /// </summary>
        /// <remarks>
        /// Retrieves Content Properties tied to a specified folder.
        /// <br/>
        /// <br/>**[Permissions](https://confluence.atlassian.com/x/_AozKw) required**:
        /// <br/>Permission to view the folder.
        /// </remarks>
        /// <param name="id">The ID of the folder for which content properties should be returned.</param>
        /// <param name="key">Filters the response to return a specific content property with matching key (case sensitive).</param>
        /// <param name="sort">Used to sort the result by a particular field.</param>
        /// <param name="cursor">Used for pagination, this opaque cursor will be returned in the `next` URL in the `Link` response header. Use the relative URL in the `Link` header to retrieve the `next` set of results.</param>
        /// <param name="limit">Maximum number of attachments per result to return. If more results exist, use the `Link` header to retrieve a relative URL that will return the next set of results.</param>
        /// <returns>Returned if the requested content properties are successfully retrieved.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Response60> GetFolderContentPropertiesAsync(long id, string key, ContentPropertySortOrder? sort, string cursor, int? limit);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get content properties for folder
        /// </summary>
        /// <remarks>
        /// Retrieves Content Properties tied to a specified folder.
        /// <br/>
        /// <br/>**[Permissions](https://confluence.atlassian.com/x/_AozKw) required**:
        /// <br/>Permission to view the folder.
        /// </remarks>
        /// <param name="id">The ID of the folder for which content properties should be returned.</param>
        /// <param name="key">Filters the response to return a specific content property with matching key (case sensitive).</param>
        /// <param name="sort">Used to sort the result by a particular field.</param>
        /// <param name="cursor">Used for pagination, this opaque cursor will be returned in the `next` URL in the `Link` response header. Use the relative URL in the `Link` header to retrieve the `next` set of results.</param>
        /// <param name="limit">Maximum number of attachments per result to return. If more results exist, use the `Link` header to retrieve a relative URL that will return the next set of results.</param>
        /// <returns>Returned if the requested content properties are successfully retrieved.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Response60> GetFolderContentPropertiesAsync(long id, string key, ContentPropertySortOrder? sort, string cursor, int? limit, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Create content property for folder
        /// </summary>
        /// <remarks>
        /// Creates a new content property for a folder.
        /// <br/>
        /// <br/>**[Permissions](https://confluence.atlassian.com/x/_AozKw) required**:
        /// <br/>Permission to update the folder.
        /// </remarks>
        /// <param name="id">The ID of the folder to create a property for.</param>
        /// <param name="body">The content property to be created</param>
        /// <returns>Returned if the content property was created successfully.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<ContentProperty> CreateFolderPropertyAsync(long id, ContentPropertyCreateRequest body);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Create content property for folder
        /// </summary>
        /// <remarks>
        /// Creates a new content property for a folder.
        /// <br/>
        /// <br/>**[Permissions](https://confluence.atlassian.com/x/_AozKw) required**:
        /// <br/>Permission to update the folder.
        /// </remarks>
        /// <param name="id">The ID of the folder to create a property for.</param>
        /// <param name="body">The content property to be created</param>
        /// <returns>Returned if the content property was created successfully.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<ContentProperty> CreateFolderPropertyAsync(long id, ContentPropertyCreateRequest body, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Get content property for folder by id
        /// </summary>
        /// <remarks>
        /// Retrieves a specific Content Property by ID that is attached to a specified folder.
        /// <br/>
        /// <br/>**[Permissions](https://confluence.atlassian.com/x/_AozKw) required**:
        /// <br/>Permission to view the folder.
        /// </remarks>
        /// <param name="folder_id">The ID of the folder for which content properties should be returned.</param>
        /// <param name="property_id">The ID of the content property being requested.</param>
        /// <returns>Returned if the requested content property is successfully retrieved.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<ContentProperty> GetFolderContentPropertiesByIdAsync(long folder_id, long property_id);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get content property for folder by id
        /// </summary>
        /// <remarks>
        /// Retrieves a specific Content Property by ID that is attached to a specified folder.
        /// <br/>
        /// <br/>**[Permissions](https://confluence.atlassian.com/x/_AozKw) required**:
        /// <br/>Permission to view the folder.
        /// </remarks>
        /// <param name="folder_id">The ID of the folder for which content properties should be returned.</param>
        /// <param name="property_id">The ID of the content property being requested.</param>
        /// <returns>Returned if the requested content property is successfully retrieved.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<ContentProperty> GetFolderContentPropertiesByIdAsync(long folder_id, long property_id, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Update content property for folder by id
        /// </summary>
        /// <remarks>
        /// Update a content property for a folder by its id. 
        /// <br/>
        /// <br/>**[Permissions](https://confluence.atlassian.com/x/_AozKw) required**:
        /// <br/>Permission to edit the folder.
        /// </remarks>
        /// <param name="folder_id">The ID of the folder the property belongs to.</param>
        /// <param name="property_id">The ID of the property to be updated.</param>
        /// <param name="body">The content property to be updated.</param>
        /// <returns>Returned if the content property was updated successfully.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<ContentProperty> UpdateFolderPropertyByIdAsync(long folder_id, long property_id, ContentPropertyUpdateRequest body);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Update content property for folder by id
        /// </summary>
        /// <remarks>
        /// Update a content property for a folder by its id. 
        /// <br/>
        /// <br/>**[Permissions](https://confluence.atlassian.com/x/_AozKw) required**:
        /// <br/>Permission to edit the folder.
        /// </remarks>
        /// <param name="folder_id">The ID of the folder the property belongs to.</param>
        /// <param name="property_id">The ID of the property to be updated.</param>
        /// <param name="body">The content property to be updated.</param>
        /// <returns>Returned if the content property was updated successfully.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<ContentProperty> UpdateFolderPropertyByIdAsync(long folder_id, long property_id, ContentPropertyUpdateRequest body, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Delete content property for folder by id
        /// </summary>
        /// <remarks>
        /// Deletes a content property for a folder by its id. 
        /// <br/>
        /// <br/>**[Permissions](https://confluence.atlassian.com/x/_AozKw) required**:
        /// <br/>Permission to edit the folder.
        /// </remarks>
        /// <param name="folder_id">The ID of the folder the property belongs to.</param>
        /// <param name="property_id">The ID of the property to be deleted.</param>
        /// <returns>Returned if the content property was deleted successfully.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task DeleteFolderPropertyByIdAsync(long folder_id, long property_id);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Delete content property for folder by id
        /// </summary>
        /// <remarks>
        /// Deletes a content property for a folder by its id. 
        /// <br/>
        /// <br/>**[Permissions](https://confluence.atlassian.com/x/_AozKw) required**:
        /// <br/>Permission to edit the folder.
        /// </remarks>
        /// <param name="folder_id">The ID of the folder the property belongs to.</param>
        /// <param name="property_id">The ID of the property to be deleted.</param>
        /// <returns>Returned if the content property was deleted successfully.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task DeleteFolderPropertyByIdAsync(long folder_id, long property_id, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Get permitted operations for a folder
        /// </summary>
        /// <remarks>
        /// Returns the permitted operations on specific folder.
        /// <br/>
        /// <br/>**[Permissions](https://confluence.atlassian.com/x/_AozKw) required**:
        /// <br/>Permission to view the folder and its corresponding space.
        /// </remarks>
        /// <param name="id">The ID of the folder for which operations should be returned.</param>
        /// <returns>Returned if the requested operations are returned.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<PermittedOperationsResponse> GetFolderOperationsAsync(long id);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get permitted operations for a folder
        /// </summary>
        /// <remarks>
        /// Returns the permitted operations on specific folder.
        /// <br/>
        /// <br/>**[Permissions](https://confluence.atlassian.com/x/_AozKw) required**:
        /// <br/>Permission to view the folder and its corresponding space.
        /// </remarks>
        /// <param name="id">The ID of the folder for which operations should be returned.</param>
        /// <returns>Returned if the requested operations are returned.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<PermittedOperationsResponse> GetFolderOperationsAsync(long id, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Get direct children of a folder
        /// </summary>
        /// <remarks>
        /// Returns all children for given folder id in the content tree. The number of results is limited by the `limit` parameter and additional results (if available)
        /// <br/>will be available through the `next` URL present in the `Link` response header.
        /// <br/>
        /// <br/>The following types of content will be returned:
        /// <br/>- Database
        /// <br/>- Embed
        /// <br/>- Folder
        /// <br/>- Page
        /// <br/>- Whiteboard
        /// <br/>
        /// <br/>This endpoint returns minimal information about each child. To fetch more details, use a related endpoint based on the content type, such
        /// <br/>as:
        /// <br/>
        /// <br/>- [Get database by id](https://developer.atlassian.com/cloud/confluence/rest/v2/api-group-database/#api-databases-id-get)
        /// <br/>- [Get embed by id](https://developer.atlassian.com/cloud/confluence/rest/v2/api-group-smart-link/#api-embeds-id-get)
        /// <br/>- [Get folder by id](https://developer.atlassian.com/cloud/confluence/rest/v2/api-group-folder/#api-folders-id-get)
        /// <br/>- [Get page by id](https://developer.atlassian.com/cloud/confluence/rest/v2/api-group-page/#api-pages-id-get)
        /// <br/>- [Get whiteboard by id](https://developer.atlassian.com/cloud/confluence/rest/v2/api-group-whiteboard/#api-whiteboards-id-get).
        /// <br/>
        /// <br/>**[Permissions](https://confluence.atlassian.com/x/_AozKw) required**:
        /// <br/>Permission to access the Confluence site ('Can use' global permission).
        /// <br/>Only content that the user has permission to view will be returned.
        /// </remarks>
        /// <param name="id">The ID of the parent folder.</param>
        /// <param name="cursor">Used for pagination, this opaque cursor will be returned in the `next` URL in the `Link` response header. Use the relative URL in the `Link` header to retrieve the `next` set of results.</param>
        /// <param name="limit">Maximum number of items per result to return. If more results exist, use the `Link` header to retrieve a relative URL that will return the next set of results.</param>
        /// <param name="sort">Used to sort the result by a particular field.</param>
        /// <returns>Returned if the requested children are returned.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Response61> GetFolderDirectChildrenAsync(long id, string cursor, int? limit, string sort);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get direct children of a folder
        /// </summary>
        /// <remarks>
        /// Returns all children for given folder id in the content tree. The number of results is limited by the `limit` parameter and additional results (if available)
        /// <br/>will be available through the `next` URL present in the `Link` response header.
        /// <br/>
        /// <br/>The following types of content will be returned:
        /// <br/>- Database
        /// <br/>- Embed
        /// <br/>- Folder
        /// <br/>- Page
        /// <br/>- Whiteboard
        /// <br/>
        /// <br/>This endpoint returns minimal information about each child. To fetch more details, use a related endpoint based on the content type, such
        /// <br/>as:
        /// <br/>
        /// <br/>- [Get database by id](https://developer.atlassian.com/cloud/confluence/rest/v2/api-group-database/#api-databases-id-get)
        /// <br/>- [Get embed by id](https://developer.atlassian.com/cloud/confluence/rest/v2/api-group-smart-link/#api-embeds-id-get)
        /// <br/>- [Get folder by id](https://developer.atlassian.com/cloud/confluence/rest/v2/api-group-folder/#api-folders-id-get)
        /// <br/>- [Get page by id](https://developer.atlassian.com/cloud/confluence/rest/v2/api-group-page/#api-pages-id-get)
        /// <br/>- [Get whiteboard by id](https://developer.atlassian.com/cloud/confluence/rest/v2/api-group-whiteboard/#api-whiteboards-id-get).
        /// <br/>
        /// <br/>**[Permissions](https://confluence.atlassian.com/x/_AozKw) required**:
        /// <br/>Permission to access the Confluence site ('Can use' global permission).
        /// <br/>Only content that the user has permission to view will be returned.
        /// </remarks>
        /// <param name="id">The ID of the parent folder.</param>
        /// <param name="cursor">Used for pagination, this opaque cursor will be returned in the `next` URL in the `Link` response header. Use the relative URL in the `Link` header to retrieve the `next` set of results.</param>
        /// <param name="limit">Maximum number of items per result to return. If more results exist, use the `Link` header to retrieve a relative URL that will return the next set of results.</param>
        /// <param name="sort">Used to sort the result by a particular field.</param>
        /// <returns>Returned if the requested children are returned.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Response61> GetFolderDirectChildrenAsync(long id, string cursor, int? limit, string sort, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Get descendants of folder
        /// </summary>
        /// <remarks>
        /// Returns descendants in the content tree for a given folder by ID in top-to-bottom order (that is, the highest descendant is the first
        /// <br/>item in the response payload). The number of results is limited by the `limit` parameter and additional results (if available)
        /// <br/>will be available by calling this endpoint with the cursor in the response payload. There is also a `depth` parameter specifying depth
        /// <br/>of descendants to be fetched.
        /// <br/>
        /// <br/>The following types of content will be returned:
        /// <br/>- Database
        /// <br/>- Embed
        /// <br/>- Folder
        /// <br/>- Page
        /// <br/>- Whiteboard
        /// <br/>
        /// <br/>This endpoint returns minimal information about each descendant. To fetch more details, use a related endpoint based on the content type, such
        /// <br/>as:
        /// <br/>
        /// <br/>- [Get database by id](https://developer.atlassian.com/cloud/confluence/rest/v2/api-group-database/#api-databases-id-get)
        /// <br/>- [Get embed by id](https://developer.atlassian.com/cloud/confluence/rest/v2/api-group-smart-link/#api-embeds-id-get)
        /// <br/>- [Get folder by id](https://developer.atlassian.com/cloud/confluence/rest/v2/api-group-folder/#api-folders-id-get)
        /// <br/>- [Get page by id](https://developer.atlassian.com/cloud/confluence/rest/v2/api-group-page/#api-pages-id-get)
        /// <br/>- [Get whiteboard by id](https://developer.atlassian.com/cloud/confluence/rest/v2/api-group-whiteboard/#api-whiteboards-id-get).
        /// <br/>
        /// <br/>**[Permissions](https://confluence.atlassian.com/x/_AozKw) required**:
        /// <br/>Permission to access the Confluence site ('Can use' global permission).
        /// <br/>Permission to view the  and its corresponding space
        /// </remarks>
        /// <param name="id">The ID of the folder.</param>
        /// <param name="limit">Maximum number of items per result to return. If more results exist, call the endpoint with the cursor to fetch the next set of results.</param>
        /// <param name="depth">Maximum depth of descendants to return. If more results are required, use the endpoint corresponding to the content type of the deepest descendant to fetch more descendants.</param>
        /// <param name="cursor">Used for pagination, this opaque cursor will be returned in the `next` URL in the `Link` response header. Use the relative URL in the `Link` header to retrieve the `next` set of results.</param>
        /// <returns>Returned if the requested descendants are returned.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Response62> GetFolderDescendantsAsync(long id, int? limit, int? depth, string cursor);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get descendants of folder
        /// </summary>
        /// <remarks>
        /// Returns descendants in the content tree for a given folder by ID in top-to-bottom order (that is, the highest descendant is the first
        /// <br/>item in the response payload). The number of results is limited by the `limit` parameter and additional results (if available)
        /// <br/>will be available by calling this endpoint with the cursor in the response payload. There is also a `depth` parameter specifying depth
        /// <br/>of descendants to be fetched.
        /// <br/>
        /// <br/>The following types of content will be returned:
        /// <br/>- Database
        /// <br/>- Embed
        /// <br/>- Folder
        /// <br/>- Page
        /// <br/>- Whiteboard
        /// <br/>
        /// <br/>This endpoint returns minimal information about each descendant. To fetch more details, use a related endpoint based on the content type, such
        /// <br/>as:
        /// <br/>
        /// <br/>- [Get database by id](https://developer.atlassian.com/cloud/confluence/rest/v2/api-group-database/#api-databases-id-get)
        /// <br/>- [Get embed by id](https://developer.atlassian.com/cloud/confluence/rest/v2/api-group-smart-link/#api-embeds-id-get)
        /// <br/>- [Get folder by id](https://developer.atlassian.com/cloud/confluence/rest/v2/api-group-folder/#api-folders-id-get)
        /// <br/>- [Get page by id](https://developer.atlassian.com/cloud/confluence/rest/v2/api-group-page/#api-pages-id-get)
        /// <br/>- [Get whiteboard by id](https://developer.atlassian.com/cloud/confluence/rest/v2/api-group-whiteboard/#api-whiteboards-id-get).
        /// <br/>
        /// <br/>**[Permissions](https://confluence.atlassian.com/x/_AozKw) required**:
        /// <br/>Permission to access the Confluence site ('Can use' global permission).
        /// <br/>Permission to view the  and its corresponding space
        /// </remarks>
        /// <param name="id">The ID of the folder.</param>
        /// <param name="limit">Maximum number of items per result to return. If more results exist, call the endpoint with the cursor to fetch the next set of results.</param>
        /// <param name="depth">Maximum depth of descendants to return. If more results are required, use the endpoint corresponding to the content type of the deepest descendant to fetch more descendants.</param>
        /// <param name="cursor">Used for pagination, this opaque cursor will be returned in the `next` URL in the `Link` response header. Use the relative URL in the `Link` header to retrieve the `next` set of results.</param>
        /// <returns>Returned if the requested descendants are returned.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Response62> GetFolderDescendantsAsync(long id, int? limit, int? depth, string cursor, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Get all ancestors of folder
        /// </summary>
        /// <remarks>
        /// Returns all ancestors for a given folder by ID in top-to-bottom order (that is, the highest ancestor is
        /// <br/>the first item in the response payload). The number of results is limited by the `limit` parameter and additional results 
        /// <br/>(if available) will be available by calling this endpoint with the ID of first ancestor in the response payload.
        /// <br/>
        /// <br/>This endpoint returns minimal information about each ancestor. To fetch more details, use a related endpoint, such
        /// <br/>as [Get folder by id](https://developer.atlassian.com/cloud/confluence/rest/v2/api-group-smart-link/#api-folders-id-get).
        /// <br/>
        /// <br/>**[Permissions](https://confluence.atlassian.com/x/_AozKw) required**:
        /// <br/>Permission to access the Confluence site ('Can use' global permission).
        /// <br/>Permission to view the folder and its corresponding space
        /// </remarks>
        /// <param name="id">The ID of the folder.</param>
        /// <param name="limit">Maximum number of items per result to return. If more results exist, call the endpoint with the highest ancestor's ID to fetch the next set of results.</param>
        /// <returns>Returned if the requested ancestors are returned.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Response63> GetFolderAncestorsAsync(long id, int? limit);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get all ancestors of folder
        /// </summary>
        /// <remarks>
        /// Returns all ancestors for a given folder by ID in top-to-bottom order (that is, the highest ancestor is
        /// <br/>the first item in the response payload). The number of results is limited by the `limit` parameter and additional results 
        /// <br/>(if available) will be available by calling this endpoint with the ID of first ancestor in the response payload.
        /// <br/>
        /// <br/>This endpoint returns minimal information about each ancestor. To fetch more details, use a related endpoint, such
        /// <br/>as [Get folder by id](https://developer.atlassian.com/cloud/confluence/rest/v2/api-group-smart-link/#api-folders-id-get).
        /// <br/>
        /// <br/>**[Permissions](https://confluence.atlassian.com/x/_AozKw) required**:
        /// <br/>Permission to access the Confluence site ('Can use' global permission).
        /// <br/>Permission to view the folder and its corresponding space
        /// </remarks>
        /// <param name="id">The ID of the folder.</param>
        /// <param name="limit">Maximum number of items per result to return. If more results exist, call the endpoint with the highest ancestor's ID to fetch the next set of results.</param>
        /// <returns>Returned if the requested ancestors are returned.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Response63> GetFolderAncestorsAsync(long id, int? limit, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Get version details for page version
        /// </summary>
        /// <remarks>
        /// Retrieves version details for the specified page and version number.
        /// <br/>
        /// <br/>**[Permissions](https://confluence.atlassian.com/x/_AozKw) required**:
        /// <br/>Permission to view the page.
        /// </remarks>
        /// <param name="page_id">The ID of the page for which version details should be returned.</param>
        /// <param name="version_number">The version number of the page to be returned.</param>
        /// <returns>Returned if the requested version details are successfully retrieved.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<DetailedVersion> GetPageVersionDetailsAsync(long page_id, long version_number);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get version details for page version
        /// </summary>
        /// <remarks>
        /// Retrieves version details for the specified page and version number.
        /// <br/>
        /// <br/>**[Permissions](https://confluence.atlassian.com/x/_AozKw) required**:
        /// <br/>Permission to view the page.
        /// </remarks>
        /// <param name="page_id">The ID of the page for which version details should be returned.</param>
        /// <param name="version_number">The version number of the page to be returned.</param>
        /// <returns>Returned if the requested version details are successfully retrieved.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<DetailedVersion> GetPageVersionDetailsAsync(long page_id, long version_number, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Get custom content versions
        /// </summary>
        /// <remarks>
        /// Returns the versions of specific custom content.
        /// <br/>
        /// <br/>**[Permissions](https://confluence.atlassian.com/x/_AozKw) required**:
        /// <br/>Permission to view the custom content and its corresponding page and space.
        /// </remarks>
        /// <param name="custom_content_id">The ID of the custom content to be queried for its versions. If you don't know the custom content ID, use Get custom-content by type and filter the results.</param>
        /// <param name="body_format">The content format types to be returned in the `body` field of the response. If available, the representation will be available under a response field of the same name under the `body` field.
        /// <br/>
        /// <br/>Note: If the custom content body type is `storage`, the `storage` and `atlas_doc_format` body formats are able to be returned. If the custom content body type is `raw`, only the `raw` body format is able to be returned.</param>
        /// <param name="cursor">Used for pagination, this opaque cursor will be returned in the `next` URL in the `Link` response header. Use the relative URL in the `Link` header to retrieve the `next` set of results.</param>
        /// <param name="limit">Maximum number of versions per result to return. If more results exist, use the `Link` header to retrieve a relative URL that will return the next set of results.</param>
        /// <param name="sort">Used to sort the result by a particular field.</param>
        /// <returns>Returned if the requested custom content versions are returned.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Response64> GetCustomContentVersionsAsync(long custom_content_id, CustomContentBodyRepresentation? body_format, string cursor, int? limit, VersionSortOrder? sort);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get custom content versions
        /// </summary>
        /// <remarks>
        /// Returns the versions of specific custom content.
        /// <br/>
        /// <br/>**[Permissions](https://confluence.atlassian.com/x/_AozKw) required**:
        /// <br/>Permission to view the custom content and its corresponding page and space.
        /// </remarks>
        /// <param name="custom_content_id">The ID of the custom content to be queried for its versions. If you don't know the custom content ID, use Get custom-content by type and filter the results.</param>
        /// <param name="body_format">The content format types to be returned in the `body` field of the response. If available, the representation will be available under a response field of the same name under the `body` field.
        /// <br/>
        /// <br/>Note: If the custom content body type is `storage`, the `storage` and `atlas_doc_format` body formats are able to be returned. If the custom content body type is `raw`, only the `raw` body format is able to be returned.</param>
        /// <param name="cursor">Used for pagination, this opaque cursor will be returned in the `next` URL in the `Link` response header. Use the relative URL in the `Link` header to retrieve the `next` set of results.</param>
        /// <param name="limit">Maximum number of versions per result to return. If more results exist, use the `Link` header to retrieve a relative URL that will return the next set of results.</param>
        /// <param name="sort">Used to sort the result by a particular field.</param>
        /// <returns>Returned if the requested custom content versions are returned.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Response64> GetCustomContentVersionsAsync(long custom_content_id, CustomContentBodyRepresentation? body_format, string cursor, int? limit, VersionSortOrder? sort, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Get version details for custom content version
        /// </summary>
        /// <remarks>
        /// Retrieves version details for the specified custom content and version number.
        /// <br/>
        /// <br/>**[Permissions](https://confluence.atlassian.com/x/_AozKw) required**:
        /// <br/>Permission to view the page.
        /// </remarks>
        /// <param name="custom_content_id">The ID of the custom content for which version details should be returned.</param>
        /// <param name="version_number">The version number of the custom content to be returned.</param>
        /// <returns>Returned if the requested version details are successfully retrieved.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<DetailedVersion> GetCustomContentVersionDetailsAsync(long custom_content_id, long version_number);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get version details for custom content version
        /// </summary>
        /// <remarks>
        /// Retrieves version details for the specified custom content and version number.
        /// <br/>
        /// <br/>**[Permissions](https://confluence.atlassian.com/x/_AozKw) required**:
        /// <br/>Permission to view the page.
        /// </remarks>
        /// <param name="custom_content_id">The ID of the custom content for which version details should be returned.</param>
        /// <param name="version_number">The version number of the custom content to be returned.</param>
        /// <returns>Returned if the requested version details are successfully retrieved.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<DetailedVersion> GetCustomContentVersionDetailsAsync(long custom_content_id, long version_number, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Get spaces
        /// </summary>
        /// <remarks>
        /// Returns all spaces. The results will be sorted by id ascending. The number of results is limited by the `limit` parameter and
        /// <br/>additional results (if available) will be available through the `next` URL present in the `Link` response header.
        /// <br/>
        /// <br/>**[Permissions](https://confluence.atlassian.com/x/_AozKw) required**:
        /// <br/>Permission to access the Confluence site ('Can use' global permission).
        /// <br/>Only spaces that the user has permission to view will be returned.
        /// </remarks>
        /// <param name="ids">Filter the results to spaces based on their IDs. Multiple IDs can be specified as a comma-separated list.</param>
        /// <param name="keys">Filter the results to spaces based on their keys. Multiple keys can be specified as a comma-separated list.</param>
        /// <param name="type">Filter the results to spaces based on their type.</param>
        /// <param name="status">Filter the results to spaces based on their status.</param>
        /// <param name="labels">Filter the results to spaces based on their labels. Multiple labels can be specified as a comma-separated list.</param>
        /// <param name="favorited_by">Filter the results to spaces favorited by the user with the specified account ID.</param>
        /// <param name="not_favorited_by">Filter the results to spaces NOT favorited by the user with the specified account ID.</param>
        /// <param name="sort">Used to sort the result by a particular field.</param>
        /// <param name="description_format">The content format type to be returned in the `description` field of the response. If available, the representation will be available under a response field of the same name under the `description` field.</param>
        /// <param name="include_icon">If the icon for the space should be fetched or not.</param>
        /// <param name="cursor">Used for pagination, this opaque cursor will be returned in the `next` URL in the `Link` response header. Use the relative URL in the `Link` header to retrieve the `next` set of results.</param>
        /// <param name="limit">Maximum number of spaces per result to return. If more results exist, use the `Link` response header to retrieve a relative URL that will return the next set of results.</param>
        /// <returns>Returned if the requested spaces are returned.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Response65> GetSpacesAsync(System.Collections.Generic.IEnumerable<long> ids, System.Collections.Generic.IEnumerable<string> keys, ConfluenceType? type, Status? status, System.Collections.Generic.IEnumerable<string> labels, string favorited_by, string not_favorited_by, SpaceSortOrder? sort, SpaceDescriptionBodyRepresentation? description_format, bool? include_icon, string cursor, int? limit);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get spaces
        /// </summary>
        /// <remarks>
        /// Returns all spaces. The results will be sorted by id ascending. The number of results is limited by the `limit` parameter and
        /// <br/>additional results (if available) will be available through the `next` URL present in the `Link` response header.
        /// <br/>
        /// <br/>**[Permissions](https://confluence.atlassian.com/x/_AozKw) required**:
        /// <br/>Permission to access the Confluence site ('Can use' global permission).
        /// <br/>Only spaces that the user has permission to view will be returned.
        /// </remarks>
        /// <param name="ids">Filter the results to spaces based on their IDs. Multiple IDs can be specified as a comma-separated list.</param>
        /// <param name="keys">Filter the results to spaces based on their keys. Multiple keys can be specified as a comma-separated list.</param>
        /// <param name="type">Filter the results to spaces based on their type.</param>
        /// <param name="status">Filter the results to spaces based on their status.</param>
        /// <param name="labels">Filter the results to spaces based on their labels. Multiple labels can be specified as a comma-separated list.</param>
        /// <param name="favorited_by">Filter the results to spaces favorited by the user with the specified account ID.</param>
        /// <param name="not_favorited_by">Filter the results to spaces NOT favorited by the user with the specified account ID.</param>
        /// <param name="sort">Used to sort the result by a particular field.</param>
        /// <param name="description_format">The content format type to be returned in the `description` field of the response. If available, the representation will be available under a response field of the same name under the `description` field.</param>
        /// <param name="include_icon">If the icon for the space should be fetched or not.</param>
        /// <param name="cursor">Used for pagination, this opaque cursor will be returned in the `next` URL in the `Link` response header. Use the relative URL in the `Link` header to retrieve the `next` set of results.</param>
        /// <param name="limit">Maximum number of spaces per result to return. If more results exist, use the `Link` response header to retrieve a relative URL that will return the next set of results.</param>
        /// <returns>Returned if the requested spaces are returned.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Response65> GetSpacesAsync(System.Collections.Generic.IEnumerable<long> ids, System.Collections.Generic.IEnumerable<string> keys, ConfluenceType? type, Status? status, System.Collections.Generic.IEnumerable<string> labels, string favorited_by, string not_favorited_by, SpaceSortOrder? sort, SpaceDescriptionBodyRepresentation? description_format, bool? include_icon, string cursor, int? limit, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Create space
        /// </summary>
        /// <remarks>
        /// Creates a Space as specified in the payload.
        /// <br/>
        /// <br/>**[Permissions](https://confluence.atlassian.com/x/_AozKw) required**:
        /// <br/>Permission to create spaces.
        /// </remarks>
        /// <returns>Returned if the requested space is created.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Response66> CreateSpaceAsync(object body);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Create space
        /// </summary>
        /// <remarks>
        /// Creates a Space as specified in the payload.
        /// <br/>
        /// <br/>**[Permissions](https://confluence.atlassian.com/x/_AozKw) required**:
        /// <br/>Permission to create spaces.
        /// </remarks>
        /// <returns>Returned if the requested space is created.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Response66> CreateSpaceAsync(object body, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Get space by id
        /// </summary>
        /// <remarks>
        /// Returns a specific space.
        /// <br/>
        /// <br/>**[Permissions](https://confluence.atlassian.com/x/_AozKw) required**:
        /// <br/>Permission to view the space.
        /// </remarks>
        /// <param name="id">The ID of the space to be returned.</param>
        /// <param name="description_format">The content format type to be returned in the `description` field of the response. If available, the representation will be available under a response field of the same name under the `description` field.</param>
        /// <param name="include_icon">If the icon for the space should be fetched or not.</param>
        /// <param name="include_operations">Includes operations associated with this space in the response, as defined in the `Operation` object.
        /// <br/>The number of results will be limited to 50 and sorted in the default sort order.
        /// <br/>A `meta` and `_links` property will be present to indicate if more results are available and a link to retrieve the rest of the results.</param>
        /// <param name="include_properties">Includes space properties associated with this space in the response.
        /// <br/>The number of results will be limited to 50 and sorted in the default sort order.
        /// <br/>A `meta` and `_links` property will be present to indicate if more results are available and a link to retrieve the rest of the results.</param>
        /// <param name="include_permissions">Includes space permissions associated with this space in the response.
        /// <br/>The number of results will be limited to 50 and sorted in the default sort order.
        /// <br/>A `meta` and `_links` property will be present to indicate if more results are available and a link to retrieve the rest of the results.</param>
        /// <param name="include_role_assignments">Includes role assignments associated with this space in the response. This parameter is only accepted for EAP sites.
        /// <br/>The number of results will be limited to 50 and sorted in the default sort order.
        /// <br/>A `meta` and `_links` property will be present to indicate if more results are available and a link to retrieve the rest of the results.</param>
        /// <param name="include_labels">Includes labels associated with this space in the response.
        /// <br/>The number of results will be limited to 50 and sorted in the default sort order.
        /// <br/>A `meta` and `_links` property will be present to indicate if more results are available and a link to retrieve the rest of the results.</param>
        /// <returns>Returned if the requested space is returned.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Response67> GetSpaceByIdAsync(long id, SpaceDescriptionBodyRepresentation? description_format, bool? include_icon, bool? include_operations, bool? include_properties, bool? include_permissions, bool? include_role_assignments, bool? include_labels);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get space by id
        /// </summary>
        /// <remarks>
        /// Returns a specific space.
        /// <br/>
        /// <br/>**[Permissions](https://confluence.atlassian.com/x/_AozKw) required**:
        /// <br/>Permission to view the space.
        /// </remarks>
        /// <param name="id">The ID of the space to be returned.</param>
        /// <param name="description_format">The content format type to be returned in the `description` field of the response. If available, the representation will be available under a response field of the same name under the `description` field.</param>
        /// <param name="include_icon">If the icon for the space should be fetched or not.</param>
        /// <param name="include_operations">Includes operations associated with this space in the response, as defined in the `Operation` object.
        /// <br/>The number of results will be limited to 50 and sorted in the default sort order.
        /// <br/>A `meta` and `_links` property will be present to indicate if more results are available and a link to retrieve the rest of the results.</param>
        /// <param name="include_properties">Includes space properties associated with this space in the response.
        /// <br/>The number of results will be limited to 50 and sorted in the default sort order.
        /// <br/>A `meta` and `_links` property will be present to indicate if more results are available and a link to retrieve the rest of the results.</param>
        /// <param name="include_permissions">Includes space permissions associated with this space in the response.
        /// <br/>The number of results will be limited to 50 and sorted in the default sort order.
        /// <br/>A `meta` and `_links` property will be present to indicate if more results are available and a link to retrieve the rest of the results.</param>
        /// <param name="include_role_assignments">Includes role assignments associated with this space in the response. This parameter is only accepted for EAP sites.
        /// <br/>The number of results will be limited to 50 and sorted in the default sort order.
        /// <br/>A `meta` and `_links` property will be present to indicate if more results are available and a link to retrieve the rest of the results.</param>
        /// <param name="include_labels">Includes labels associated with this space in the response.
        /// <br/>The number of results will be limited to 50 and sorted in the default sort order.
        /// <br/>A `meta` and `_links` property will be present to indicate if more results are available and a link to retrieve the rest of the results.</param>
        /// <returns>Returned if the requested space is returned.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Response67> GetSpaceByIdAsync(long id, SpaceDescriptionBodyRepresentation? description_format, bool? include_icon, bool? include_operations, bool? include_properties, bool? include_permissions, bool? include_role_assignments, bool? include_labels, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Get blog posts in space
        /// </summary>
        /// <remarks>
        /// Returns all blog posts in a space. The number of results is limited by the `limit` parameter and additional results (if available)
        /// <br/>will be available through the `next` URL present in the `Link` response header.
        /// <br/>
        /// <br/>**[Permissions](https://confluence.atlassian.com/x/_AozKw) required**:
        /// <br/>Permission to access the Confluence site ('Can use' global permission) and view the space.
        /// <br/>Only blog posts that the user has permission to view will be returned.
        /// </remarks>
        /// <param name="id">The ID of the space for which blog posts should be returned.</param>
        /// <param name="sort">Used to sort the result by a particular field.</param>
        /// <param name="status">Filter the results to blog posts based on their status. By default, `current` is used.</param>
        /// <param name="title">Filter the results to blog posts based on their title.</param>
        /// <param name="body_format">The content format types to be returned in the `body` field of the response. If available, the representation will be available under a response field of the same name under the `body` field.</param>
        /// <param name="cursor">Used for pagination, this opaque cursor will be returned in the `next` URL in the `Link` response header. Use the relative URL in the `Link` header to retrieve the `next` set of results.</param>
        /// <param name="limit">Maximum number of blog posts per result to return. If more results exist, use the `Link` header to retrieve a relative URL that will return the next set of results.</param>
        /// <returns>Returned if the requested blog posts are returned.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Response68> GetBlogPostsInSpaceAsync(long id, BlogPostSortOrder? sort, System.Collections.Generic.IEnumerable<Anonymous9> status, string title, PrimaryBodyRepresentation? body_format, string cursor, int? limit);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get blog posts in space
        /// </summary>
        /// <remarks>
        /// Returns all blog posts in a space. The number of results is limited by the `limit` parameter and additional results (if available)
        /// <br/>will be available through the `next` URL present in the `Link` response header.
        /// <br/>
        /// <br/>**[Permissions](https://confluence.atlassian.com/x/_AozKw) required**:
        /// <br/>Permission to access the Confluence site ('Can use' global permission) and view the space.
        /// <br/>Only blog posts that the user has permission to view will be returned.
        /// </remarks>
        /// <param name="id">The ID of the space for which blog posts should be returned.</param>
        /// <param name="sort">Used to sort the result by a particular field.</param>
        /// <param name="status">Filter the results to blog posts based on their status. By default, `current` is used.</param>
        /// <param name="title">Filter the results to blog posts based on their title.</param>
        /// <param name="body_format">The content format types to be returned in the `body` field of the response. If available, the representation will be available under a response field of the same name under the `body` field.</param>
        /// <param name="cursor">Used for pagination, this opaque cursor will be returned in the `next` URL in the `Link` response header. Use the relative URL in the `Link` header to retrieve the `next` set of results.</param>
        /// <param name="limit">Maximum number of blog posts per result to return. If more results exist, use the `Link` header to retrieve a relative URL that will return the next set of results.</param>
        /// <returns>Returned if the requested blog posts are returned.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Response68> GetBlogPostsInSpaceAsync(long id, BlogPostSortOrder? sort, System.Collections.Generic.IEnumerable<Anonymous9> status, string title, PrimaryBodyRepresentation? body_format, string cursor, int? limit, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Get labels for space
        /// </summary>
        /// <remarks>
        /// Returns the labels of specific space. The number of results is limited by the `limit` parameter and additional results (if available)
        /// <br/>will be available through the `next` URL present in the `Link` response header.
        /// <br/>
        /// <br/>**[Permissions](https://confluence.atlassian.com/x/_AozKw) required**:
        /// <br/>Permission to view the space.
        /// <br/>Only labels that the user has permission to view will be returned.
        /// </remarks>
        /// <param name="id">The ID of the space for which labels should be returned.</param>
        /// <param name="prefix">Filter the results to labels based on their prefix.</param>
        /// <param name="sort">Used to sort the result by a particular field.</param>
        /// <param name="cursor">Used for pagination, this opaque cursor will be returned in the `next` URL in the `Link` response header. Use the relative URL in the `Link` header to retrieve the `next` set of results.</param>
        /// <param name="limit">Maximum number of labels per result to return. If more results exist, use the `Link` header to retrieve a relative URL that will return the next set of results.</param>
        /// <returns>Returned if the requested labels are returned.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Response69> GetSpaceLabelsAsync(long id, Prefix5? prefix, string sort, string cursor, int? limit);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get labels for space
        /// </summary>
        /// <remarks>
        /// Returns the labels of specific space. The number of results is limited by the `limit` parameter and additional results (if available)
        /// <br/>will be available through the `next` URL present in the `Link` response header.
        /// <br/>
        /// <br/>**[Permissions](https://confluence.atlassian.com/x/_AozKw) required**:
        /// <br/>Permission to view the space.
        /// <br/>Only labels that the user has permission to view will be returned.
        /// </remarks>
        /// <param name="id">The ID of the space for which labels should be returned.</param>
        /// <param name="prefix">Filter the results to labels based on their prefix.</param>
        /// <param name="sort">Used to sort the result by a particular field.</param>
        /// <param name="cursor">Used for pagination, this opaque cursor will be returned in the `next` URL in the `Link` response header. Use the relative URL in the `Link` header to retrieve the `next` set of results.</param>
        /// <param name="limit">Maximum number of labels per result to return. If more results exist, use the `Link` header to retrieve a relative URL that will return the next set of results.</param>
        /// <returns>Returned if the requested labels are returned.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Response69> GetSpaceLabelsAsync(long id, Prefix5? prefix, string sort, string cursor, int? limit, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Get labels for space content
        /// </summary>
        /// <remarks>
        /// Returns the labels of space content (pages, blogposts etc). The number of results is limited by the `limit` parameter and additional results (if available)
        /// <br/>will be available through the `next` URL present in the `Link` response header.
        /// <br/>
        /// <br/>**[Permissions](https://confluence.atlassian.com/x/_AozKw) required**:
        /// <br/>Permission to view the space.
        /// <br/>Only labels that the user has permission to view will be returned.
        /// </remarks>
        /// <param name="id">The ID of the space for which labels should be returned.</param>
        /// <param name="prefix">Filter the results to labels based on their prefix.</param>
        /// <param name="sort">Used to sort the result by a particular field.</param>
        /// <param name="cursor">Used for pagination, this opaque cursor will be returned in the `next` URL in the `Link` response header. Use the relative URL in the `Link` header to retrieve the `next` set of results.</param>
        /// <param name="limit">Maximum number of labels per result to return. If more results exist, use the `Link` header to retrieve a relative URL that will return the next set of results.</param>
        /// <returns>Returned if the requested labels are returned.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Response70> GetSpaceContentLabelsAsync(long id, Prefix6? prefix, string sort, string cursor, int? limit);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get labels for space content
        /// </summary>
        /// <remarks>
        /// Returns the labels of space content (pages, blogposts etc). The number of results is limited by the `limit` parameter and additional results (if available)
        /// <br/>will be available through the `next` URL present in the `Link` response header.
        /// <br/>
        /// <br/>**[Permissions](https://confluence.atlassian.com/x/_AozKw) required**:
        /// <br/>Permission to view the space.
        /// <br/>Only labels that the user has permission to view will be returned.
        /// </remarks>
        /// <param name="id">The ID of the space for which labels should be returned.</param>
        /// <param name="prefix">Filter the results to labels based on their prefix.</param>
        /// <param name="sort">Used to sort the result by a particular field.</param>
        /// <param name="cursor">Used for pagination, this opaque cursor will be returned in the `next` URL in the `Link` response header. Use the relative URL in the `Link` header to retrieve the `next` set of results.</param>
        /// <param name="limit">Maximum number of labels per result to return. If more results exist, use the `Link` header to retrieve a relative URL that will return the next set of results.</param>
        /// <returns>Returned if the requested labels are returned.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Response70> GetSpaceContentLabelsAsync(long id, Prefix6? prefix, string sort, string cursor, int? limit, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Get custom content by type in space
        /// </summary>
        /// <remarks>
        /// Returns all custom content for a given type within a given space. The number of results is limited by the `limit` parameter and additional results (if available)
        /// <br/>will be available through the `next` URL present in the `Link` response header.
        /// <br/>
        /// <br/>**[Permissions](https://confluence.atlassian.com/x/_AozKw) required**:
        /// <br/>Permission to view the custom content and the corresponding space.
        /// </remarks>
        /// <param name="id">The ID of the space for which custom content should be returned.</param>
        /// <param name="type">The type of custom content being requested. See: https://developer.atlassian.com/cloud/confluence/custom-content/ for additional details on custom content.</param>
        /// <param name="cursor">Used for pagination, this opaque cursor will be returned in the `next` URL in the `Link` response header. Use the relative URL in the `Link` header to retrieve the `next` set of results.</param>
        /// <param name="limit">Maximum number of pages per result to return. If more results exist, use the `Link` header to retrieve a relative URL that will return the next set of results.</param>
        /// <param name="body_format">The content format types to be returned in the `body` field of the response. If available, the representation will be available under a response field of the same name under the `body` field.
        /// <br/>
        /// <br/>Note: If the custom content body type is `storage`, the `storage` and `atlas_doc_format` body formats are able to be returned. If the custom content body type is `raw`, only the `raw` body format is able to be returned.</param>
        /// <returns>Returned if the requested custom content is returned.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Response71> GetCustomContentByTypeInSpaceAsync(long id, string type, string cursor, int? limit, CustomContentBodyRepresentation? body_format);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get custom content by type in space
        /// </summary>
        /// <remarks>
        /// Returns all custom content for a given type within a given space. The number of results is limited by the `limit` parameter and additional results (if available)
        /// <br/>will be available through the `next` URL present in the `Link` response header.
        /// <br/>
        /// <br/>**[Permissions](https://confluence.atlassian.com/x/_AozKw) required**:
        /// <br/>Permission to view the custom content and the corresponding space.
        /// </remarks>
        /// <param name="id">The ID of the space for which custom content should be returned.</param>
        /// <param name="type">The type of custom content being requested. See: https://developer.atlassian.com/cloud/confluence/custom-content/ for additional details on custom content.</param>
        /// <param name="cursor">Used for pagination, this opaque cursor will be returned in the `next` URL in the `Link` response header. Use the relative URL in the `Link` header to retrieve the `next` set of results.</param>
        /// <param name="limit">Maximum number of pages per result to return. If more results exist, use the `Link` header to retrieve a relative URL that will return the next set of results.</param>
        /// <param name="body_format">The content format types to be returned in the `body` field of the response. If available, the representation will be available under a response field of the same name under the `body` field.
        /// <br/>
        /// <br/>Note: If the custom content body type is `storage`, the `storage` and `atlas_doc_format` body formats are able to be returned. If the custom content body type is `raw`, only the `raw` body format is able to be returned.</param>
        /// <returns>Returned if the requested custom content is returned.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Response71> GetCustomContentByTypeInSpaceAsync(long id, string type, string cursor, int? limit, CustomContentBodyRepresentation? body_format, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Get permitted operations for space
        /// </summary>
        /// <remarks>
        /// Returns the permitted operations on specific space.
        /// <br/>
        /// <br/>**[Permissions](https://confluence.atlassian.com/x/_AozKw) required**:
        /// <br/>Permission to view the corresponding space.
        /// </remarks>
        /// <param name="id">The ID of the space for which operations should be returned.</param>
        /// <returns>Returned if the requested operations are returned.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<PermittedOperationsResponse> GetSpaceOperationsAsync(long id);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get permitted operations for space
        /// </summary>
        /// <remarks>
        /// Returns the permitted operations on specific space.
        /// <br/>
        /// <br/>**[Permissions](https://confluence.atlassian.com/x/_AozKw) required**:
        /// <br/>Permission to view the corresponding space.
        /// </remarks>
        /// <param name="id">The ID of the space for which operations should be returned.</param>
        /// <returns>Returned if the requested operations are returned.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<PermittedOperationsResponse> GetSpaceOperationsAsync(long id, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Get pages in space
        /// </summary>
        /// <remarks>
        /// Returns all pages in a space. The number of results is limited by the `limit` parameter and additional results (if available)
        /// <br/>will be available through the `next` URL present in the `Link` response header.
        /// <br/>
        /// <br/>**[Permissions](https://confluence.atlassian.com/x/_AozKw) required**:
        /// <br/>Permission to access the Confluence site ('Can use' global permission) and 'View' permission for the space.
        /// <br/>Only pages that the user has permission to view will be returned.
        /// </remarks>
        /// <param name="id">The ID of the space for which pages should be returned.</param>
        /// <param name="depth">Filter the results to pages at the root level of the space or to all pages in the space.</param>
        /// <param name="sort">Used to sort the result by a particular field.</param>
        /// <param name="status">Filter the results to pages based on their status. By default, `current` and `archived` are used.</param>
        /// <param name="title">Filter the results to pages based on their title.</param>
        /// <param name="body_format">The content format types to be returned in the `body` field of the response. If available, the representation will be available under a response field of the same name under the `body` field.</param>
        /// <param name="cursor">Used for pagination, this opaque cursor will be returned in the `next` URL in the `Link` response header. Use the relative URL in the `Link` header to retrieve the `next` set of results.</param>
        /// <param name="limit">Maximum number of pages per result to return. If more results exist, use the `Link` header to retrieve a relative URL that will return the next set of results.</param>
        /// <returns>Returned if the requested pages are returned.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Response72> GetPagesInSpaceAsync(long id, Depth? depth, PageSortOrder? sort, System.Collections.Generic.IEnumerable<Anonymous10> status, string title, PrimaryBodyRepresentation? body_format, string cursor, int? limit);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get pages in space
        /// </summary>
        /// <remarks>
        /// Returns all pages in a space. The number of results is limited by the `limit` parameter and additional results (if available)
        /// <br/>will be available through the `next` URL present in the `Link` response header.
        /// <br/>
        /// <br/>**[Permissions](https://confluence.atlassian.com/x/_AozKw) required**:
        /// <br/>Permission to access the Confluence site ('Can use' global permission) and 'View' permission for the space.
        /// <br/>Only pages that the user has permission to view will be returned.
        /// </remarks>
        /// <param name="id">The ID of the space for which pages should be returned.</param>
        /// <param name="depth">Filter the results to pages at the root level of the space or to all pages in the space.</param>
        /// <param name="sort">Used to sort the result by a particular field.</param>
        /// <param name="status">Filter the results to pages based on their status. By default, `current` and `archived` are used.</param>
        /// <param name="title">Filter the results to pages based on their title.</param>
        /// <param name="body_format">The content format types to be returned in the `body` field of the response. If available, the representation will be available under a response field of the same name under the `body` field.</param>
        /// <param name="cursor">Used for pagination, this opaque cursor will be returned in the `next` URL in the `Link` response header. Use the relative URL in the `Link` header to retrieve the `next` set of results.</param>
        /// <param name="limit">Maximum number of pages per result to return. If more results exist, use the `Link` header to retrieve a relative URL that will return the next set of results.</param>
        /// <returns>Returned if the requested pages are returned.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Response72> GetPagesInSpaceAsync(long id, Depth? depth, PageSortOrder? sort, System.Collections.Generic.IEnumerable<Anonymous10> status, string title, PrimaryBodyRepresentation? body_format, string cursor, int? limit, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Get space properties in space
        /// </summary>
        /// <remarks>
        /// Returns all properties for the given space. Space properties are a key-value storage associated with a space.
        /// <br/>The limit parameter specifies the maximum number of results returned in a single response. Use the `link` response header
        /// <br/>to paginate through additional results.
        /// <br/>
        /// <br/>**[Permissions](https://confluence.atlassian.com/x/_AozKw) required**:
        /// <br/>Permission to access the Confluence site ('Can use' global permission) and 'View' permission for the space.
        /// </remarks>
        /// <param name="space_id">The ID of the space for which space properties should be returned.</param>
        /// <param name="key">The key of the space property to retrieve. This should be used when a user knows the key of their property, but needs to retrieve the id for use in other methods.</param>
        /// <param name="cursor">Used for pagination, this opaque cursor will be returned in the `next` URL in the `Link` response header. Use the relative URL in the `Link` header to retrieve the `next` set of results.</param>
        /// <param name="limit">Maximum number of pages per result to return. If more results exist, use the `Link` header to retrieve a relative URL that will return the next set of results.</param>
        /// <returns>Returned if the requested space properties are returned. `results` may be empty if no results were found.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Response73> GetSpacePropertiesAsync(long space_id, string key, string cursor, int? limit);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get space properties in space
        /// </summary>
        /// <remarks>
        /// Returns all properties for the given space. Space properties are a key-value storage associated with a space.
        /// <br/>The limit parameter specifies the maximum number of results returned in a single response. Use the `link` response header
        /// <br/>to paginate through additional results.
        /// <br/>
        /// <br/>**[Permissions](https://confluence.atlassian.com/x/_AozKw) required**:
        /// <br/>Permission to access the Confluence site ('Can use' global permission) and 'View' permission for the space.
        /// </remarks>
        /// <param name="space_id">The ID of the space for which space properties should be returned.</param>
        /// <param name="key">The key of the space property to retrieve. This should be used when a user knows the key of their property, but needs to retrieve the id for use in other methods.</param>
        /// <param name="cursor">Used for pagination, this opaque cursor will be returned in the `next` URL in the `Link` response header. Use the relative URL in the `Link` header to retrieve the `next` set of results.</param>
        /// <param name="limit">Maximum number of pages per result to return. If more results exist, use the `Link` header to retrieve a relative URL that will return the next set of results.</param>
        /// <returns>Returned if the requested space properties are returned. `results` may be empty if no results were found.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Response73> GetSpacePropertiesAsync(long space_id, string key, string cursor, int? limit, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Create space property in space
        /// </summary>
        /// <remarks>
        /// Creates a new space property.
        /// <br/>
        /// <br/>**[Permissions](https://confluence.atlassian.com/x/_AozKw) required**:
        /// <br/>Permission to access the Confluence site ('Can use' global permission) and 'Admin' permission for the space.
        /// </remarks>
        /// <param name="space_id">The ID of the space for which space properties should be returned.</param>
        /// <param name="body">The space property to be created</param>
        /// <returns>Returned if the space property was created successfully.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<SpaceProperty> CreateSpacePropertyAsync(long space_id, SpacePropertyCreateRequest body);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Create space property in space
        /// </summary>
        /// <remarks>
        /// Creates a new space property.
        /// <br/>
        /// <br/>**[Permissions](https://confluence.atlassian.com/x/_AozKw) required**:
        /// <br/>Permission to access the Confluence site ('Can use' global permission) and 'Admin' permission for the space.
        /// </remarks>
        /// <param name="space_id">The ID of the space for which space properties should be returned.</param>
        /// <param name="body">The space property to be created</param>
        /// <returns>Returned if the space property was created successfully.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<SpaceProperty> CreateSpacePropertyAsync(long space_id, SpacePropertyCreateRequest body, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Get space property by id
        /// </summary>
        /// <remarks>
        /// Retrieve a space property by its id. 
        /// <br/>
        /// <br/>**[Permissions](https://confluence.atlassian.com/x/_AozKw) required**:
        /// <br/>Permission to access the Confluence site ('Can use' global permission) and 'View' permission for the space.
        /// </remarks>
        /// <param name="space_id">The ID of the space the property belongs to.</param>
        /// <param name="property_id">The ID of the property to be retrieved.</param>
        /// <returns>Returned if the space property was retrieved.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<SpaceProperty> GetSpacePropertyByIdAsync(long space_id, long property_id);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get space property by id
        /// </summary>
        /// <remarks>
        /// Retrieve a space property by its id. 
        /// <br/>
        /// <br/>**[Permissions](https://confluence.atlassian.com/x/_AozKw) required**:
        /// <br/>Permission to access the Confluence site ('Can use' global permission) and 'View' permission for the space.
        /// </remarks>
        /// <param name="space_id">The ID of the space the property belongs to.</param>
        /// <param name="property_id">The ID of the property to be retrieved.</param>
        /// <returns>Returned if the space property was retrieved.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<SpaceProperty> GetSpacePropertyByIdAsync(long space_id, long property_id, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Update space property by id
        /// </summary>
        /// <remarks>
        /// Update a space property by its id. 
        /// <br/>
        /// <br/>**[Permissions](https://confluence.atlassian.com/x/_AozKw) required**:
        /// <br/>Permission to access the Confluence site ('Can use' global permission) and 'Admin' permission for the space.
        /// </remarks>
        /// <param name="space_id">The ID of the space the property belongs to.</param>
        /// <param name="property_id">The ID of the property to be updated.</param>
        /// <param name="body">The space property to be updated.</param>
        /// <returns>Returned if the space property was updated successfully.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<SpaceProperty> UpdateSpacePropertyByIdAsync(long space_id, long property_id, SpacePropertyUpdateRequest body);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Update space property by id
        /// </summary>
        /// <remarks>
        /// Update a space property by its id. 
        /// <br/>
        /// <br/>**[Permissions](https://confluence.atlassian.com/x/_AozKw) required**:
        /// <br/>Permission to access the Confluence site ('Can use' global permission) and 'Admin' permission for the space.
        /// </remarks>
        /// <param name="space_id">The ID of the space the property belongs to.</param>
        /// <param name="property_id">The ID of the property to be updated.</param>
        /// <param name="body">The space property to be updated.</param>
        /// <returns>Returned if the space property was updated successfully.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<SpaceProperty> UpdateSpacePropertyByIdAsync(long space_id, long property_id, SpacePropertyUpdateRequest body, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Delete space property by id
        /// </summary>
        /// <remarks>
        /// Deletes a space property by its id. 
        /// <br/>
        /// <br/>**[Permissions](https://confluence.atlassian.com/x/_AozKw) required**:
        /// <br/>Permission to access the Confluence site ('Can use' global permission) and 'Admin' permission for the space.
        /// </remarks>
        /// <param name="space_id">The ID of the space the property belongs to.</param>
        /// <param name="property_id">The ID of the property to be deleted.</param>
        /// <returns>Returned if the space property was deleted successfully.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task DeleteSpacePropertyByIdAsync(long space_id, long property_id);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Delete space property by id
        /// </summary>
        /// <remarks>
        /// Deletes a space property by its id. 
        /// <br/>
        /// <br/>**[Permissions](https://confluence.atlassian.com/x/_AozKw) required**:
        /// <br/>Permission to access the Confluence site ('Can use' global permission) and 'Admin' permission for the space.
        /// </remarks>
        /// <param name="space_id">The ID of the space the property belongs to.</param>
        /// <param name="property_id">The ID of the property to be deleted.</param>
        /// <returns>Returned if the space property was deleted successfully.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task DeleteSpacePropertyByIdAsync(long space_id, long property_id, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Get space permissions assignments
        /// </summary>
        /// <remarks>
        /// Returns space permission assignments for a specific space.
        /// <br/>
        /// <br/>**[Permissions](https://confluence.atlassian.com/x/_AozKw) required**:
        /// <br/>Permission to view the space.
        /// </remarks>
        /// <param name="id">The ID of the space to be returned.</param>
        /// <param name="cursor">Used for pagination, this opaque cursor will be returned in the `next` URL in the `Link` response header. Use the relative URL in the `Link` header to retrieve the `next` set of results.</param>
        /// <param name="limit">Maximum number of assignments to return. If more results exist, use the `Link` response header to retrieve a relative URL that will return the next set of results.</param>
        /// <returns>Returned if the requested assignments are returned.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Response74> GetSpacePermissionsAssignmentsAsync(long id, string cursor, int? limit);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get space permissions assignments
        /// </summary>
        /// <remarks>
        /// Returns space permission assignments for a specific space.
        /// <br/>
        /// <br/>**[Permissions](https://confluence.atlassian.com/x/_AozKw) required**:
        /// <br/>Permission to view the space.
        /// </remarks>
        /// <param name="id">The ID of the space to be returned.</param>
        /// <param name="cursor">Used for pagination, this opaque cursor will be returned in the `next` URL in the `Link` response header. Use the relative URL in the `Link` header to retrieve the `next` set of results.</param>
        /// <param name="limit">Maximum number of assignments to return. If more results exist, use the `Link` response header to retrieve a relative URL that will return the next set of results.</param>
        /// <returns>Returned if the requested assignments are returned.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Response74> GetSpacePermissionsAssignmentsAsync(long id, string cursor, int? limit, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Get available space permissions
        /// </summary>
        /// <remarks>
        /// Retrieves the available space permissions.
        /// <br/>
        /// <br/>**[Permissions](https://confluence.atlassian.com/x/_AozKw) required**:
        /// <br/>Permission to access the Confluence site.
        /// </remarks>
        /// <param name="cursor">Used for pagination, this opaque cursor will be returned in the `next` URL in the `Link` response header. Use the relative URL in the `Link` header to retrieve the `next` set of results.</param>
        /// <param name="limit">Maximum number of space permissions to return. If more results exist, use the `Link` response header to retrieve a relative URL that will return the next set of results.</param>
        /// <returns>Returned if the requested space permissions are retrieved.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Response75> GetAvailableSpacePermissionsAsync(string cursor, int? limit);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get available space permissions
        /// </summary>
        /// <remarks>
        /// Retrieves the available space permissions.
        /// <br/>
        /// <br/>**[Permissions](https://confluence.atlassian.com/x/_AozKw) required**:
        /// <br/>Permission to access the Confluence site.
        /// </remarks>
        /// <param name="cursor">Used for pagination, this opaque cursor will be returned in the `next` URL in the `Link` response header. Use the relative URL in the `Link` header to retrieve the `next` set of results.</param>
        /// <param name="limit">Maximum number of space permissions to return. If more results exist, use the `Link` response header to retrieve a relative URL that will return the next set of results.</param>
        /// <returns>Returned if the requested space permissions are retrieved.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Response75> GetAvailableSpacePermissionsAsync(string cursor, int? limit, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Get available space roles
        /// </summary>
        /// <remarks>
        /// Retrieves the available space roles.
        /// <br/>
        /// <br/>**[Permissions](https://confluence.atlassian.com/x/_AozKw) required**:
        /// <br/>Permission to access the Confluence site; if requesting a certain space's roles, permission to view the space.
        /// </remarks>
        /// <param name="space_id">The space ID for which to filter available space roles; if empty, return all available space roles for the tenant.</param>
        /// <param name="role_type">The space role type to filter results by.</param>
        /// <param name="principal_id">The principal ID to filter results by. If specified, a principal-type must also be specified. Paired with a `principal-type` of `ACCESS_CLASS`, valid values include [`anonymous-users`, `jsm-project-admins`, `authenticated-users`, `all-licensed-users`, `all-product-admins`]</param>
        /// <param name="principal_type">The principal type to filter results by. If specified, a principal-id must also be specified.</param>
        /// <param name="cursor">Used for pagination, this opaque cursor will be returned in the `next` URL in the `Link` response header. Use the relative URL in the `Link` header to retrieve the `next` set of results.</param>
        /// <param name="limit">Maximum number of space roles to return. If more results exist, use the `Link` response header to retrieve a relative URL that will return the next set of results.</param>
        /// <returns>Returned if the requested space roles are retrieved.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Response76> GetAvailableSpaceRolesAsync(string space_id, string role_type, string principal_id, PrincipalType? principal_type, string cursor, int? limit);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get available space roles
        /// </summary>
        /// <remarks>
        /// Retrieves the available space roles.
        /// <br/>
        /// <br/>**[Permissions](https://confluence.atlassian.com/x/_AozKw) required**:
        /// <br/>Permission to access the Confluence site; if requesting a certain space's roles, permission to view the space.
        /// </remarks>
        /// <param name="space_id">The space ID for which to filter available space roles; if empty, return all available space roles for the tenant.</param>
        /// <param name="role_type">The space role type to filter results by.</param>
        /// <param name="principal_id">The principal ID to filter results by. If specified, a principal-type must also be specified. Paired with a `principal-type` of `ACCESS_CLASS`, valid values include [`anonymous-users`, `jsm-project-admins`, `authenticated-users`, `all-licensed-users`, `all-product-admins`]</param>
        /// <param name="principal_type">The principal type to filter results by. If specified, a principal-id must also be specified.</param>
        /// <param name="cursor">Used for pagination, this opaque cursor will be returned in the `next` URL in the `Link` response header. Use the relative URL in the `Link` header to retrieve the `next` set of results.</param>
        /// <param name="limit">Maximum number of space roles to return. If more results exist, use the `Link` response header to retrieve a relative URL that will return the next set of results.</param>
        /// <returns>Returned if the requested space roles are retrieved.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Response76> GetAvailableSpaceRolesAsync(string space_id, string role_type, string principal_id, PrincipalType? principal_type, string cursor, int? limit, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Get space role by ID
        /// </summary>
        /// <remarks>
        /// Retrieves the space role by ID.
        /// <br/>
        /// <br/>**[Permissions](https://confluence.atlassian.com/x/_AozKw) required**:
        /// <br/>Permission to access the Confluence site.
        /// </remarks>
        /// <param name="id">The ID of the space role to retrieve.</param>
        /// <returns>Returned if the requested space role is retrieved.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Response77> GetSpaceRolesByIdAsync(int id);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get space role by ID
        /// </summary>
        /// <remarks>
        /// Retrieves the space role by ID.
        /// <br/>
        /// <br/>**[Permissions](https://confluence.atlassian.com/x/_AozKw) required**:
        /// <br/>Permission to access the Confluence site.
        /// </remarks>
        /// <param name="id">The ID of the space role to retrieve.</param>
        /// <returns>Returned if the requested space role is retrieved.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Response77> GetSpaceRolesByIdAsync(int id, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Get space role assignments
        /// </summary>
        /// <remarks>
        /// Retrieves the space role assignments.
        /// <br/>
        /// <br/>**[Permissions](https://confluence.atlassian.com/x/_AozKw) required**:
        /// <br/>Permission to view the space.
        /// </remarks>
        /// <param name="id">The ID of the space for which to retrieve assignments.</param>
        /// <param name="role_id">Filters the returned role assignments to the provided role ID.</param>
        /// <param name="role_type">Filters the returned role assignments to the provided role type.</param>
        /// <param name="principal_id">Filters the returned role assignments to the provided principal id. If specified, a principal-type must also be specified. Paired with a `principal-type` of `ACCESS_CLASS`, valid values include [`anonymous-users`, `jsm-project-admins`, `authenticated-users`, `all-licensed-users`, `all-product-admins`]</param>
        /// <param name="principal_type">Filters the returned role assignments to the provided principal type. If specified, a principal-id must also be specified.</param>
        /// <param name="cursor">Used for pagination, this opaque cursor will be returned in the `next` URL in the `Link` response header. Use the relative URL in the `Link` header to retrieve the `next` set of results.</param>
        /// <param name="limit">Maximum number of space roles to return. If more results exist, use the `Link` response header to retrieve a relative URL that will return the next set of results.</param>
        /// <returns>Returned if the requested space role assignments are retrieved.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Response78> GetSpaceRoleAssignmentsAsync(int id, string role_id, string role_type, string principal_id, PrincipalType? principal_type, string cursor, int? limit);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get space role assignments
        /// </summary>
        /// <remarks>
        /// Retrieves the space role assignments.
        /// <br/>
        /// <br/>**[Permissions](https://confluence.atlassian.com/x/_AozKw) required**:
        /// <br/>Permission to view the space.
        /// </remarks>
        /// <param name="id">The ID of the space for which to retrieve assignments.</param>
        /// <param name="role_id">Filters the returned role assignments to the provided role ID.</param>
        /// <param name="role_type">Filters the returned role assignments to the provided role type.</param>
        /// <param name="principal_id">Filters the returned role assignments to the provided principal id. If specified, a principal-type must also be specified. Paired with a `principal-type` of `ACCESS_CLASS`, valid values include [`anonymous-users`, `jsm-project-admins`, `authenticated-users`, `all-licensed-users`, `all-product-admins`]</param>
        /// <param name="principal_type">Filters the returned role assignments to the provided principal type. If specified, a principal-id must also be specified.</param>
        /// <param name="cursor">Used for pagination, this opaque cursor will be returned in the `next` URL in the `Link` response header. Use the relative URL in the `Link` header to retrieve the `next` set of results.</param>
        /// <param name="limit">Maximum number of space roles to return. If more results exist, use the `Link` response header to retrieve a relative URL that will return the next set of results.</param>
        /// <returns>Returned if the requested space role assignments are retrieved.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Response78> GetSpaceRoleAssignmentsAsync(int id, string role_id, string role_type, string principal_id, PrincipalType? principal_type, string cursor, int? limit, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Set space role assignments
        /// </summary>
        /// <remarks>
        /// Sets space role assignments as specified in the payload.
        /// <br/>
        /// <br/>**[Permissions](https://confluence.atlassian.com/x/_AozKw) required**:
        /// <br/>Permission to manage roles in the space.
        /// </remarks>
        /// <param name="id">The ID of the space for which to retrieve assignments.</param>
        /// <returns>Returned if the requested update to space role assignments succeeds in its entirety.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Response79> SetSpaceRoleAssignmentsAsync(int id, object body);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Set space role assignments
        /// </summary>
        /// <remarks>
        /// Sets space role assignments as specified in the payload.
        /// <br/>
        /// <br/>**[Permissions](https://confluence.atlassian.com/x/_AozKw) required**:
        /// <br/>Permission to manage roles in the space.
        /// </remarks>
        /// <param name="id">The ID of the space for which to retrieve assignments.</param>
        /// <returns>Returned if the requested update to space role assignments succeeds in its entirety.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Response79> SetSpaceRoleAssignmentsAsync(int id, object body, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Get footer comments for page
        /// </summary>
        /// <remarks>
        /// Returns the root footer comments of specific page. The number of results is limited by the `limit` parameter and additional results (if available)
        /// <br/>will be available through the `next` URL present in the `Link` response header.
        /// <br/>
        /// <br/>**[Permissions](https://confluence.atlassian.com/x/_AozKw) required**:
        /// <br/>Permission to view the content of the page and its corresponding space.
        /// </remarks>
        /// <param name="id">The ID of the page for which footer comments should be returned.</param>
        /// <param name="body_format">The content format type to be returned in the `body` field of the response. If available, the representation will be available under a response field of the same name under the `body` field.</param>
        /// <param name="status">Filter the footer comment being retrieved by its status.</param>
        /// <param name="sort">Used to sort the result by a particular field.</param>
        /// <param name="cursor">Used for pagination, this opaque cursor will be returned in the `next` URL in the `Link` response header. Use the relative URL in the `Link` header to retrieve the `next` set of results.</param>
        /// <param name="limit">Maximum number of footer comments per result to return. If more results exist, use the `Link` header to retrieve a relative URL that will return the next set of results.</param>
        /// <returns>Returned if the requested footer comments are returned.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Response80> GetPageFooterCommentsAsync(long id, PrimaryBodyRepresentation? body_format, System.Collections.Generic.IEnumerable<Anonymous11> status, CommentSortOrder? sort, string cursor, int? limit);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get footer comments for page
        /// </summary>
        /// <remarks>
        /// Returns the root footer comments of specific page. The number of results is limited by the `limit` parameter and additional results (if available)
        /// <br/>will be available through the `next` URL present in the `Link` response header.
        /// <br/>
        /// <br/>**[Permissions](https://confluence.atlassian.com/x/_AozKw) required**:
        /// <br/>Permission to view the content of the page and its corresponding space.
        /// </remarks>
        /// <param name="id">The ID of the page for which footer comments should be returned.</param>
        /// <param name="body_format">The content format type to be returned in the `body` field of the response. If available, the representation will be available under a response field of the same name under the `body` field.</param>
        /// <param name="status">Filter the footer comment being retrieved by its status.</param>
        /// <param name="sort">Used to sort the result by a particular field.</param>
        /// <param name="cursor">Used for pagination, this opaque cursor will be returned in the `next` URL in the `Link` response header. Use the relative URL in the `Link` header to retrieve the `next` set of results.</param>
        /// <param name="limit">Maximum number of footer comments per result to return. If more results exist, use the `Link` header to retrieve a relative URL that will return the next set of results.</param>
        /// <returns>Returned if the requested footer comments are returned.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Response80> GetPageFooterCommentsAsync(long id, PrimaryBodyRepresentation? body_format, System.Collections.Generic.IEnumerable<Anonymous11> status, CommentSortOrder? sort, string cursor, int? limit, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Get inline comments for page
        /// </summary>
        /// <remarks>
        /// Returns the root inline comments of specific page. The number of results is limited by the `limit` parameter and additional results (if available)
        /// <br/>will be available through the `next` URL present in the `Link` response header.
        /// <br/>
        /// <br/>**[Permissions](https://confluence.atlassian.com/x/_AozKw) required**:
        /// <br/>Permission to view the content of the page and its corresponding space.
        /// </remarks>
        /// <param name="id">The ID of the page for which inline comments should be returned.</param>
        /// <param name="body_format">The content format type to be returned in the `body` field of the response. If available, the representation will be available under a response field of the same name under the `body` field.</param>
        /// <param name="status">Filter the inline comment being retrieved by its status.</param>
        /// <param name="resolution_status">Filter the inline comment being retrieved by its resolution status.</param>
        /// <param name="sort">Used to sort the result by a particular field.</param>
        /// <param name="cursor">Used for pagination, this opaque cursor will be returned in the `next` URL in the `Link` response header. Use the relative URL in the `Link` header to retrieve the `next` set of results.</param>
        /// <param name="limit">Maximum number of inline comments per result to return. If more results exist, use the `Link` header to retrieve a relative URL that will return the next set of results.</param>
        /// <returns>Returned if the requested inline comments are returned.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Response81> GetPageInlineCommentsAsync(long id, PrimaryBodyRepresentation? body_format, System.Collections.Generic.IEnumerable<Anonymous12> status, System.Collections.Generic.IEnumerable<Anonymous13> resolution_status, CommentSortOrder? sort, string cursor, int? limit);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get inline comments for page
        /// </summary>
        /// <remarks>
        /// Returns the root inline comments of specific page. The number of results is limited by the `limit` parameter and additional results (if available)
        /// <br/>will be available through the `next` URL present in the `Link` response header.
        /// <br/>
        /// <br/>**[Permissions](https://confluence.atlassian.com/x/_AozKw) required**:
        /// <br/>Permission to view the content of the page and its corresponding space.
        /// </remarks>
        /// <param name="id">The ID of the page for which inline comments should be returned.</param>
        /// <param name="body_format">The content format type to be returned in the `body` field of the response. If available, the representation will be available under a response field of the same name under the `body` field.</param>
        /// <param name="status">Filter the inline comment being retrieved by its status.</param>
        /// <param name="resolution_status">Filter the inline comment being retrieved by its resolution status.</param>
        /// <param name="sort">Used to sort the result by a particular field.</param>
        /// <param name="cursor">Used for pagination, this opaque cursor will be returned in the `next` URL in the `Link` response header. Use the relative URL in the `Link` header to retrieve the `next` set of results.</param>
        /// <param name="limit">Maximum number of inline comments per result to return. If more results exist, use the `Link` header to retrieve a relative URL that will return the next set of results.</param>
        /// <returns>Returned if the requested inline comments are returned.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Response81> GetPageInlineCommentsAsync(long id, PrimaryBodyRepresentation? body_format, System.Collections.Generic.IEnumerable<Anonymous12> status, System.Collections.Generic.IEnumerable<Anonymous13> resolution_status, CommentSortOrder? sort, string cursor, int? limit, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Get footer comments for blog post
        /// </summary>
        /// <remarks>
        /// Returns the root footer comments of specific blog post. The number of results is limited by the `limit` parameter and additional results (if available)
        /// <br/>will be available through the `next` URL present in the `Link` response header.
        /// <br/>
        /// <br/>**[Permissions](https://confluence.atlassian.com/x/_AozKw) required**:
        /// <br/>Permission to view the content of the blog post and its corresponding space.
        /// </remarks>
        /// <param name="id">The ID of the blog post for which footer comments should be returned.</param>
        /// <param name="body_format">The content format type to be returned in the `body` field of the response. If available, the representation will be available under a response field of the same name under the `body` field.</param>
        /// <param name="status">Filter the footer comment being retrieved by its status.</param>
        /// <param name="sort">Used to sort the result by a particular field.</param>
        /// <param name="cursor">Used for pagination, this opaque cursor will be returned in the `next` URL in the `Link` response header. Use the relative URL in the `Link` header to retrieve the `next` set of results.</param>
        /// <param name="limit">Maximum number of footer comments per result to return. If more results exist, use the `Link` header to retrieve a relative URL that will return the next set of results.</param>
        /// <returns>Returned if the requested footer comments are returned.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Response82> GetBlogPostFooterCommentsAsync(long id, PrimaryBodyRepresentation? body_format, System.Collections.Generic.IEnumerable<Anonymous14> status, CommentSortOrder? sort, string cursor, int? limit);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get footer comments for blog post
        /// </summary>
        /// <remarks>
        /// Returns the root footer comments of specific blog post. The number of results is limited by the `limit` parameter and additional results (if available)
        /// <br/>will be available through the `next` URL present in the `Link` response header.
        /// <br/>
        /// <br/>**[Permissions](https://confluence.atlassian.com/x/_AozKw) required**:
        /// <br/>Permission to view the content of the blog post and its corresponding space.
        /// </remarks>
        /// <param name="id">The ID of the blog post for which footer comments should be returned.</param>
        /// <param name="body_format">The content format type to be returned in the `body` field of the response. If available, the representation will be available under a response field of the same name under the `body` field.</param>
        /// <param name="status">Filter the footer comment being retrieved by its status.</param>
        /// <param name="sort">Used to sort the result by a particular field.</param>
        /// <param name="cursor">Used for pagination, this opaque cursor will be returned in the `next` URL in the `Link` response header. Use the relative URL in the `Link` header to retrieve the `next` set of results.</param>
        /// <param name="limit">Maximum number of footer comments per result to return. If more results exist, use the `Link` header to retrieve a relative URL that will return the next set of results.</param>
        /// <returns>Returned if the requested footer comments are returned.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Response82> GetBlogPostFooterCommentsAsync(long id, PrimaryBodyRepresentation? body_format, System.Collections.Generic.IEnumerable<Anonymous14> status, CommentSortOrder? sort, string cursor, int? limit, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Get inline comments for blog post
        /// </summary>
        /// <remarks>
        /// Returns the root inline comments of specific blog post. The number of results is limited by the `limit` parameter and additional results (if available)
        /// <br/>will be available through the `next` URL present in the `Link` response header.
        /// <br/>
        /// <br/>**[Permissions](https://confluence.atlassian.com/x/_AozKw) required**:
        /// <br/>Permission to view the content of the blog post and its corresponding space.
        /// </remarks>
        /// <param name="id">The ID of the blog post for which inline comments should be returned.</param>
        /// <param name="body_format">The content format type to be returned in the `body` field of the response. If available, the representation will be available under a response field of the same name under the `body` field.</param>
        /// <param name="status">Filter the inline comment being retrieved by its status.</param>
        /// <param name="resolution_status">Filter the inline comment being retrieved by its resolution status.</param>
        /// <param name="sort">Used to sort the result by a particular field.</param>
        /// <param name="cursor">Used for pagination, this opaque cursor will be returned in the `next` URL in the `Link` response header. Use the relative URL in the `Link` header to retrieve the `next` set of results.</param>
        /// <param name="limit">Maximum number of inline comments per result to return. If more results exist, use the `Link` header to retrieve a relative URL that will return the next set of results.</param>
        /// <returns>Returned if the requested inline comments are returned.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Response83> GetBlogPostInlineCommentsAsync(long id, PrimaryBodyRepresentation? body_format, System.Collections.Generic.IEnumerable<Anonymous15> status, System.Collections.Generic.IEnumerable<Anonymous16> resolution_status, CommentSortOrder? sort, string cursor, int? limit);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get inline comments for blog post
        /// </summary>
        /// <remarks>
        /// Returns the root inline comments of specific blog post. The number of results is limited by the `limit` parameter and additional results (if available)
        /// <br/>will be available through the `next` URL present in the `Link` response header.
        /// <br/>
        /// <br/>**[Permissions](https://confluence.atlassian.com/x/_AozKw) required**:
        /// <br/>Permission to view the content of the blog post and its corresponding space.
        /// </remarks>
        /// <param name="id">The ID of the blog post for which inline comments should be returned.</param>
        /// <param name="body_format">The content format type to be returned in the `body` field of the response. If available, the representation will be available under a response field of the same name under the `body` field.</param>
        /// <param name="status">Filter the inline comment being retrieved by its status.</param>
        /// <param name="resolution_status">Filter the inline comment being retrieved by its resolution status.</param>
        /// <param name="sort">Used to sort the result by a particular field.</param>
        /// <param name="cursor">Used for pagination, this opaque cursor will be returned in the `next` URL in the `Link` response header. Use the relative URL in the `Link` header to retrieve the `next` set of results.</param>
        /// <param name="limit">Maximum number of inline comments per result to return. If more results exist, use the `Link` header to retrieve a relative URL that will return the next set of results.</param>
        /// <returns>Returned if the requested inline comments are returned.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Response83> GetBlogPostInlineCommentsAsync(long id, PrimaryBodyRepresentation? body_format, System.Collections.Generic.IEnumerable<Anonymous15> status, System.Collections.Generic.IEnumerable<Anonymous16> resolution_status, CommentSortOrder? sort, string cursor, int? limit, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Get footer comments
        /// </summary>
        /// <remarks>
        /// Returns all footer comments. The number of results is limited by the `limit` parameter and additional results (if available)
        /// <br/>will be available through the `next` URL present in the `Link` response header.
        /// <br/>
        /// <br/>**[Permissions](https://confluence.atlassian.com/x/_AozKw) required**:
        /// <br/>Permission to view the content of the container and its corresponding space.
        /// </remarks>
        /// <param name="body_format">The content format type to be returned in the `body` field of the response. If available, the representation will be available under a response field of the same name under the `body` field.</param>
        /// <param name="sort">Used to sort the result by a particular field.</param>
        /// <param name="cursor">Used for pagination, this opaque cursor will be returned in the `next` URL in the `Link` response header. Use the relative URL in the `Link` header to retrieve the `next` set of results.</param>
        /// <param name="limit">Maximum number of footer comments per result to return. If more results exist, use the `Link` header to retrieve a relative URL that will return the next set of results.</param>
        /// <returns>Returned if the requested footer comments are returned.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Response84> GetFooterCommentsAsync(PrimaryBodyRepresentation? body_format, CommentSortOrder? sort, string cursor, int? limit);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get footer comments
        /// </summary>
        /// <remarks>
        /// Returns all footer comments. The number of results is limited by the `limit` parameter and additional results (if available)
        /// <br/>will be available through the `next` URL present in the `Link` response header.
        /// <br/>
        /// <br/>**[Permissions](https://confluence.atlassian.com/x/_AozKw) required**:
        /// <br/>Permission to view the content of the container and its corresponding space.
        /// </remarks>
        /// <param name="body_format">The content format type to be returned in the `body` field of the response. If available, the representation will be available under a response field of the same name under the `body` field.</param>
        /// <param name="sort">Used to sort the result by a particular field.</param>
        /// <param name="cursor">Used for pagination, this opaque cursor will be returned in the `next` URL in the `Link` response header. Use the relative URL in the `Link` header to retrieve the `next` set of results.</param>
        /// <param name="limit">Maximum number of footer comments per result to return. If more results exist, use the `Link` header to retrieve a relative URL that will return the next set of results.</param>
        /// <returns>Returned if the requested footer comments are returned.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Response84> GetFooterCommentsAsync(PrimaryBodyRepresentation? body_format, CommentSortOrder? sort, string cursor, int? limit, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Create footer comment
        /// </summary>
        /// <remarks>
        /// Create a footer comment.
        /// <br/>
        /// <br/>The footer comment can be made against several locations: 
        /// <br/>- at the top level (specifying pageId or blogPostId in the request body)
        /// <br/>- as a reply (specifying parentCommentId in the request body)
        /// <br/>- against an attachment (note: this is different than the comments added via the attachment properties page on the UI, which are referred to as version comments)
        /// <br/>- against a custom content
        /// <br/>
        /// <br/>**[Permissions](https://confluence.atlassian.com/x/_AozKw) required**:
        /// <br/>Permission to view the content of the page or blogpost and its corresponding space. Permission to create comments in the space.
        /// </remarks>
        /// <param name="body">The footer comment to be created</param>
        /// <returns>Returned if the footer comment is created.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Response85> CreateFooterCommentAsync(CreateFooterCommentModel body);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Create footer comment
        /// </summary>
        /// <remarks>
        /// Create a footer comment.
        /// <br/>
        /// <br/>The footer comment can be made against several locations: 
        /// <br/>- at the top level (specifying pageId or blogPostId in the request body)
        /// <br/>- as a reply (specifying parentCommentId in the request body)
        /// <br/>- against an attachment (note: this is different than the comments added via the attachment properties page on the UI, which are referred to as version comments)
        /// <br/>- against a custom content
        /// <br/>
        /// <br/>**[Permissions](https://confluence.atlassian.com/x/_AozKw) required**:
        /// <br/>Permission to view the content of the page or blogpost and its corresponding space. Permission to create comments in the space.
        /// </remarks>
        /// <param name="body">The footer comment to be created</param>
        /// <returns>Returned if the footer comment is created.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Response85> CreateFooterCommentAsync(CreateFooterCommentModel body, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Get footer comment by id
        /// </summary>
        /// <remarks>
        /// Retrieves a footer comment by id
        /// <br/>
        /// <br/>**[Permissions](https://confluence.atlassian.com/x/_AozKw) required**:
        /// <br/>Permission to view the content of the container and its corresponding space.
        /// </remarks>
        /// <param name="comment_id">The ID of the comment to be retrieved.</param>
        /// <param name="body_format">The content format type to be returned in the `body` field of the response. If available, the representation will be available under a response field of the same name under the `body` field.</param>
        /// <param name="version">Allows you to retrieve a previously published version. Specify the previous version's number to retrieve its details.</param>
        /// <param name="include_properties">Includes content properties associated with this footer comment in the response.
        /// <br/>The number of results will be limited to 50 and sorted in the default sort order. 
        /// <br/>A `meta` and `_links` property will be present to indicate if more results are available and a link to retrieve the rest of the results.</param>
        /// <param name="include_operations">Includes operations associated with this footer comment in the response, as defined in the `Operation` object.
        /// <br/>The number of results will be limited to 50 and sorted in the default sort order. 
        /// <br/>A `meta` and `_links` property will be present to indicate if more results are available and a link to retrieve the rest of the results.</param>
        /// <param name="include_likes">Includes likes associated with this footer comment in the response.
        /// <br/>The number of results will be limited to 50 and sorted in the default sort order. 
        /// <br/>A `meta` and `_links` property will be present to indicate if more results are available and a link to retrieve the rest of the results.</param>
        /// <param name="include_versions">Includes versions associated with this footer comment in the response.
        /// <br/>The number of results will be limited to 50 and sorted in the default sort order. 
        /// <br/>A `meta` and `_links` property will be present to indicate if more results are available and a link to retrieve the rest of the results.</param>
        /// <param name="include_version">Includes the current version associated with this footer comment in the response.
        /// <br/>By default this is included and can be omitted by setting the value to `false`.</param>
        /// <returns>Returned if the footer comment is successfully retrieved.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Response86> GetFooterCommentByIdAsync(long comment_id, PrimaryBodyRepresentationSingle? body_format, int? version, bool? include_properties, bool? include_operations, bool? include_likes, bool? include_versions, bool? include_version);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get footer comment by id
        /// </summary>
        /// <remarks>
        /// Retrieves a footer comment by id
        /// <br/>
        /// <br/>**[Permissions](https://confluence.atlassian.com/x/_AozKw) required**:
        /// <br/>Permission to view the content of the container and its corresponding space.
        /// </remarks>
        /// <param name="comment_id">The ID of the comment to be retrieved.</param>
        /// <param name="body_format">The content format type to be returned in the `body` field of the response. If available, the representation will be available under a response field of the same name under the `body` field.</param>
        /// <param name="version">Allows you to retrieve a previously published version. Specify the previous version's number to retrieve its details.</param>
        /// <param name="include_properties">Includes content properties associated with this footer comment in the response.
        /// <br/>The number of results will be limited to 50 and sorted in the default sort order. 
        /// <br/>A `meta` and `_links` property will be present to indicate if more results are available and a link to retrieve the rest of the results.</param>
        /// <param name="include_operations">Includes operations associated with this footer comment in the response, as defined in the `Operation` object.
        /// <br/>The number of results will be limited to 50 and sorted in the default sort order. 
        /// <br/>A `meta` and `_links` property will be present to indicate if more results are available and a link to retrieve the rest of the results.</param>
        /// <param name="include_likes">Includes likes associated with this footer comment in the response.
        /// <br/>The number of results will be limited to 50 and sorted in the default sort order. 
        /// <br/>A `meta` and `_links` property will be present to indicate if more results are available and a link to retrieve the rest of the results.</param>
        /// <param name="include_versions">Includes versions associated with this footer comment in the response.
        /// <br/>The number of results will be limited to 50 and sorted in the default sort order. 
        /// <br/>A `meta` and `_links` property will be present to indicate if more results are available and a link to retrieve the rest of the results.</param>
        /// <param name="include_version">Includes the current version associated with this footer comment in the response.
        /// <br/>By default this is included and can be omitted by setting the value to `false`.</param>
        /// <returns>Returned if the footer comment is successfully retrieved.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Response86> GetFooterCommentByIdAsync(long comment_id, PrimaryBodyRepresentationSingle? body_format, int? version, bool? include_properties, bool? include_operations, bool? include_likes, bool? include_versions, bool? include_version, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Update footer comment
        /// </summary>
        /// <remarks>
        /// Update a footer comment. This can be used to update the body text of a comment.
        /// <br/>
        /// <br/>**[Permissions](https://confluence.atlassian.com/x/_AozKw) required**:
        /// <br/>Permission to view the content of the page or blogpost and its corresponding space. Permission to create comments in the space.
        /// </remarks>
        /// <param name="comment_id">The ID of the comment to be retrieved.</param>
        /// <param name="body">The footer comment to be created</param>
        /// <returns>Returned if the footer comment is updated successfully</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<FooterCommentModel> UpdateFooterCommentAsync(long comment_id, Body body);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Update footer comment
        /// </summary>
        /// <remarks>
        /// Update a footer comment. This can be used to update the body text of a comment.
        /// <br/>
        /// <br/>**[Permissions](https://confluence.atlassian.com/x/_AozKw) required**:
        /// <br/>Permission to view the content of the page or blogpost and its corresponding space. Permission to create comments in the space.
        /// </remarks>
        /// <param name="comment_id">The ID of the comment to be retrieved.</param>
        /// <param name="body">The footer comment to be created</param>
        /// <returns>Returned if the footer comment is updated successfully</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<FooterCommentModel> UpdateFooterCommentAsync(long comment_id, Body body, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Delete footer comment
        /// </summary>
        /// <remarks>
        /// Deletes a footer comment. This is a permanent deletion and cannot be reverted.
        /// <br/>
        /// <br/>**[Permissions](https://confluence.atlassian.com/x/_AozKw) required**:
        /// <br/>Permission to view the content of the page or blogpost and its corresponding space. Permission to delete comments in the space.
        /// </remarks>
        /// <param name="comment_id">The ID of the comment to be retrieved.</param>
        /// <returns>Returned if the footer comment is deleted.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task DeleteFooterCommentAsync(long comment_id);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Delete footer comment
        /// </summary>
        /// <remarks>
        /// Deletes a footer comment. This is a permanent deletion and cannot be reverted.
        /// <br/>
        /// <br/>**[Permissions](https://confluence.atlassian.com/x/_AozKw) required**:
        /// <br/>Permission to view the content of the page or blogpost and its corresponding space. Permission to delete comments in the space.
        /// </remarks>
        /// <param name="comment_id">The ID of the comment to be retrieved.</param>
        /// <returns>Returned if the footer comment is deleted.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task DeleteFooterCommentAsync(long comment_id, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Get children footer comments
        /// </summary>
        /// <remarks>
        /// Returns the children footer comments of specific comment. The number of results is limited by the `limit` parameter and additional results (if available)
        /// <br/>will be available through the `next` URL present in the `Link` response header.
        /// <br/>
        /// <br/>**[Permissions](https://confluence.atlassian.com/x/_AozKw) required**:
        /// <br/>Permission to view the content of the page and its corresponding space.
        /// </remarks>
        /// <param name="id">The ID of the parent comment for which footer comment children should be returned.</param>
        /// <param name="body_format">The content format type to be returned in the `body` field of the response. If available, the representation will be available under a response field of the same name under the `body` field.</param>
        /// <param name="sort">Used to sort the result by a particular field.</param>
        /// <param name="cursor">Used for pagination, this opaque cursor will be returned in the `next` URL in the `Link` response header. Use the relative URL in the `Link` header to retrieve the `next` set of results.</param>
        /// <param name="limit">Maximum number of footer comments per result to return. If more results exist, use the `Link` header to retrieve a relative URL that will return the next set of results.</param>
        /// <returns>Returned if the requested footer comments are returned.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Response87> GetFooterCommentChildrenAsync(long id, PrimaryBodyRepresentation? body_format, CommentSortOrder? sort, string cursor, int? limit);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get children footer comments
        /// </summary>
        /// <remarks>
        /// Returns the children footer comments of specific comment. The number of results is limited by the `limit` parameter and additional results (if available)
        /// <br/>will be available through the `next` URL present in the `Link` response header.
        /// <br/>
        /// <br/>**[Permissions](https://confluence.atlassian.com/x/_AozKw) required**:
        /// <br/>Permission to view the content of the page and its corresponding space.
        /// </remarks>
        /// <param name="id">The ID of the parent comment for which footer comment children should be returned.</param>
        /// <param name="body_format">The content format type to be returned in the `body` field of the response. If available, the representation will be available under a response field of the same name under the `body` field.</param>
        /// <param name="sort">Used to sort the result by a particular field.</param>
        /// <param name="cursor">Used for pagination, this opaque cursor will be returned in the `next` URL in the `Link` response header. Use the relative URL in the `Link` header to retrieve the `next` set of results.</param>
        /// <param name="limit">Maximum number of footer comments per result to return. If more results exist, use the `Link` header to retrieve a relative URL that will return the next set of results.</param>
        /// <returns>Returned if the requested footer comments are returned.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Response87> GetFooterCommentChildrenAsync(long id, PrimaryBodyRepresentation? body_format, CommentSortOrder? sort, string cursor, int? limit, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Get like count for footer comment
        /// </summary>
        /// <remarks>
        /// Returns the count of likes of specific footer comment.
        /// <br/>
        /// <br/>**[Permissions](https://confluence.atlassian.com/x/_AozKw) required**:
        /// <br/>Permission to view the content of the page/blogpost and its corresponding space.
        /// </remarks>
        /// <param name="id">The ID of the footer comment for which like count should be returned.</param>
        /// <returns>Returned if the requested count is returned.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Anonymous18> GetFooterLikeCountAsync(long id);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get like count for footer comment
        /// </summary>
        /// <remarks>
        /// Returns the count of likes of specific footer comment.
        /// <br/>
        /// <br/>**[Permissions](https://confluence.atlassian.com/x/_AozKw) required**:
        /// <br/>Permission to view the content of the page/blogpost and its corresponding space.
        /// </remarks>
        /// <param name="id">The ID of the footer comment for which like count should be returned.</param>
        /// <returns>Returned if the requested count is returned.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Anonymous18> GetFooterLikeCountAsync(long id, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Get account IDs of likes for footer comment
        /// </summary>
        /// <remarks>
        /// Returns the account IDs of likes of specific footer comment.
        /// <br/>
        /// <br/>**[Permissions](https://confluence.atlassian.com/x/_AozKw) required**:
        /// <br/>Permission to view the content of the page/blogpost and its corresponding space.
        /// </remarks>
        /// <param name="id">The ID of the footer comment for which like count should be returned.</param>
        /// <param name="cursor">Used for pagination, this opaque cursor will be returned in the `next` URL in the `Link` response header. Use the relative URL in the `Link` header to retrieve the `next` set of results.</param>
        /// <param name="limit">Maximum number of account IDs per result to return. If more results exist, use the `Link` header to retrieve a relative URL that will return the next set of results.</param>
        /// <returns>Returned if the requested account IDs are returned.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Response88> GetFooterLikeUsersAsync(long id, string cursor, int? limit);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get account IDs of likes for footer comment
        /// </summary>
        /// <remarks>
        /// Returns the account IDs of likes of specific footer comment.
        /// <br/>
        /// <br/>**[Permissions](https://confluence.atlassian.com/x/_AozKw) required**:
        /// <br/>Permission to view the content of the page/blogpost and its corresponding space.
        /// </remarks>
        /// <param name="id">The ID of the footer comment for which like count should be returned.</param>
        /// <param name="cursor">Used for pagination, this opaque cursor will be returned in the `next` URL in the `Link` response header. Use the relative URL in the `Link` header to retrieve the `next` set of results.</param>
        /// <param name="limit">Maximum number of account IDs per result to return. If more results exist, use the `Link` header to retrieve a relative URL that will return the next set of results.</param>
        /// <returns>Returned if the requested account IDs are returned.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Response88> GetFooterLikeUsersAsync(long id, string cursor, int? limit, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Get permitted operations for footer comment
        /// </summary>
        /// <remarks>
        /// Returns the permitted operations on specific footer comment.
        /// <br/>
        /// <br/>**[Permissions](https://confluence.atlassian.com/x/_AozKw) required**:
        /// <br/>Permission to view the parent content of the footer comment and its corresponding space.
        /// </remarks>
        /// <param name="id">The ID of the footer comment for which operations should be returned.</param>
        /// <returns>Returned if the requested operations are returned.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<PermittedOperationsResponse> GetFooterCommentOperationsAsync(long id);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get permitted operations for footer comment
        /// </summary>
        /// <remarks>
        /// Returns the permitted operations on specific footer comment.
        /// <br/>
        /// <br/>**[Permissions](https://confluence.atlassian.com/x/_AozKw) required**:
        /// <br/>Permission to view the parent content of the footer comment and its corresponding space.
        /// </remarks>
        /// <param name="id">The ID of the footer comment for which operations should be returned.</param>
        /// <returns>Returned if the requested operations are returned.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<PermittedOperationsResponse> GetFooterCommentOperationsAsync(long id, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Get footer comment versions
        /// </summary>
        /// <remarks>
        /// Retrieves the versions of the specified footer comment.
        /// <br/>
        /// <br/>**[Permissions](https://confluence.atlassian.com/x/_AozKw) required**:
        /// <br/>Permission to view the content of the page or blog post and its corresponding space.
        /// </remarks>
        /// <param name="id">The ID of the footer comment for which versions should be returned</param>
        /// <param name="body_format">The content format types to be returned in the `body` field of the response. If available, the representation will be available under a response field of the same name under the `body` field.</param>
        /// <param name="cursor">Used for pagination, this opaque cursor will be returned in the `next` URL in the `Link` response header. Use the relative URL in the `Link` header to retrieve the `next` set of results.</param>
        /// <param name="limit">Maximum number of versions per result to return. If more results exist, use the `Link` header to retrieve a relative URL that will return the next set of results.</param>
        /// <param name="sort">Used to sort the result by a particular field.</param>
        /// <returns>Returned if the requested footer comment versions are returned.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Response89> GetFooterCommentVersionsAsync(long id, PrimaryBodyRepresentation? body_format, string cursor, int? limit, VersionSortOrder? sort);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get footer comment versions
        /// </summary>
        /// <remarks>
        /// Retrieves the versions of the specified footer comment.
        /// <br/>
        /// <br/>**[Permissions](https://confluence.atlassian.com/x/_AozKw) required**:
        /// <br/>Permission to view the content of the page or blog post and its corresponding space.
        /// </remarks>
        /// <param name="id">The ID of the footer comment for which versions should be returned</param>
        /// <param name="body_format">The content format types to be returned in the `body` field of the response. If available, the representation will be available under a response field of the same name under the `body` field.</param>
        /// <param name="cursor">Used for pagination, this opaque cursor will be returned in the `next` URL in the `Link` response header. Use the relative URL in the `Link` header to retrieve the `next` set of results.</param>
        /// <param name="limit">Maximum number of versions per result to return. If more results exist, use the `Link` header to retrieve a relative URL that will return the next set of results.</param>
        /// <param name="sort">Used to sort the result by a particular field.</param>
        /// <returns>Returned if the requested footer comment versions are returned.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Response89> GetFooterCommentVersionsAsync(long id, PrimaryBodyRepresentation? body_format, string cursor, int? limit, VersionSortOrder? sort, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Get version details for footer comment version
        /// </summary>
        /// <remarks>
        /// Retrieves version details for the specified footer comment version.
        /// <br/>
        /// <br/>**[Permissions](https://confluence.atlassian.com/x/_AozKw) required**:
        /// <br/>Permission to view the content of the page or blog post and its corresponding space.
        /// </remarks>
        /// <param name="id">The ID of the footer comment for which version details should be returned.</param>
        /// <param name="version_number">The version number of the footer comment to be returned.</param>
        /// <returns>Returned if the requested version details are successfully retrieved.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<DetailedVersion> GetFooterCommentVersionDetailsAsync(long id, long version_number);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get version details for footer comment version
        /// </summary>
        /// <remarks>
        /// Retrieves version details for the specified footer comment version.
        /// <br/>
        /// <br/>**[Permissions](https://confluence.atlassian.com/x/_AozKw) required**:
        /// <br/>Permission to view the content of the page or blog post and its corresponding space.
        /// </remarks>
        /// <param name="id">The ID of the footer comment for which version details should be returned.</param>
        /// <param name="version_number">The version number of the footer comment to be returned.</param>
        /// <returns>Returned if the requested version details are successfully retrieved.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<DetailedVersion> GetFooterCommentVersionDetailsAsync(long id, long version_number, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Get inline comments
        /// </summary>
        /// <remarks>
        /// Returns all inline comments. The number of results is limited by the `limit` parameter and additional results (if available)
        /// <br/>will be available through the `next` URL present in the `Link` response header.
        /// <br/>
        /// <br/>**[Permissions](https://confluence.atlassian.com/x/_AozKw) required**:
        /// <br/>Permission to view the content of the page and its corresponding space.
        /// </remarks>
        /// <param name="body_format">The content format type to be returned in the `body` field of the response. If available, the representation will be available under a response field of the same name under the `body` field.</param>
        /// <param name="sort">Used to sort the result by a particular field.</param>
        /// <param name="cursor">Used for pagination, this opaque cursor will be returned in the `next` URL in the `Link` response header. Use the relative URL in the `Link` header to retrieve the `next` set of results.</param>
        /// <param name="limit">Maximum number of footer comments per result to return. If more results exist, use the `Link` header to retrieve a relative URL that will return the next set of results.</param>
        /// <returns>Returned if the requested inline comments are returned.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Response90> GetInlineCommentsAsync(PrimaryBodyRepresentation? body_format, CommentSortOrder? sort, string cursor, int? limit);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get inline comments
        /// </summary>
        /// <remarks>
        /// Returns all inline comments. The number of results is limited by the `limit` parameter and additional results (if available)
        /// <br/>will be available through the `next` URL present in the `Link` response header.
        /// <br/>
        /// <br/>**[Permissions](https://confluence.atlassian.com/x/_AozKw) required**:
        /// <br/>Permission to view the content of the page and its corresponding space.
        /// </remarks>
        /// <param name="body_format">The content format type to be returned in the `body` field of the response. If available, the representation will be available under a response field of the same name under the `body` field.</param>
        /// <param name="sort">Used to sort the result by a particular field.</param>
        /// <param name="cursor">Used for pagination, this opaque cursor will be returned in the `next` URL in the `Link` response header. Use the relative URL in the `Link` header to retrieve the `next` set of results.</param>
        /// <param name="limit">Maximum number of footer comments per result to return. If more results exist, use the `Link` header to retrieve a relative URL that will return the next set of results.</param>
        /// <returns>Returned if the requested inline comments are returned.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Response90> GetInlineCommentsAsync(PrimaryBodyRepresentation? body_format, CommentSortOrder? sort, string cursor, int? limit, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Create inline comment
        /// </summary>
        /// <remarks>
        /// Create an inline comment. This can be at the top level (specifying pageId or blogPostId in the request body)
        /// <br/>or as a reply (specifying parentCommentId in the request body). Note the inlineCommentProperties object in the
        /// <br/>request body is used to select the text the inline comment should be tied to. This is what determines the text 
        /// <br/>highlighting when viewing a page in Confluence.
        /// <br/>
        /// <br/>**[Permissions](https://confluence.atlassian.com/x/_AozKw) required**:
        /// <br/>Permission to view the content of the page or blogpost and its corresponding space. Permission to create comments in the space.
        /// </remarks>
        /// <param name="body">The inline comment to be created</param>
        /// <returns>Returned if the inline comment is created.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Response91> CreateInlineCommentAsync(CreateInlineCommentModel body);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Create inline comment
        /// </summary>
        /// <remarks>
        /// Create an inline comment. This can be at the top level (specifying pageId or blogPostId in the request body)
        /// <br/>or as a reply (specifying parentCommentId in the request body). Note the inlineCommentProperties object in the
        /// <br/>request body is used to select the text the inline comment should be tied to. This is what determines the text 
        /// <br/>highlighting when viewing a page in Confluence.
        /// <br/>
        /// <br/>**[Permissions](https://confluence.atlassian.com/x/_AozKw) required**:
        /// <br/>Permission to view the content of the page or blogpost and its corresponding space. Permission to create comments in the space.
        /// </remarks>
        /// <param name="body">The inline comment to be created</param>
        /// <returns>Returned if the inline comment is created.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Response91> CreateInlineCommentAsync(CreateInlineCommentModel body, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Get inline comment by id
        /// </summary>
        /// <remarks>
        /// Retrieves an inline comment by id
        /// <br/>
        /// <br/>**[Permissions](https://confluence.atlassian.com/x/_AozKw) required**:
        /// <br/>Permission to view the content of the page or blogpost and its corresponding space.
        /// </remarks>
        /// <param name="comment_id">The ID of the comment to be retrieved.</param>
        /// <param name="body_format">The content format type to be returned in the `body` field of the response. If available, the representation will be available under a response field of the same name under the `body` field.</param>
        /// <param name="version">Allows you to retrieve a previously published version. Specify the previous version's number to retrieve its details.</param>
        /// <param name="include_properties">Includes content properties associated with this inline comment in the response.
        /// <br/>The number of results will be limited to 50 and sorted in the default sort order. 
        /// <br/>A `meta` and `_links` property will be present to indicate if more results are available and a link to retrieve the rest of the results.</param>
        /// <param name="include_operations">Includes operations associated with this inline comment in the response, as defined in the `Operation` object.
        /// <br/>The number of results will be limited to 50 and sorted in the default sort order. 
        /// <br/>A `meta` and `_links` property will be present to indicate if more results are available and a link to retrieve the rest of the results.</param>
        /// <param name="include_likes">Includes likes associated with this inline comment in the response.
        /// <br/>The number of results will be limited to 50 and sorted in the default sort order. 
        /// <br/>A `meta` and `_links` property will be present to indicate if more results are available and a link to retrieve the rest of the results.</param>
        /// <param name="include_versions">Includes versions associated with this inline comment in the response.
        /// <br/>The number of results will be limited to 50 and sorted in the default sort order. 
        /// <br/>A `meta` and `_links` property will be present to indicate if more results are available and a link to retrieve the rest of the results.</param>
        /// <param name="include_version">Includes the current version associated with this inline comment in the response.
        /// <br/>By default this is included and can be omitted by setting the value to `false`.</param>
        /// <returns>Returned if the inline comment is successfully retrieved.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Response92> GetInlineCommentByIdAsync(long comment_id, PrimaryBodyRepresentationSingle? body_format, int? version, bool? include_properties, bool? include_operations, bool? include_likes, bool? include_versions, bool? include_version);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get inline comment by id
        /// </summary>
        /// <remarks>
        /// Retrieves an inline comment by id
        /// <br/>
        /// <br/>**[Permissions](https://confluence.atlassian.com/x/_AozKw) required**:
        /// <br/>Permission to view the content of the page or blogpost and its corresponding space.
        /// </remarks>
        /// <param name="comment_id">The ID of the comment to be retrieved.</param>
        /// <param name="body_format">The content format type to be returned in the `body` field of the response. If available, the representation will be available under a response field of the same name under the `body` field.</param>
        /// <param name="version">Allows you to retrieve a previously published version. Specify the previous version's number to retrieve its details.</param>
        /// <param name="include_properties">Includes content properties associated with this inline comment in the response.
        /// <br/>The number of results will be limited to 50 and sorted in the default sort order. 
        /// <br/>A `meta` and `_links` property will be present to indicate if more results are available and a link to retrieve the rest of the results.</param>
        /// <param name="include_operations">Includes operations associated with this inline comment in the response, as defined in the `Operation` object.
        /// <br/>The number of results will be limited to 50 and sorted in the default sort order. 
        /// <br/>A `meta` and `_links` property will be present to indicate if more results are available and a link to retrieve the rest of the results.</param>
        /// <param name="include_likes">Includes likes associated with this inline comment in the response.
        /// <br/>The number of results will be limited to 50 and sorted in the default sort order. 
        /// <br/>A `meta` and `_links` property will be present to indicate if more results are available and a link to retrieve the rest of the results.</param>
        /// <param name="include_versions">Includes versions associated with this inline comment in the response.
        /// <br/>The number of results will be limited to 50 and sorted in the default sort order. 
        /// <br/>A `meta` and `_links` property will be present to indicate if more results are available and a link to retrieve the rest of the results.</param>
        /// <param name="include_version">Includes the current version associated with this inline comment in the response.
        /// <br/>By default this is included and can be omitted by setting the value to `false`.</param>
        /// <returns>Returned if the inline comment is successfully retrieved.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Response92> GetInlineCommentByIdAsync(long comment_id, PrimaryBodyRepresentationSingle? body_format, int? version, bool? include_properties, bool? include_operations, bool? include_likes, bool? include_versions, bool? include_version, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Update inline comment
        /// </summary>
        /// <remarks>
        /// Update an inline comment. This can be used to update the body text of a comment and/or to resolve the comment
        /// <br/>
        /// <br/>**[Permissions](https://confluence.atlassian.com/x/_AozKw) required**:
        /// <br/>Permission to view the content of the page or blogpost and its corresponding space. Permission to create comments in the space.
        /// </remarks>
        /// <param name="comment_id">The ID of the comment to be retrieved.</param>
        /// <param name="body">The inline comment to be updated</param>
        /// <returns>Returned if the inline comment is updated successfully.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Response93> UpdateInlineCommentAsync(long comment_id, UpdateInlineCommentModel body);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Update inline comment
        /// </summary>
        /// <remarks>
        /// Update an inline comment. This can be used to update the body text of a comment and/or to resolve the comment
        /// <br/>
        /// <br/>**[Permissions](https://confluence.atlassian.com/x/_AozKw) required**:
        /// <br/>Permission to view the content of the page or blogpost and its corresponding space. Permission to create comments in the space.
        /// </remarks>
        /// <param name="comment_id">The ID of the comment to be retrieved.</param>
        /// <param name="body">The inline comment to be updated</param>
        /// <returns>Returned if the inline comment is updated successfully.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Response93> UpdateInlineCommentAsync(long comment_id, UpdateInlineCommentModel body, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Delete inline comment
        /// </summary>
        /// <remarks>
        /// Deletes an inline comment. This is a permanent deletion and cannot be reverted.
        /// <br/>
        /// <br/>**[Permissions](https://confluence.atlassian.com/x/_AozKw) required**:
        /// <br/>Permission to view the content of the page or blogpost and its corresponding space. Permission to delete comments in the space.
        /// </remarks>
        /// <param name="comment_id">The ID of the comment to be deleted.</param>
        /// <returns>Returned if the inline comment is deleted.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task DeleteInlineCommentAsync(long comment_id);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Delete inline comment
        /// </summary>
        /// <remarks>
        /// Deletes an inline comment. This is a permanent deletion and cannot be reverted.
        /// <br/>
        /// <br/>**[Permissions](https://confluence.atlassian.com/x/_AozKw) required**:
        /// <br/>Permission to view the content of the page or blogpost and its corresponding space. Permission to delete comments in the space.
        /// </remarks>
        /// <param name="comment_id">The ID of the comment to be deleted.</param>
        /// <returns>Returned if the inline comment is deleted.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task DeleteInlineCommentAsync(long comment_id, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Get children inline comments
        /// </summary>
        /// <remarks>
        /// Returns the children inline comments of specific comment. The number of results is limited by the `limit` parameter and additional results (if available)
        /// <br/>will be available through the `next` URL present in the `Link` response header.
        /// <br/>
        /// <br/>**[Permissions](https://confluence.atlassian.com/x/_AozKw) required**:
        /// <br/>Permission to view the content of the page and its corresponding space.
        /// </remarks>
        /// <param name="id">The ID of the parent comment for which inline comment children should be returned.</param>
        /// <param name="body_format">The content format type to be returned in the `body` field of the response. If available, the representation will be available under a response field of the same name under the `body` field.</param>
        /// <param name="sort">Used to sort the result by a particular field.</param>
        /// <param name="cursor">Used for pagination, this opaque cursor will be returned in the `next` URL in the `Link` response header. Use the relative URL in the `Link` header to retrieve the `next` set of results.</param>
        /// <param name="limit">Maximum number of footer comments per result to return. If more results exist, use the `Link` header to retrieve a relative URL that will return the next set of results.</param>
        /// <returns>Returned if the requested footer comments are returned.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Response94> GetInlineCommentChildrenAsync(long id, PrimaryBodyRepresentation? body_format, CommentSortOrder? sort, string cursor, int? limit);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get children inline comments
        /// </summary>
        /// <remarks>
        /// Returns the children inline comments of specific comment. The number of results is limited by the `limit` parameter and additional results (if available)
        /// <br/>will be available through the `next` URL present in the `Link` response header.
        /// <br/>
        /// <br/>**[Permissions](https://confluence.atlassian.com/x/_AozKw) required**:
        /// <br/>Permission to view the content of the page and its corresponding space.
        /// </remarks>
        /// <param name="id">The ID of the parent comment for which inline comment children should be returned.</param>
        /// <param name="body_format">The content format type to be returned in the `body` field of the response. If available, the representation will be available under a response field of the same name under the `body` field.</param>
        /// <param name="sort">Used to sort the result by a particular field.</param>
        /// <param name="cursor">Used for pagination, this opaque cursor will be returned in the `next` URL in the `Link` response header. Use the relative URL in the `Link` header to retrieve the `next` set of results.</param>
        /// <param name="limit">Maximum number of footer comments per result to return. If more results exist, use the `Link` header to retrieve a relative URL that will return the next set of results.</param>
        /// <returns>Returned if the requested footer comments are returned.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Response94> GetInlineCommentChildrenAsync(long id, PrimaryBodyRepresentation? body_format, CommentSortOrder? sort, string cursor, int? limit, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Get like count for inline comment
        /// </summary>
        /// <remarks>
        /// Returns the count of likes of specific inline comment.
        /// <br/>
        /// <br/>**[Permissions](https://confluence.atlassian.com/x/_AozKw) required**:
        /// <br/>Permission to view the content of the page/blogpost and its corresponding space.
        /// </remarks>
        /// <param name="id">The ID of the inline comment for which like count should be returned.</param>
        /// <returns>Returned if the requested count is returned.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Anonymous19> GetInlineLikeCountAsync(long id);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get like count for inline comment
        /// </summary>
        /// <remarks>
        /// Returns the count of likes of specific inline comment.
        /// <br/>
        /// <br/>**[Permissions](https://confluence.atlassian.com/x/_AozKw) required**:
        /// <br/>Permission to view the content of the page/blogpost and its corresponding space.
        /// </remarks>
        /// <param name="id">The ID of the inline comment for which like count should be returned.</param>
        /// <returns>Returned if the requested count is returned.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Anonymous19> GetInlineLikeCountAsync(long id, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Get account IDs of likes for inline comment
        /// </summary>
        /// <remarks>
        /// Returns the account IDs of likes of specific inline comment.
        /// <br/>
        /// <br/>**[Permissions](https://confluence.atlassian.com/x/_AozKw) required**:
        /// <br/>Permission to view the content of the page/blogpost and its corresponding space.
        /// </remarks>
        /// <param name="id">The ID of the inline comment for which like count should be returned.</param>
        /// <param name="cursor">Used for pagination, this opaque cursor will be returned in the `next` URL in the `Link` response header. Use the relative URL in the `Link` header to retrieve the `next` set of results.</param>
        /// <param name="limit">Maximum number of account IDs per result to return. If more results exist, use the `Link` header to retrieve a relative URL that will return the next set of results.</param>
        /// <returns>Returned if the requested account IDs are returned.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Response95> GetInlineLikeUsersAsync(long id, string cursor, int? limit);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get account IDs of likes for inline comment
        /// </summary>
        /// <remarks>
        /// Returns the account IDs of likes of specific inline comment.
        /// <br/>
        /// <br/>**[Permissions](https://confluence.atlassian.com/x/_AozKw) required**:
        /// <br/>Permission to view the content of the page/blogpost and its corresponding space.
        /// </remarks>
        /// <param name="id">The ID of the inline comment for which like count should be returned.</param>
        /// <param name="cursor">Used for pagination, this opaque cursor will be returned in the `next` URL in the `Link` response header. Use the relative URL in the `Link` header to retrieve the `next` set of results.</param>
        /// <param name="limit">Maximum number of account IDs per result to return. If more results exist, use the `Link` header to retrieve a relative URL that will return the next set of results.</param>
        /// <returns>Returned if the requested account IDs are returned.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Response95> GetInlineLikeUsersAsync(long id, string cursor, int? limit, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Get permitted operations for inline comment
        /// </summary>
        /// <remarks>
        /// Returns the permitted operations on specific inline comment.
        /// <br/>
        /// <br/>**[Permissions](https://confluence.atlassian.com/x/_AozKw) required**:
        /// <br/>Permission to view the parent content of the inline comment and its corresponding space.
        /// </remarks>
        /// <param name="id">The ID of the inline comment for which operations should be returned.</param>
        /// <returns>Returned if the requested operations are returned.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<PermittedOperationsResponse> GetInlineCommentOperationsAsync(long id);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get permitted operations for inline comment
        /// </summary>
        /// <remarks>
        /// Returns the permitted operations on specific inline comment.
        /// <br/>
        /// <br/>**[Permissions](https://confluence.atlassian.com/x/_AozKw) required**:
        /// <br/>Permission to view the parent content of the inline comment and its corresponding space.
        /// </remarks>
        /// <param name="id">The ID of the inline comment for which operations should be returned.</param>
        /// <returns>Returned if the requested operations are returned.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<PermittedOperationsResponse> GetInlineCommentOperationsAsync(long id, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Get inline comment versions
        /// </summary>
        /// <remarks>
        /// Retrieves the versions of the specified inline comment.
        /// <br/>
        /// <br/>**[Permissions](https://confluence.atlassian.com/x/_AozKw) required**:
        /// <br/>Permission to view the content of the page or blog post and its corresponding space.
        /// </remarks>
        /// <param name="id">The ID of the inline comment for which versions should be returned</param>
        /// <param name="body_format">The content format types to be returned in the `body` field of the response. If available, the representation will be available under a response field of the same name under the `body` field.</param>
        /// <param name="cursor">Used for pagination, this opaque cursor will be returned in the `next` URL in the `Link` response header. Use the relative URL in the `Link` header to retrieve the `next` set of results.</param>
        /// <param name="limit">Maximum number of versions per result to return. If more results exist, use the `Link` header to retrieve a relative URL that will return the next set of results.</param>
        /// <param name="sort">Used to sort the result by a particular field.</param>
        /// <returns>Returned if the requested inline comment versions are returned.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Response96> GetInlineCommentVersionsAsync(long id, PrimaryBodyRepresentation? body_format, string cursor, int? limit, VersionSortOrder? sort);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get inline comment versions
        /// </summary>
        /// <remarks>
        /// Retrieves the versions of the specified inline comment.
        /// <br/>
        /// <br/>**[Permissions](https://confluence.atlassian.com/x/_AozKw) required**:
        /// <br/>Permission to view the content of the page or blog post and its corresponding space.
        /// </remarks>
        /// <param name="id">The ID of the inline comment for which versions should be returned</param>
        /// <param name="body_format">The content format types to be returned in the `body` field of the response. If available, the representation will be available under a response field of the same name under the `body` field.</param>
        /// <param name="cursor">Used for pagination, this opaque cursor will be returned in the `next` URL in the `Link` response header. Use the relative URL in the `Link` header to retrieve the `next` set of results.</param>
        /// <param name="limit">Maximum number of versions per result to return. If more results exist, use the `Link` header to retrieve a relative URL that will return the next set of results.</param>
        /// <param name="sort">Used to sort the result by a particular field.</param>
        /// <returns>Returned if the requested inline comment versions are returned.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Response96> GetInlineCommentVersionsAsync(long id, PrimaryBodyRepresentation? body_format, string cursor, int? limit, VersionSortOrder? sort, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Get version details for inline comment version
        /// </summary>
        /// <remarks>
        /// Retrieves version details for the specified inline comment version.
        /// <br/>
        /// <br/>**[Permissions](https://confluence.atlassian.com/x/_AozKw) required**:
        /// <br/>Permission to view the content of the page or blog post and its corresponding space.
        /// </remarks>
        /// <param name="id">The ID of the inline comment for which version details should be returned.</param>
        /// <param name="version_number">The version number of the inline comment to be returned.</param>
        /// <returns>Returned if the requested version details are successfully retrieved.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<DetailedVersion> GetInlineCommentVersionDetailsAsync(long id, long version_number);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get version details for inline comment version
        /// </summary>
        /// <remarks>
        /// Retrieves version details for the specified inline comment version.
        /// <br/>
        /// <br/>**[Permissions](https://confluence.atlassian.com/x/_AozKw) required**:
        /// <br/>Permission to view the content of the page or blog post and its corresponding space.
        /// </remarks>
        /// <param name="id">The ID of the inline comment for which version details should be returned.</param>
        /// <param name="version_number">The version number of the inline comment to be returned.</param>
        /// <returns>Returned if the requested version details are successfully retrieved.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<DetailedVersion> GetInlineCommentVersionDetailsAsync(long id, long version_number, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Get content properties for comment
        /// </summary>
        /// <remarks>
        /// Retrieves Content Properties attached to a specified comment.
        /// <br/>
        /// <br/>**[Permissions](https://confluence.atlassian.com/x/_AozKw) required**:
        /// <br/>Permission to view the comment.
        /// </remarks>
        /// <param name="comment_id">The ID of the comment for which content properties should be returned.</param>
        /// <param name="key">Filters the response to return a specific content property with matching key (case sensitive).</param>
        /// <param name="sort">Used to sort the result by a particular field.</param>
        /// <param name="cursor">Used for pagination, this opaque cursor will be returned in the `next` URL in the `Link` response header. Use the relative URL in the `Link` header to retrieve the `next` set of results.</param>
        /// <param name="limit">Maximum number of attachments per result to return. If more results exist, use the `Link` header to retrieve a relative URL that will return the next set of results.</param>
        /// <returns>Returned if the requested content properties are successfully retrieved.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Response97> GetCommentContentPropertiesAsync(long comment_id, string key, ContentPropertySortOrder? sort, string cursor, int? limit);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get content properties for comment
        /// </summary>
        /// <remarks>
        /// Retrieves Content Properties attached to a specified comment.
        /// <br/>
        /// <br/>**[Permissions](https://confluence.atlassian.com/x/_AozKw) required**:
        /// <br/>Permission to view the comment.
        /// </remarks>
        /// <param name="comment_id">The ID of the comment for which content properties should be returned.</param>
        /// <param name="key">Filters the response to return a specific content property with matching key (case sensitive).</param>
        /// <param name="sort">Used to sort the result by a particular field.</param>
        /// <param name="cursor">Used for pagination, this opaque cursor will be returned in the `next` URL in the `Link` response header. Use the relative URL in the `Link` header to retrieve the `next` set of results.</param>
        /// <param name="limit">Maximum number of attachments per result to return. If more results exist, use the `Link` header to retrieve a relative URL that will return the next set of results.</param>
        /// <returns>Returned if the requested content properties are successfully retrieved.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Response97> GetCommentContentPropertiesAsync(long comment_id, string key, ContentPropertySortOrder? sort, string cursor, int? limit, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Create content property for comment
        /// </summary>
        /// <remarks>
        /// Creates a new content property for a comment.
        /// <br/>
        /// <br/>**[Permissions](https://confluence.atlassian.com/x/_AozKw) required**:
        /// <br/>Permission to update the comment.
        /// </remarks>
        /// <param name="comment_id">The ID of the comment to create a property for.</param>
        /// <param name="body">The content property to be created</param>
        /// <returns>Returned if the content property was created successfully.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<ContentProperty> CreateCommentPropertyAsync(long comment_id, ContentPropertyCreateRequest body);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Create content property for comment
        /// </summary>
        /// <remarks>
        /// Creates a new content property for a comment.
        /// <br/>
        /// <br/>**[Permissions](https://confluence.atlassian.com/x/_AozKw) required**:
        /// <br/>Permission to update the comment.
        /// </remarks>
        /// <param name="comment_id">The ID of the comment to create a property for.</param>
        /// <param name="body">The content property to be created</param>
        /// <returns>Returned if the content property was created successfully.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<ContentProperty> CreateCommentPropertyAsync(long comment_id, ContentPropertyCreateRequest body, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Get content property for comment by id
        /// </summary>
        /// <remarks>
        /// Retrieves a specific Content Property by ID that is attached to a specified comment.
        /// <br/>
        /// <br/>**[Permissions](https://confluence.atlassian.com/x/_AozKw) required**:
        /// <br/>Permission to view the comment.
        /// </remarks>
        /// <param name="comment_id">The ID of the comment for which content properties should be returned.</param>
        /// <param name="property_id">The ID of the content property being requested.</param>
        /// <returns>Returned if the requested content property is successfully retrieved.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<ContentProperty> GetCommentContentPropertiesByIdAsync(long comment_id, long property_id);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get content property for comment by id
        /// </summary>
        /// <remarks>
        /// Retrieves a specific Content Property by ID that is attached to a specified comment.
        /// <br/>
        /// <br/>**[Permissions](https://confluence.atlassian.com/x/_AozKw) required**:
        /// <br/>Permission to view the comment.
        /// </remarks>
        /// <param name="comment_id">The ID of the comment for which content properties should be returned.</param>
        /// <param name="property_id">The ID of the content property being requested.</param>
        /// <returns>Returned if the requested content property is successfully retrieved.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<ContentProperty> GetCommentContentPropertiesByIdAsync(long comment_id, long property_id, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Update content property for comment by id
        /// </summary>
        /// <remarks>
        /// Update a content property for a comment by its id. 
        /// <br/>
        /// <br/>**[Permissions](https://confluence.atlassian.com/x/_AozKw) required**:
        /// <br/>Permission to edit the comment.
        /// </remarks>
        /// <param name="comment_id">The ID of the comment the property belongs to.</param>
        /// <param name="property_id">The ID of the property to be updated.</param>
        /// <param name="body">The content property to be updated.</param>
        /// <returns>Returned if the content property was updated successfully.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<ContentProperty> UpdateCommentPropertyByIdAsync(long comment_id, long property_id, ContentPropertyUpdateRequest body);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Update content property for comment by id
        /// </summary>
        /// <remarks>
        /// Update a content property for a comment by its id. 
        /// <br/>
        /// <br/>**[Permissions](https://confluence.atlassian.com/x/_AozKw) required**:
        /// <br/>Permission to edit the comment.
        /// </remarks>
        /// <param name="comment_id">The ID of the comment the property belongs to.</param>
        /// <param name="property_id">The ID of the property to be updated.</param>
        /// <param name="body">The content property to be updated.</param>
        /// <returns>Returned if the content property was updated successfully.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<ContentProperty> UpdateCommentPropertyByIdAsync(long comment_id, long property_id, ContentPropertyUpdateRequest body, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Delete content property for comment by id
        /// </summary>
        /// <remarks>
        /// Deletes a content property for a comment by its id. 
        /// <br/>
        /// <br/>**[Permissions](https://confluence.atlassian.com/x/_AozKw) required**:
        /// <br/>Permission to edit the comment.
        /// </remarks>
        /// <param name="comment_id">The ID of the comment the property belongs to.</param>
        /// <param name="property_id">The ID of the property to be deleted.</param>
        /// <returns>Returned if the content property was deleted successfully.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task DeleteCommentPropertyByIdAsync(long comment_id, long property_id);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Delete content property for comment by id
        /// </summary>
        /// <remarks>
        /// Deletes a content property for a comment by its id. 
        /// <br/>
        /// <br/>**[Permissions](https://confluence.atlassian.com/x/_AozKw) required**:
        /// <br/>Permission to edit the comment.
        /// </remarks>
        /// <param name="comment_id">The ID of the comment the property belongs to.</param>
        /// <param name="property_id">The ID of the property to be deleted.</param>
        /// <returns>Returned if the content property was deleted successfully.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task DeleteCommentPropertyByIdAsync(long comment_id, long property_id, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Get tasks
        /// </summary>
        /// <remarks>
        /// Returns all tasks. The number of results is limited by the `limit` parameter and additional results (if available)
        /// <br/>will be available through the `next` URL present in the `Link` response header.
        /// <br/>
        /// <br/>**[Permissions](https://confluence.atlassian.com/x/_AozKw) required**:
        /// <br/>Permission to access the Confluence site ('Can use' global permission).
        /// <br/>Only tasks that the user has permission to view will be returned.
        /// </remarks>
        /// <param name="body_format">The content format types to be returned in the `body` field of the response. If available, the representation will be available under a response field of the same name under the `body` field.</param>
        /// <param name="include_blank_tasks">Specifies whether to include blank tasks in the response. Defaults to `true`.</param>
        /// <param name="status">Filters on the status of the task.</param>
        /// <param name="task_id">Filters on task ID. Multiple IDs can be specified.</param>
        /// <param name="space_id">Filters on the space ID of the task. Multiple IDs can be specified.</param>
        /// <param name="page_id">Filters on the page ID of the task. Multiple IDs can be specified. Note - page and blog post filters can be used in conjunction.</param>
        /// <param name="blogpost_id">Filters on the blog post ID of the task. Multiple IDs can be specified. Note - page and blog post filters can be used in conjunction.</param>
        /// <param name="created_by">Filters on the Account ID of the user who created this task. Multiple IDs can be specified.</param>
        /// <param name="assigned_to">Filters on the Account ID of the user to whom this task is assigned. Multiple IDs can be specified.</param>
        /// <param name="completed_by">Filters on the Account ID of the user who completed this task. Multiple IDs can be specified.</param>
        /// <param name="created_at_from">Filters on start of date-time range of task based on creation date (inclusive). Input is epoch time in milliseconds.</param>
        /// <param name="created_at_to">Filters on end of date-time range of task based on creation date (inclusive). Input is epoch time in milliseconds.</param>
        /// <param name="due_at_from">Filters on start of date-time range of task based on due date (inclusive). Input is epoch time in milliseconds.</param>
        /// <param name="due_at_to">Filters on end of date-time range of task based on due date (inclusive). Input is epoch time in milliseconds.</param>
        /// <param name="completed_at_from">Filters on start of date-time range of task based on completion date (inclusive). Input is epoch time in milliseconds.</param>
        /// <param name="completed_at_to">Filters on end of date-time range of task based on completion date (inclusive). Input is epoch time in milliseconds.</param>
        /// <param name="cursor">Used for pagination, this opaque cursor will be returned in the `next` URL in the `Link` response header. Use the relative URL in the `Link` header to retrieve the `next` set of results.</param>
        /// <param name="limit">Maximum number of tasks per result to return. If more results exist, use the `Link` header to retrieve a relative URL that will return the next set of results.</param>
        /// <returns>Returned if the requested tasks are returned.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Response98> GetTasksAsync(PrimaryBodyRepresentation? body_format, bool? include_blank_tasks, Status2? status, System.Collections.Generic.IEnumerable<long> task_id, System.Collections.Generic.IEnumerable<long> space_id, System.Collections.Generic.IEnumerable<long> page_id, System.Collections.Generic.IEnumerable<long> blogpost_id, System.Collections.Generic.IEnumerable<string> created_by, System.Collections.Generic.IEnumerable<string> assigned_to, System.Collections.Generic.IEnumerable<string> completed_by, long? created_at_from, long? created_at_to, long? due_at_from, long? due_at_to, long? completed_at_from, long? completed_at_to, string cursor, int? limit);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get tasks
        /// </summary>
        /// <remarks>
        /// Returns all tasks. The number of results is limited by the `limit` parameter and additional results (if available)
        /// <br/>will be available through the `next` URL present in the `Link` response header.
        /// <br/>
        /// <br/>**[Permissions](https://confluence.atlassian.com/x/_AozKw) required**:
        /// <br/>Permission to access the Confluence site ('Can use' global permission).
        /// <br/>Only tasks that the user has permission to view will be returned.
        /// </remarks>
        /// <param name="body_format">The content format types to be returned in the `body` field of the response. If available, the representation will be available under a response field of the same name under the `body` field.</param>
        /// <param name="include_blank_tasks">Specifies whether to include blank tasks in the response. Defaults to `true`.</param>
        /// <param name="status">Filters on the status of the task.</param>
        /// <param name="task_id">Filters on task ID. Multiple IDs can be specified.</param>
        /// <param name="space_id">Filters on the space ID of the task. Multiple IDs can be specified.</param>
        /// <param name="page_id">Filters on the page ID of the task. Multiple IDs can be specified. Note - page and blog post filters can be used in conjunction.</param>
        /// <param name="blogpost_id">Filters on the blog post ID of the task. Multiple IDs can be specified. Note - page and blog post filters can be used in conjunction.</param>
        /// <param name="created_by">Filters on the Account ID of the user who created this task. Multiple IDs can be specified.</param>
        /// <param name="assigned_to">Filters on the Account ID of the user to whom this task is assigned. Multiple IDs can be specified.</param>
        /// <param name="completed_by">Filters on the Account ID of the user who completed this task. Multiple IDs can be specified.</param>
        /// <param name="created_at_from">Filters on start of date-time range of task based on creation date (inclusive). Input is epoch time in milliseconds.</param>
        /// <param name="created_at_to">Filters on end of date-time range of task based on creation date (inclusive). Input is epoch time in milliseconds.</param>
        /// <param name="due_at_from">Filters on start of date-time range of task based on due date (inclusive). Input is epoch time in milliseconds.</param>
        /// <param name="due_at_to">Filters on end of date-time range of task based on due date (inclusive). Input is epoch time in milliseconds.</param>
        /// <param name="completed_at_from">Filters on start of date-time range of task based on completion date (inclusive). Input is epoch time in milliseconds.</param>
        /// <param name="completed_at_to">Filters on end of date-time range of task based on completion date (inclusive). Input is epoch time in milliseconds.</param>
        /// <param name="cursor">Used for pagination, this opaque cursor will be returned in the `next` URL in the `Link` response header. Use the relative URL in the `Link` header to retrieve the `next` set of results.</param>
        /// <param name="limit">Maximum number of tasks per result to return. If more results exist, use the `Link` header to retrieve a relative URL that will return the next set of results.</param>
        /// <returns>Returned if the requested tasks are returned.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Response98> GetTasksAsync(PrimaryBodyRepresentation? body_format, bool? include_blank_tasks, Status2? status, System.Collections.Generic.IEnumerable<long> task_id, System.Collections.Generic.IEnumerable<long> space_id, System.Collections.Generic.IEnumerable<long> page_id, System.Collections.Generic.IEnumerable<long> blogpost_id, System.Collections.Generic.IEnumerable<string> created_by, System.Collections.Generic.IEnumerable<string> assigned_to, System.Collections.Generic.IEnumerable<string> completed_by, long? created_at_from, long? created_at_to, long? due_at_from, long? due_at_to, long? completed_at_from, long? completed_at_to, string cursor, int? limit, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Get task by id
        /// </summary>
        /// <remarks>
        /// Returns a specific task. 
        /// <br/>
        /// <br/>**[Permissions](https://confluence.atlassian.com/x/_AozKw) required**:
        /// <br/>Permission to view the containing page or blog post and its corresponding space.
        /// </remarks>
        /// <param name="id">The ID of the task to be returned. If you don't know the task ID, use Get tasks and filter the results.</param>
        /// <param name="body_format">The content format types to be returned in the `body` field of the response. If available, the representation will be available under a response field of the same name under the `body` field.</param>
        /// <returns>Returned if the requested task is returned.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<ConfluenceTask> GetTaskByIdAsync(long id, PrimaryBodyRepresentation? body_format);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get task by id
        /// </summary>
        /// <remarks>
        /// Returns a specific task. 
        /// <br/>
        /// <br/>**[Permissions](https://confluence.atlassian.com/x/_AozKw) required**:
        /// <br/>Permission to view the containing page or blog post and its corresponding space.
        /// </remarks>
        /// <param name="id">The ID of the task to be returned. If you don't know the task ID, use Get tasks and filter the results.</param>
        /// <param name="body_format">The content format types to be returned in the `body` field of the response. If available, the representation will be available under a response field of the same name under the `body` field.</param>
        /// <returns>Returned if the requested task is returned.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<ConfluenceTask> GetTaskByIdAsync(long id, PrimaryBodyRepresentation? body_format, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Update task
        /// </summary>
        /// <remarks>
        /// Update a task by id. This endpoint currently only supports updating task status.
        /// <br/>
        /// <br/>**[Permissions](https://confluence.atlassian.com/x/_AozKw) required**:
        /// <br/>Permission to edit the containing page or blog post and view its corresponding space.
        /// </remarks>
        /// <param name="id">The ID of the task to be updated. If you don't know the task ID, use Get tasks and filter the results.</param>
        /// <param name="body_format">The content format types to be returned in the `body` field of the response. If available, the representation will be available under a response field of the same name under the `body` field.</param>
        /// <returns>Returned if the requested task is updated.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<ConfluenceTask> UpdateTaskAsync(long id, PrimaryBodyRepresentation? body_format, object body);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Update task
        /// </summary>
        /// <remarks>
        /// Update a task by id. This endpoint currently only supports updating task status.
        /// <br/>
        /// <br/>**[Permissions](https://confluence.atlassian.com/x/_AozKw) required**:
        /// <br/>Permission to edit the containing page or blog post and view its corresponding space.
        /// </remarks>
        /// <param name="id">The ID of the task to be updated. If you don't know the task ID, use Get tasks and filter the results.</param>
        /// <param name="body_format">The content format types to be returned in the `body` field of the response. If available, the representation will be available under a response field of the same name under the `body` field.</param>
        /// <returns>Returned if the requested task is updated.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<ConfluenceTask> UpdateTaskAsync(long id, PrimaryBodyRepresentation? body_format, object body, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Get child pages
        /// </summary>
        /// <remarks>
        /// Returns all child pages for given page id. The number of results is limited by the `limit` parameter and additional results (if available)
        /// <br/>will be available through the `next` URL present in the `Link` response header.
        /// <br/>
        /// <br/>**[Permissions](https://confluence.atlassian.com/x/_AozKw) required**:
        /// <br/>Permission to access the Confluence site ('Can use' global permission).
        /// <br/>Only pages that the user has permission to view will be returned.
        /// </remarks>
        /// <param name="id">The ID of the parent page. If you don't know the page ID, use Get pages and filter the results.</param>
        /// <param name="cursor">Used for pagination, this opaque cursor will be returned in the `next` URL in the `Link` response header. Use the relative URL in the `Link` header to retrieve the `next` set of results.</param>
        /// <param name="limit">Maximum number of pages per result to return. If more results exist, use the `Link` header to retrieve a relative URL that will return the next set of results.</param>
        /// <param name="sort">Used to sort the result by a particular field.</param>
        /// <returns>Returned if the requested child pages are returned.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        [System.Obsolete]
        System.Threading.Tasks.Task<Response99> GetChildPagesAsync(long id, string cursor, int? limit, string sort);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get child pages
        /// </summary>
        /// <remarks>
        /// Returns all child pages for given page id. The number of results is limited by the `limit` parameter and additional results (if available)
        /// <br/>will be available through the `next` URL present in the `Link` response header.
        /// <br/>
        /// <br/>**[Permissions](https://confluence.atlassian.com/x/_AozKw) required**:
        /// <br/>Permission to access the Confluence site ('Can use' global permission).
        /// <br/>Only pages that the user has permission to view will be returned.
        /// </remarks>
        /// <param name="id">The ID of the parent page. If you don't know the page ID, use Get pages and filter the results.</param>
        /// <param name="cursor">Used for pagination, this opaque cursor will be returned in the `next` URL in the `Link` response header. Use the relative URL in the `Link` header to retrieve the `next` set of results.</param>
        /// <param name="limit">Maximum number of pages per result to return. If more results exist, use the `Link` header to retrieve a relative URL that will return the next set of results.</param>
        /// <param name="sort">Used to sort the result by a particular field.</param>
        /// <returns>Returned if the requested child pages are returned.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        [System.Obsolete]
        System.Threading.Tasks.Task<Response99> GetChildPagesAsync(long id, string cursor, int? limit, string sort, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Get child custom content
        /// </summary>
        /// <remarks>
        /// Returns all child custom content for given custom content id. The number of results is limited by the `limit` parameter and additional results (if available)
        /// <br/>will be available through the `next` URL present in the `Link` response header.
        /// <br/>
        /// <br/>**[Permissions](https://confluence.atlassian.com/x/_AozKw) required**:
        /// <br/>Permission to access the Confluence site ('Can use' global permission).
        /// <br/>Only custom content that the user has permission to view will be returned.
        /// </remarks>
        /// <param name="id">The ID of the parent custom content. If you don't know the custom content ID, use Get custom-content and filter the results.</param>
        /// <param name="cursor">Used for pagination, this opaque cursor will be returned in the `next` URL in the `Link` response header. Use the relative URL in the `Link` header to retrieve the `next` set of results.</param>
        /// <param name="limit">Maximum number of pages per result to return. If more results exist, use the `Link` header to retrieve a relative URL that will return the next set of results.</param>
        /// <param name="sort">Used to sort the result by a particular field.</param>
        /// <returns>Returned if the requested child custom content are returned.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Response100> GetChildCustomContentAsync(long id, string cursor, int? limit, string sort);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get child custom content
        /// </summary>
        /// <remarks>
        /// Returns all child custom content for given custom content id. The number of results is limited by the `limit` parameter and additional results (if available)
        /// <br/>will be available through the `next` URL present in the `Link` response header.
        /// <br/>
        /// <br/>**[Permissions](https://confluence.atlassian.com/x/_AozKw) required**:
        /// <br/>Permission to access the Confluence site ('Can use' global permission).
        /// <br/>Only custom content that the user has permission to view will be returned.
        /// </remarks>
        /// <param name="id">The ID of the parent custom content. If you don't know the custom content ID, use Get custom-content and filter the results.</param>
        /// <param name="cursor">Used for pagination, this opaque cursor will be returned in the `next` URL in the `Link` response header. Use the relative URL in the `Link` header to retrieve the `next` set of results.</param>
        /// <param name="limit">Maximum number of pages per result to return. If more results exist, use the `Link` header to retrieve a relative URL that will return the next set of results.</param>
        /// <param name="sort">Used to sort the result by a particular field.</param>
        /// <returns>Returned if the requested child custom content are returned.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Response100> GetChildCustomContentAsync(long id, string cursor, int? limit, string sort, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Get direct children of a page
        /// </summary>
        /// <remarks>
        /// Returns all children for given page id in the content tree. The number of results is limited by the `limit` parameter and additional results (if available)
        /// <br/>will be available through the `next` URL present in the `Link` response header.
        /// <br/>
        /// <br/>The following types of content will be returned:
        /// <br/>- Database
        /// <br/>- Embed
        /// <br/>- Folder
        /// <br/>- Page
        /// <br/>- Whiteboard
        /// <br/>
        /// <br/>This endpoint returns minimal information about each child. To fetch more details, use a related endpoint based on the content type, such
        /// <br/>as:
        /// <br/>
        /// <br/>- [Get database by id](https://developer.atlassian.com/cloud/confluence/rest/v2/api-group-database/#api-databases-id-get)
        /// <br/>- [Get embed by id](https://developer.atlassian.com/cloud/confluence/rest/v2/api-group-smart-link/#api-embeds-id-get)
        /// <br/>- [Get folder by id](https://developer.atlassian.com/cloud/confluence/rest/v2/api-group-folder/#api-folders-id-get)
        /// <br/>- [Get page by id](https://developer.atlassian.com/cloud/confluence/rest/v2/api-group-page/#api-pages-id-get)
        /// <br/>- [Get whiteboard by id](https://developer.atlassian.com/cloud/confluence/rest/v2/api-group-whiteboard/#api-whiteboards-id-get).
        /// <br/>
        /// <br/>**[Permissions](https://confluence.atlassian.com/x/_AozKw) required**:
        /// <br/>Permission to access the Confluence site ('Can use' global permission).
        /// <br/>Only content that the user has permission to view will be returned.
        /// </remarks>
        /// <param name="id">The ID of the parent page.</param>
        /// <param name="cursor">Used for pagination, this opaque cursor will be returned in the `next` URL in the `Link` response header. Use the relative URL in the `Link` header to retrieve the `next` set of results.</param>
        /// <param name="limit">Maximum number of items per result to return. If more results exist, use the `Link` header to retrieve a relative URL that will return the next set of results.</param>
        /// <param name="sort">Used to sort the result by a particular field.</param>
        /// <returns>Returned if the requested children are returned.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Response101> GetPageDirectChildrenAsync(long id, string cursor, int? limit, string sort);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get direct children of a page
        /// </summary>
        /// <remarks>
        /// Returns all children for given page id in the content tree. The number of results is limited by the `limit` parameter and additional results (if available)
        /// <br/>will be available through the `next` URL present in the `Link` response header.
        /// <br/>
        /// <br/>The following types of content will be returned:
        /// <br/>- Database
        /// <br/>- Embed
        /// <br/>- Folder
        /// <br/>- Page
        /// <br/>- Whiteboard
        /// <br/>
        /// <br/>This endpoint returns minimal information about each child. To fetch more details, use a related endpoint based on the content type, such
        /// <br/>as:
        /// <br/>
        /// <br/>- [Get database by id](https://developer.atlassian.com/cloud/confluence/rest/v2/api-group-database/#api-databases-id-get)
        /// <br/>- [Get embed by id](https://developer.atlassian.com/cloud/confluence/rest/v2/api-group-smart-link/#api-embeds-id-get)
        /// <br/>- [Get folder by id](https://developer.atlassian.com/cloud/confluence/rest/v2/api-group-folder/#api-folders-id-get)
        /// <br/>- [Get page by id](https://developer.atlassian.com/cloud/confluence/rest/v2/api-group-page/#api-pages-id-get)
        /// <br/>- [Get whiteboard by id](https://developer.atlassian.com/cloud/confluence/rest/v2/api-group-whiteboard/#api-whiteboards-id-get).
        /// <br/>
        /// <br/>**[Permissions](https://confluence.atlassian.com/x/_AozKw) required**:
        /// <br/>Permission to access the Confluence site ('Can use' global permission).
        /// <br/>Only content that the user has permission to view will be returned.
        /// </remarks>
        /// <param name="id">The ID of the parent page.</param>
        /// <param name="cursor">Used for pagination, this opaque cursor will be returned in the `next` URL in the `Link` response header. Use the relative URL in the `Link` header to retrieve the `next` set of results.</param>
        /// <param name="limit">Maximum number of items per result to return. If more results exist, use the `Link` header to retrieve a relative URL that will return the next set of results.</param>
        /// <param name="sort">Used to sort the result by a particular field.</param>
        /// <returns>Returned if the requested children are returned.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Response101> GetPageDirectChildrenAsync(long id, string cursor, int? limit, string sort, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Get all ancestors of page
        /// </summary>
        /// <remarks>
        /// Returns all ancestors for a given page by ID in top-to-bottom order (that is, the highest ancestor is the first
        /// <br/>item in the response payload). The number of results is limited by the `limit` parameter and additional results (if available)
        /// <br/>will be available by calling this endpoint with the ID of first ancestor in the response payload.
        /// <br/>
        /// <br/>This endpoint returns minimal information about each ancestor. To fetch more details, use a related endpoint, such
        /// <br/>as [Get page by id](https://developer.atlassian.com/cloud/confluence/rest/v2/api-group-page/#api-pages-id-get).
        /// <br/>
        /// <br/>**[Permissions](https://confluence.atlassian.com/x/_AozKw) required**:
        /// <br/>Permission to access the Confluence site ('Can use' global permission).
        /// </remarks>
        /// <param name="id">The ID of the page.</param>
        /// <param name="limit">Maximum number of pages per result to return. If more results exist, call this endpoint with the highest ancestor's ID to fetch the next set of results.</param>
        /// <returns>Returned if the requested ancestors are returned.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Response102> GetPageAncestorsAsync(long id, int? limit);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get all ancestors of page
        /// </summary>
        /// <remarks>
        /// Returns all ancestors for a given page by ID in top-to-bottom order (that is, the highest ancestor is the first
        /// <br/>item in the response payload). The number of results is limited by the `limit` parameter and additional results (if available)
        /// <br/>will be available by calling this endpoint with the ID of first ancestor in the response payload.
        /// <br/>
        /// <br/>This endpoint returns minimal information about each ancestor. To fetch more details, use a related endpoint, such
        /// <br/>as [Get page by id](https://developer.atlassian.com/cloud/confluence/rest/v2/api-group-page/#api-pages-id-get).
        /// <br/>
        /// <br/>**[Permissions](https://confluence.atlassian.com/x/_AozKw) required**:
        /// <br/>Permission to access the Confluence site ('Can use' global permission).
        /// </remarks>
        /// <param name="id">The ID of the page.</param>
        /// <param name="limit">Maximum number of pages per result to return. If more results exist, call this endpoint with the highest ancestor's ID to fetch the next set of results.</param>
        /// <returns>Returned if the requested ancestors are returned.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Response102> GetPageAncestorsAsync(long id, int? limit, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Get descendants of page
        /// </summary>
        /// <remarks>
        /// Returns descendants in the content tree for a given page by ID in top-to-bottom order (that is, the highest descendant is the first
        /// <br/>item in the response payload). The number of results is limited by the `limit` parameter and additional results (if available)
        /// <br/>will be available by calling this endpoint with the cursor in the response payload. There is also a `depth` parameter specifying depth
        /// <br/>of descendants to be fetched.
        /// <br/>
        /// <br/>The following types of content will be returned:
        /// <br/>- Database
        /// <br/>- Embed
        /// <br/>- Folder
        /// <br/>- Page
        /// <br/>- Whiteboard
        /// <br/>
        /// <br/>This endpoint returns minimal information about each descendant. To fetch more details, use a related endpoint based on the content type, such
        /// <br/>as:
        /// <br/>
        /// <br/>- [Get database by id](https://developer.atlassian.com/cloud/confluence/rest/v2/api-group-database/#api-databases-id-get)
        /// <br/>- [Get embed by id](https://developer.atlassian.com/cloud/confluence/rest/v2/api-group-smart-link/#api-embeds-id-get)
        /// <br/>- [Get folder by id](https://developer.atlassian.com/cloud/confluence/rest/v2/api-group-folder/#api-folders-id-get)
        /// <br/>- [Get page by id](https://developer.atlassian.com/cloud/confluence/rest/v2/api-group-page/#api-pages-id-get)
        /// <br/>- [Get whiteboard by id](https://developer.atlassian.com/cloud/confluence/rest/v2/api-group-whiteboard/#api-whiteboards-id-get).
        /// <br/>
        /// <br/>**[Permissions](https://confluence.atlassian.com/x/_AozKw) required**:
        /// <br/>Permission to access the Confluence site ('Can use' global permission).
        /// <br/>Permission to view the page and its corresponding space
        /// </remarks>
        /// <param name="id">The ID of the page.</param>
        /// <param name="limit">Maximum number of items per result to return. If more results exist, call the endpoint with the cursor to fetch the next set of results.</param>
        /// <param name="depth">Maximum depth of descendants to return. If more results are required, use the endpoint corresponding to the content type of the deepest descendant to fetch more descendants.</param>
        /// <param name="cursor">Used for pagination, this opaque cursor will be returned in the `next` URL in the `Link` response header. Use the relative URL in the `Link` header to retrieve the `next` set of results.</param>
        /// <returns>Returned if the requested descendants are returned.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Response103> GetPageDescendantsAsync(long id, int? limit, int? depth, string cursor);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get descendants of page
        /// </summary>
        /// <remarks>
        /// Returns descendants in the content tree for a given page by ID in top-to-bottom order (that is, the highest descendant is the first
        /// <br/>item in the response payload). The number of results is limited by the `limit` parameter and additional results (if available)
        /// <br/>will be available by calling this endpoint with the cursor in the response payload. There is also a `depth` parameter specifying depth
        /// <br/>of descendants to be fetched.
        /// <br/>
        /// <br/>The following types of content will be returned:
        /// <br/>- Database
        /// <br/>- Embed
        /// <br/>- Folder
        /// <br/>- Page
        /// <br/>- Whiteboard
        /// <br/>
        /// <br/>This endpoint returns minimal information about each descendant. To fetch more details, use a related endpoint based on the content type, such
        /// <br/>as:
        /// <br/>
        /// <br/>- [Get database by id](https://developer.atlassian.com/cloud/confluence/rest/v2/api-group-database/#api-databases-id-get)
        /// <br/>- [Get embed by id](https://developer.atlassian.com/cloud/confluence/rest/v2/api-group-smart-link/#api-embeds-id-get)
        /// <br/>- [Get folder by id](https://developer.atlassian.com/cloud/confluence/rest/v2/api-group-folder/#api-folders-id-get)
        /// <br/>- [Get page by id](https://developer.atlassian.com/cloud/confluence/rest/v2/api-group-page/#api-pages-id-get)
        /// <br/>- [Get whiteboard by id](https://developer.atlassian.com/cloud/confluence/rest/v2/api-group-whiteboard/#api-whiteboards-id-get).
        /// <br/>
        /// <br/>**[Permissions](https://confluence.atlassian.com/x/_AozKw) required**:
        /// <br/>Permission to access the Confluence site ('Can use' global permission).
        /// <br/>Permission to view the page and its corresponding space
        /// </remarks>
        /// <param name="id">The ID of the page.</param>
        /// <param name="limit">Maximum number of items per result to return. If more results exist, call the endpoint with the cursor to fetch the next set of results.</param>
        /// <param name="depth">Maximum depth of descendants to return. If more results are required, use the endpoint corresponding to the content type of the deepest descendant to fetch more descendants.</param>
        /// <param name="cursor">Used for pagination, this opaque cursor will be returned in the `next` URL in the `Link` response header. Use the relative URL in the `Link` header to retrieve the `next` set of results.</param>
        /// <returns>Returned if the requested descendants are returned.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Response103> GetPageDescendantsAsync(long id, int? limit, int? depth, string cursor, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Create bulk user lookup using ids
        /// </summary>
        /// <remarks>
        /// Returns user details for the ids provided in the request body.
        /// <br/>
        /// <br/>**[Permissions](https://confluence.atlassian.com/x/_AozKw) required**:
        /// <br/>Permission to access the Confluence site ('Can use' global permission).
        /// <br/>The user must be able to view user profiles in the Confluence site.
        /// </remarks>
        /// <returns>Returned if the user info is returned for the account IDs. `results` may be empty if no account IDs were found.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Response104> CreateBulkUserLookupAsync(object body);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Create bulk user lookup using ids
        /// </summary>
        /// <remarks>
        /// Returns user details for the ids provided in the request body.
        /// <br/>
        /// <br/>**[Permissions](https://confluence.atlassian.com/x/_AozKw) required**:
        /// <br/>Permission to access the Confluence site ('Can use' global permission).
        /// <br/>The user must be able to view user profiles in the Confluence site.
        /// </remarks>
        /// <returns>Returned if the user info is returned for the account IDs. `results` may be empty if no account IDs were found.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Response104> CreateBulkUserLookupAsync(object body, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Check site access for a list of emails
        /// </summary>
        /// <remarks>
        /// Returns the list of emails from the input list that do not have access to site.
        /// <br/>
        /// <br/>**[Permissions](https://confluence.atlassian.com/x/_AozKw) required**:
        /// <br/>Permission to access the Confluence site ('Can use' global permission).
        /// </remarks>
        /// <returns>Returns object with list of emails without access to site.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Response105> CheckAccessByEmailAsync(object body);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Check site access for a list of emails
        /// </summary>
        /// <remarks>
        /// Returns the list of emails from the input list that do not have access to site.
        /// <br/>
        /// <br/>**[Permissions](https://confluence.atlassian.com/x/_AozKw) required**:
        /// <br/>Permission to access the Confluence site ('Can use' global permission).
        /// </remarks>
        /// <returns>Returns object with list of emails without access to site.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Response105> CheckAccessByEmailAsync(object body, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Invite a list of emails to the site
        /// </summary>
        /// <remarks>
        /// Invite a list of emails to the site.
        /// <br/>
        /// <br/>Ignores all invalid emails and no action is taken for the emails that already have access to the site.
        /// <br/>
        /// <br/>&lt;b&gt;NOTE:&lt;/b&gt; This API is asynchronous and may take some time to complete.
        /// <br/>
        /// <br/>**[Permissions](https://confluence.atlassian.com/x/_AozKw) required**:
        /// <br/>Permission to access the Confluence site ('Can use' global permission).
        /// </remarks>
        /// <returns>Returns object with list of emails without access to site.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task InviteByEmailAsync(object body);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Invite a list of emails to the site
        /// </summary>
        /// <remarks>
        /// Invite a list of emails to the site.
        /// <br/>
        /// <br/>Ignores all invalid emails and no action is taken for the emails that already have access to the site.
        /// <br/>
        /// <br/>&lt;b&gt;NOTE:&lt;/b&gt; This API is asynchronous and may take some time to complete.
        /// <br/>
        /// <br/>**[Permissions](https://confluence.atlassian.com/x/_AozKw) required**:
        /// <br/>Permission to access the Confluence site ('Can use' global permission).
        /// </remarks>
        /// <returns>Returns object with list of emails without access to site.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task InviteByEmailAsync(object body, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Get data policy metadata for the workspace
        /// </summary>
        /// <remarks>
        /// Returns data policy metadata for the workspace.
        /// <br/>
        /// <br/>**[Permissions](#permissions) required:**
        /// <br/>Only apps can make this request.
        /// <br/>Permission to access the Confluence site ('Can use' global permission).
        /// </remarks>
        /// <returns>Returned if the request is successful.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<DataPolicyMetadata> GetDataPolicyMetadataAsync();

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get data policy metadata for the workspace
        /// </summary>
        /// <remarks>
        /// Returns data policy metadata for the workspace.
        /// <br/>
        /// <br/>**[Permissions](#permissions) required:**
        /// <br/>Only apps can make this request.
        /// <br/>Permission to access the Confluence site ('Can use' global permission).
        /// </remarks>
        /// <returns>Returned if the request is successful.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<DataPolicyMetadata> GetDataPolicyMetadataAsync(System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Get spaces with data policies
        /// </summary>
        /// <remarks>
        /// Returns all spaces. The results will be sorted by id ascending. The number of results is limited by the `limit` parameter and
        /// <br/>additional results (if available) will be available through the `next` URL present in the `Link` response header.
        /// <br/>
        /// <br/>**[Permissions](https://confluence.atlassian.com/x/_AozKw) required**:
        /// <br/>Only apps can make this request.
        /// <br/>Permission to access the Confluence site ('Can use' global permission).
        /// <br/>Only spaces that the app has permission to view will be returned.
        /// </remarks>
        /// <param name="ids">Filter the results to spaces based on their IDs. Multiple IDs can be specified as a comma-separated list.</param>
        /// <param name="keys">Filter the results to spaces based on their keys. Multiple keys can be specified as a comma-separated list.</param>
        /// <param name="sort">Used to sort the result by a particular field.</param>
        /// <param name="cursor">Used for pagination, this opaque cursor will be returned in the `next` URL in the `Link` response header. Use the relative URL in the `Link` header to retrieve the `next` set of results.</param>
        /// <param name="limit">Maximum number of spaces per result to return. If more results exist, use the `Link` response header to retrieve a relative URL that will return the next set of results.</param>
        /// <returns>Returned if the requested spaces are returned.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Response106> GetDataPolicySpacesAsync(System.Collections.Generic.IEnumerable<long> ids, System.Collections.Generic.IEnumerable<string> keys, SpaceSortOrder? sort, string cursor, int? limit);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get spaces with data policies
        /// </summary>
        /// <remarks>
        /// Returns all spaces. The results will be sorted by id ascending. The number of results is limited by the `limit` parameter and
        /// <br/>additional results (if available) will be available through the `next` URL present in the `Link` response header.
        /// <br/>
        /// <br/>**[Permissions](https://confluence.atlassian.com/x/_AozKw) required**:
        /// <br/>Only apps can make this request.
        /// <br/>Permission to access the Confluence site ('Can use' global permission).
        /// <br/>Only spaces that the app has permission to view will be returned.
        /// </remarks>
        /// <param name="ids">Filter the results to spaces based on their IDs. Multiple IDs can be specified as a comma-separated list.</param>
        /// <param name="keys">Filter the results to spaces based on their keys. Multiple keys can be specified as a comma-separated list.</param>
        /// <param name="sort">Used to sort the result by a particular field.</param>
        /// <param name="cursor">Used for pagination, this opaque cursor will be returned in the `next` URL in the `Link` response header. Use the relative URL in the `Link` header to retrieve the `next` set of results.</param>
        /// <param name="limit">Maximum number of spaces per result to return. If more results exist, use the `Link` response header to retrieve a relative URL that will return the next set of results.</param>
        /// <returns>Returned if the requested spaces are returned.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Response106> GetDataPolicySpacesAsync(System.Collections.Generic.IEnumerable<long> ids, System.Collections.Generic.IEnumerable<string> keys, SpaceSortOrder? sort, string cursor, int? limit, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Get list of classification levels
        /// </summary>
        /// <remarks>
        /// Returns a list of [classification levels](https://developer.atlassian.com/cloud/admin/dlp/rest/intro/#Classification%20level) 
        /// <br/>available.
        /// <br/>
        /// <br/>**[Permissions](https://confluence.atlassian.com/x/_AozKw) required**:
        /// <br/>'Permission to access the Confluence site ('Can use' global permission).
        /// </remarks>
        /// <returns>Returned if classifications levels are returned.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<ClassificationLevel>> GetClassificationLevelsAsync();

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get list of classification levels
        /// </summary>
        /// <remarks>
        /// Returns a list of [classification levels](https://developer.atlassian.com/cloud/admin/dlp/rest/intro/#Classification%20level) 
        /// <br/>available.
        /// <br/>
        /// <br/>**[Permissions](https://confluence.atlassian.com/x/_AozKw) required**:
        /// <br/>'Permission to access the Confluence site ('Can use' global permission).
        /// </remarks>
        /// <returns>Returned if classifications levels are returned.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<ClassificationLevel>> GetClassificationLevelsAsync(System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Get space default classification level
        /// </summary>
        /// <remarks>
        /// Returns the [default classification level](https://support.atlassian.com/security-and-access-policies/docs/what-is-a-default-classification-level/) 
        /// <br/>for a specific space.
        /// <br/>
        /// <br/>**[Permissions](https://confluence.atlassian.com/x/_AozKw) required**:
        /// <br/>'Permission to access the Confluence site ('Can use' global permission) and permission to view the space.
        /// </remarks>
        /// <param name="id">The ID of the space for which default classification level should be returned.</param>
        /// <returns>Returned if the requested default classification level for a space is returned.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<ClassificationLevel> GetSpaceDefaultClassificationLevelAsync(long id);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get space default classification level
        /// </summary>
        /// <remarks>
        /// Returns the [default classification level](https://support.atlassian.com/security-and-access-policies/docs/what-is-a-default-classification-level/) 
        /// <br/>for a specific space.
        /// <br/>
        /// <br/>**[Permissions](https://confluence.atlassian.com/x/_AozKw) required**:
        /// <br/>'Permission to access the Confluence site ('Can use' global permission) and permission to view the space.
        /// </remarks>
        /// <param name="id">The ID of the space for which default classification level should be returned.</param>
        /// <returns>Returned if the requested default classification level for a space is returned.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<ClassificationLevel> GetSpaceDefaultClassificationLevelAsync(long id, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Update space default classification level
        /// </summary>
        /// <remarks>
        /// Update the [default classification level](https://support.atlassian.com/security-and-access-policies/docs/what-is-a-default-classification-level/) 
        /// <br/>for a specific space.
        /// <br/>
        /// <br/>**[Permissions](https://confluence.atlassian.com/x/_AozKw) required**:
        /// <br/>'Permission to access the Confluence site ('Can use' global permission) and 'Admin' permission for the space.
        /// </remarks>
        /// <param name="id">The ID of the space for which default classification level should be updated.</param>
        /// <returns>Returned if the default classification level was successfully updated.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task PutSpaceDefaultClassificationLevelAsync(long id, object body);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Update space default classification level
        /// </summary>
        /// <remarks>
        /// Update the [default classification level](https://support.atlassian.com/security-and-access-policies/docs/what-is-a-default-classification-level/) 
        /// <br/>for a specific space.
        /// <br/>
        /// <br/>**[Permissions](https://confluence.atlassian.com/x/_AozKw) required**:
        /// <br/>'Permission to access the Confluence site ('Can use' global permission) and 'Admin' permission for the space.
        /// </remarks>
        /// <param name="id">The ID of the space for which default classification level should be updated.</param>
        /// <returns>Returned if the default classification level was successfully updated.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task PutSpaceDefaultClassificationLevelAsync(long id, object body, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Delete space default classification level
        /// </summary>
        /// <remarks>
        /// Returns the [default classification level](https://support.atlassian.com/security-and-access-policies/docs/what-is-a-default-classification-level/) 
        /// <br/>for a specific space.
        /// <br/>
        /// <br/>**[Permissions](https://confluence.atlassian.com/x/_AozKw) required**:
        /// <br/>'Permission to access the Confluence site ('Can use' global permission) and 'Admin' permission for the space.
        /// </remarks>
        /// <param name="id">The ID of the space for which default classification level should be deleted.</param>
        /// <returns>Returned if the default classification level was successfully deleted.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task DeleteSpaceDefaultClassificationLevelAsync(long id);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Delete space default classification level
        /// </summary>
        /// <remarks>
        /// Returns the [default classification level](https://support.atlassian.com/security-and-access-policies/docs/what-is-a-default-classification-level/) 
        /// <br/>for a specific space.
        /// <br/>
        /// <br/>**[Permissions](https://confluence.atlassian.com/x/_AozKw) required**:
        /// <br/>'Permission to access the Confluence site ('Can use' global permission) and 'Admin' permission for the space.
        /// </remarks>
        /// <param name="id">The ID of the space for which default classification level should be deleted.</param>
        /// <returns>Returned if the default classification level was successfully deleted.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task DeleteSpaceDefaultClassificationLevelAsync(long id, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Get page classification level
        /// </summary>
        /// <remarks>
        /// Returns the [classification level](https://developer.atlassian.com/cloud/admin/dlp/rest/intro/#Classification%20level)
        /// <br/>for a specific page.
        /// <br/>
        /// <br/>**[Permissions](https://confluence.atlassian.com/x/_AozKw) required**:
        /// <br/>'Permission to access the Confluence site ('Can use' global permission) and permission to view the page.
        /// <br/>'Permission to edit the page is required if trying to view classification level for a draft.
        /// </remarks>
        /// <param name="id">The ID of the page for which classification level should be returned.</param>
        /// <param name="status">Status of page from which classification level will fetched.</param>
        /// <returns>Returned if the requested classification level for a page is returned.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<ClassificationLevel> GetPageClassificationLevelAsync(long id, Status3? status);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get page classification level
        /// </summary>
        /// <remarks>
        /// Returns the [classification level](https://developer.atlassian.com/cloud/admin/dlp/rest/intro/#Classification%20level)
        /// <br/>for a specific page.
        /// <br/>
        /// <br/>**[Permissions](https://confluence.atlassian.com/x/_AozKw) required**:
        /// <br/>'Permission to access the Confluence site ('Can use' global permission) and permission to view the page.
        /// <br/>'Permission to edit the page is required if trying to view classification level for a draft.
        /// </remarks>
        /// <param name="id">The ID of the page for which classification level should be returned.</param>
        /// <param name="status">Status of page from which classification level will fetched.</param>
        /// <returns>Returned if the requested classification level for a page is returned.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<ClassificationLevel> GetPageClassificationLevelAsync(long id, Status3? status, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Update page classification level
        /// </summary>
        /// <remarks>
        /// Updates the [classification level](https://developer.atlassian.com/cloud/admin/dlp/rest/intro/#Classification%20level)
        /// <br/>for a specific page.
        /// <br/>
        /// <br/>**[Permissions](https://confluence.atlassian.com/x/_AozKw) required**:
        /// <br/>'Permission to access the Confluence site ('Can use' global permission) and permission to edit the page.
        /// </remarks>
        /// <param name="id">The ID of the page for which classification level should be updated.</param>
        /// <returns>Returned if the classification level was successfully updated.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task PutPageClassificationLevelAsync(long id, object body);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Update page classification level
        /// </summary>
        /// <remarks>
        /// Updates the [classification level](https://developer.atlassian.com/cloud/admin/dlp/rest/intro/#Classification%20level)
        /// <br/>for a specific page.
        /// <br/>
        /// <br/>**[Permissions](https://confluence.atlassian.com/x/_AozKw) required**:
        /// <br/>'Permission to access the Confluence site ('Can use' global permission) and permission to edit the page.
        /// </remarks>
        /// <param name="id">The ID of the page for which classification level should be updated.</param>
        /// <returns>Returned if the classification level was successfully updated.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task PutPageClassificationLevelAsync(long id, object body, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Reset page classification level
        /// </summary>
        /// <remarks>
        /// Resets the [classification level](https://developer.atlassian.com/cloud/admin/dlp/rest/intro/#Classification%20level)
        /// <br/>for a specific page for the space 
        /// <br/>[default classification level](https://support.atlassian.com/security-and-access-policies/docs/what-is-a-default-classification-level/).
        /// <br/>
        /// <br/>**[Permissions](https://confluence.atlassian.com/x/_AozKw) required**:
        /// <br/>'Permission to access the Confluence site ('Can use' global permission) and permission to view the page.
        /// </remarks>
        /// <param name="id">The ID of the page for which classification level should be updated.</param>
        /// <returns>Returned if the classification level was successfully reset.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task PostPageClassificationLevelAsync(long id, object body);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Reset page classification level
        /// </summary>
        /// <remarks>
        /// Resets the [classification level](https://developer.atlassian.com/cloud/admin/dlp/rest/intro/#Classification%20level)
        /// <br/>for a specific page for the space 
        /// <br/>[default classification level](https://support.atlassian.com/security-and-access-policies/docs/what-is-a-default-classification-level/).
        /// <br/>
        /// <br/>**[Permissions](https://confluence.atlassian.com/x/_AozKw) required**:
        /// <br/>'Permission to access the Confluence site ('Can use' global permission) and permission to view the page.
        /// </remarks>
        /// <param name="id">The ID of the page for which classification level should be updated.</param>
        /// <returns>Returned if the classification level was successfully reset.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task PostPageClassificationLevelAsync(long id, object body, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Get blog post classification level
        /// </summary>
        /// <remarks>
        /// Returns the [classification level](https://developer.atlassian.com/cloud/admin/dlp/rest/intro/#Classification%20level)
        /// <br/>for a specific blog post.
        /// <br/>
        /// <br/>**[Permissions](https://confluence.atlassian.com/x/_AozKw) required**:
        /// <br/>'Permission to access the Confluence site ('Can use' global permission) and permission to view the blog post.
        /// <br/>'Permission to edit the blog post is required if trying to view classification level for a draft.
        /// </remarks>
        /// <param name="id">The ID of the blog post for which classification level should be returned.</param>
        /// <param name="status">Status of blog post from which classification level will fetched.</param>
        /// <returns>Returned if the requested classification level for a blog post is returned.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<ClassificationLevel> GetBlogPostClassificationLevelAsync(long id, Status4? status);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get blog post classification level
        /// </summary>
        /// <remarks>
        /// Returns the [classification level](https://developer.atlassian.com/cloud/admin/dlp/rest/intro/#Classification%20level)
        /// <br/>for a specific blog post.
        /// <br/>
        /// <br/>**[Permissions](https://confluence.atlassian.com/x/_AozKw) required**:
        /// <br/>'Permission to access the Confluence site ('Can use' global permission) and permission to view the blog post.
        /// <br/>'Permission to edit the blog post is required if trying to view classification level for a draft.
        /// </remarks>
        /// <param name="id">The ID of the blog post for which classification level should be returned.</param>
        /// <param name="status">Status of blog post from which classification level will fetched.</param>
        /// <returns>Returned if the requested classification level for a blog post is returned.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<ClassificationLevel> GetBlogPostClassificationLevelAsync(long id, Status4? status, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Update blog post classification level
        /// </summary>
        /// <remarks>
        /// Updates the [classification level](https://developer.atlassian.com/cloud/admin/dlp/rest/intro/#Classification%20level)
        /// <br/>for a specific blog post.
        /// <br/>
        /// <br/>**[Permissions](https://confluence.atlassian.com/x/_AozKw) required**:
        /// <br/>'Permission to access the Confluence site ('Can use' global permission) and permission to edit the blog post.
        /// </remarks>
        /// <param name="id">The ID of the blog post for which classification level should be updated.</param>
        /// <returns>Returned if the classification level was successfully updated.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task PutBlogPostClassificationLevelAsync(long id, object body);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Update blog post classification level
        /// </summary>
        /// <remarks>
        /// Updates the [classification level](https://developer.atlassian.com/cloud/admin/dlp/rest/intro/#Classification%20level)
        /// <br/>for a specific blog post.
        /// <br/>
        /// <br/>**[Permissions](https://confluence.atlassian.com/x/_AozKw) required**:
        /// <br/>'Permission to access the Confluence site ('Can use' global permission) and permission to edit the blog post.
        /// </remarks>
        /// <param name="id">The ID of the blog post for which classification level should be updated.</param>
        /// <returns>Returned if the classification level was successfully updated.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task PutBlogPostClassificationLevelAsync(long id, object body, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Reset blog post classification level
        /// </summary>
        /// <remarks>
        /// Resets the [classification level](https://developer.atlassian.com/cloud/admin/dlp/rest/intro/#Classification%20level)
        /// <br/>for a specific blog post for the space  
        /// <br/>[default classification level](https://support.atlassian.com/security-and-access-policies/docs/what-is-a-default-classification-level/).
        /// <br/>
        /// <br/>**[Permissions](https://confluence.atlassian.com/x/_AozKw) required**:
        /// <br/>'Permission to access the Confluence site ('Can use' global permission) and permission to view the blog post.
        /// </remarks>
        /// <param name="id">The ID of the blog post for which classification level should be updated.</param>
        /// <returns>Returned if the classification level was successfully reset.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task PostBlogPostClassificationLevelAsync(long id, object body);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Reset blog post classification level
        /// </summary>
        /// <remarks>
        /// Resets the [classification level](https://developer.atlassian.com/cloud/admin/dlp/rest/intro/#Classification%20level)
        /// <br/>for a specific blog post for the space  
        /// <br/>[default classification level](https://support.atlassian.com/security-and-access-policies/docs/what-is-a-default-classification-level/).
        /// <br/>
        /// <br/>**[Permissions](https://confluence.atlassian.com/x/_AozKw) required**:
        /// <br/>'Permission to access the Confluence site ('Can use' global permission) and permission to view the blog post.
        /// </remarks>
        /// <param name="id">The ID of the blog post for which classification level should be updated.</param>
        /// <returns>Returned if the classification level was successfully reset.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task PostBlogPostClassificationLevelAsync(long id, object body, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Get whiteboard classification level
        /// </summary>
        /// <remarks>
        /// Returns the [classification level](https://developer.atlassian.com/cloud/admin/dlp/rest/intro/#Classification%20level)
        /// <br/>for a specific whiteboard.
        /// <br/>
        /// <br/>**[Permissions](https://confluence.atlassian.com/x/_AozKw) required**:
        /// <br/>'Permission to access the Confluence site ('Can use' global permission) and permission to view the whiteboard.
        /// </remarks>
        /// <param name="id">The ID of the whiteboard for which classification level should be returned.</param>
        /// <returns>Returned if the requested classification level for a whiteboard is returned.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<ClassificationLevel> GetWhiteboardClassificationLevelAsync(long id);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get whiteboard classification level
        /// </summary>
        /// <remarks>
        /// Returns the [classification level](https://developer.atlassian.com/cloud/admin/dlp/rest/intro/#Classification%20level)
        /// <br/>for a specific whiteboard.
        /// <br/>
        /// <br/>**[Permissions](https://confluence.atlassian.com/x/_AozKw) required**:
        /// <br/>'Permission to access the Confluence site ('Can use' global permission) and permission to view the whiteboard.
        /// </remarks>
        /// <param name="id">The ID of the whiteboard for which classification level should be returned.</param>
        /// <returns>Returned if the requested classification level for a whiteboard is returned.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<ClassificationLevel> GetWhiteboardClassificationLevelAsync(long id, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Update whiteboard classification level
        /// </summary>
        /// <remarks>
        /// Updates the [classification level](https://developer.atlassian.com/cloud/admin/dlp/rest/intro/#Classification%20level)
        /// <br/>for a specific whiteboard.
        /// <br/>
        /// <br/>**[Permissions](https://confluence.atlassian.com/x/_AozKw) required**:
        /// <br/>'Permission to access the Confluence site ('Can use' global permission) and permission to edit the whiteboard.
        /// </remarks>
        /// <param name="id">The ID of the whiteboard for which classification level should be updated.</param>
        /// <returns>Returned if the classification level was successfully updated.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task PutWhiteboardClassificationLevelAsync(long id, object body);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Update whiteboard classification level
        /// </summary>
        /// <remarks>
        /// Updates the [classification level](https://developer.atlassian.com/cloud/admin/dlp/rest/intro/#Classification%20level)
        /// <br/>for a specific whiteboard.
        /// <br/>
        /// <br/>**[Permissions](https://confluence.atlassian.com/x/_AozKw) required**:
        /// <br/>'Permission to access the Confluence site ('Can use' global permission) and permission to edit the whiteboard.
        /// </remarks>
        /// <param name="id">The ID of the whiteboard for which classification level should be updated.</param>
        /// <returns>Returned if the classification level was successfully updated.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task PutWhiteboardClassificationLevelAsync(long id, object body, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Reset whiteboard classification level
        /// </summary>
        /// <remarks>
        /// Resets the [classification level](https://developer.atlassian.com/cloud/admin/dlp/rest/intro/#Classification%20level)
        /// <br/>for a specific whiteboard for the space 
        /// <br/>[default classification level](https://support.atlassian.com/security-and-access-policies/docs/what-is-a-default-classification-level/).
        /// <br/>
        /// <br/>**[Permissions](https://confluence.atlassian.com/x/_AozKw) required**:
        /// <br/>'Permission to access the Confluence site ('Can use' global permission) and permission to view the whiteboard.
        /// </remarks>
        /// <param name="id">The ID of the whiteboard for which classification level should be updated.</param>
        /// <returns>Returned if the classification level was successfully reset.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task PostWhiteboardClassificationLevelAsync(long id, object body);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Reset whiteboard classification level
        /// </summary>
        /// <remarks>
        /// Resets the [classification level](https://developer.atlassian.com/cloud/admin/dlp/rest/intro/#Classification%20level)
        /// <br/>for a specific whiteboard for the space 
        /// <br/>[default classification level](https://support.atlassian.com/security-and-access-policies/docs/what-is-a-default-classification-level/).
        /// <br/>
        /// <br/>**[Permissions](https://confluence.atlassian.com/x/_AozKw) required**:
        /// <br/>'Permission to access the Confluence site ('Can use' global permission) and permission to view the whiteboard.
        /// </remarks>
        /// <param name="id">The ID of the whiteboard for which classification level should be updated.</param>
        /// <returns>Returned if the classification level was successfully reset.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task PostWhiteboardClassificationLevelAsync(long id, object body, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Get database classification level
        /// </summary>
        /// <remarks>
        /// Returns the [classification level](https://developer.atlassian.com/cloud/admin/dlp/rest/intro/#Classification%20level)
        /// <br/>for a specific database.
        /// <br/>
        /// <br/>**[Permissions](https://confluence.atlassian.com/x/_AozKw) required**:
        /// <br/>'Permission to access the Confluence site ('Can use' global permission) and permission to view the database.
        /// </remarks>
        /// <param name="id">The ID of the database for which classification level should be returned.</param>
        /// <returns>Returned if the requested classification level for a database is returned.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<ClassificationLevel> GetDatabaseClassificationLevelAsync(long id);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get database classification level
        /// </summary>
        /// <remarks>
        /// Returns the [classification level](https://developer.atlassian.com/cloud/admin/dlp/rest/intro/#Classification%20level)
        /// <br/>for a specific database.
        /// <br/>
        /// <br/>**[Permissions](https://confluence.atlassian.com/x/_AozKw) required**:
        /// <br/>'Permission to access the Confluence site ('Can use' global permission) and permission to view the database.
        /// </remarks>
        /// <param name="id">The ID of the database for which classification level should be returned.</param>
        /// <returns>Returned if the requested classification level for a database is returned.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<ClassificationLevel> GetDatabaseClassificationLevelAsync(long id, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Update database classification level
        /// </summary>
        /// <remarks>
        /// Updates the [classification level](https://developer.atlassian.com/cloud/admin/dlp/rest/intro/#Classification%20level)
        /// <br/>for a specific database.
        /// <br/>
        /// <br/>**[Permissions](https://confluence.atlassian.com/x/_AozKw) required**:
        /// <br/>'Permission to access the Confluence site ('Can use' global permission) and permission to edit the database.
        /// </remarks>
        /// <param name="id">The ID of the database for which classification level should be updated.</param>
        /// <returns>Returned if the classification level was successfully updated.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task PutDatabaseClassificationLevelAsync(long id, object body);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Update database classification level
        /// </summary>
        /// <remarks>
        /// Updates the [classification level](https://developer.atlassian.com/cloud/admin/dlp/rest/intro/#Classification%20level)
        /// <br/>for a specific database.
        /// <br/>
        /// <br/>**[Permissions](https://confluence.atlassian.com/x/_AozKw) required**:
        /// <br/>'Permission to access the Confluence site ('Can use' global permission) and permission to edit the database.
        /// </remarks>
        /// <param name="id">The ID of the database for which classification level should be updated.</param>
        /// <returns>Returned if the classification level was successfully updated.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task PutDatabaseClassificationLevelAsync(long id, object body, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Reset database classification level
        /// </summary>
        /// <remarks>
        /// Resets the [classification level](https://developer.atlassian.com/cloud/admin/dlp/rest/intro/#Classification%20level)
        /// <br/>for a specific database for the space 
        /// <br/>[default classification level](https://support.atlassian.com/security-and-access-policies/docs/what-is-a-default-classification-level/).
        /// <br/>
        /// <br/>**[Permissions](https://confluence.atlassian.com/x/_AozKw) required**:
        /// <br/>'Permission to access the Confluence site ('Can use' global permission) and permission to view the database.
        /// </remarks>
        /// <param name="id">The ID of the database for which classification level should be updated.</param>
        /// <returns>Returned if the classification level was successfully reset.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task PostDatabaseClassificationLevelAsync(long id, object body);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Reset database classification level
        /// </summary>
        /// <remarks>
        /// Resets the [classification level](https://developer.atlassian.com/cloud/admin/dlp/rest/intro/#Classification%20level)
        /// <br/>for a specific database for the space 
        /// <br/>[default classification level](https://support.atlassian.com/security-and-access-policies/docs/what-is-a-default-classification-level/).
        /// <br/>
        /// <br/>**[Permissions](https://confluence.atlassian.com/x/_AozKw) required**:
        /// <br/>'Permission to access the Confluence site ('Can use' global permission) and permission to view the database.
        /// </remarks>
        /// <param name="id">The ID of the database for which classification level should be updated.</param>
        /// <returns>Returned if the classification level was successfully reset.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task PostDatabaseClassificationLevelAsync(long id, object body, System.Threading.CancellationToken cancellationToken);

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class AdminKeyResponse
    {
        /// <summary>
        /// User identifier.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("accountId")]
        public string AccountId { get; set; }

        /// <summary>
        /// Timestamp in UTC that represents when the admin key will expire. In format "YYYY-MM-DDTHH:mm:ss.sssZ".
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("expirationTime")]
        public System.DateTimeOffset? ExpirationTime { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class AttachmentSingle
    {
        /// <summary>
        /// ID of the attachment.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("id")]
        public string Id { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("status")]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public ContentStatus? Status { get; set; }

        /// <summary>
        /// Title of the comment.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("title")]
        public string Title { get; set; }

        /// <summary>
        /// Date and time when the attachment was created. In format "YYYY-MM-DDTHH:mm:ss.sssZ".
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("createdAt")]
        public System.DateTimeOffset? CreatedAt { get; set; }

        /// <summary>
        /// ID of the containing page.
        /// <br/>
        /// <br/>Note: This is only returned if the attachment has a container that is a page.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("pageId")]
        public string PageId { get; set; }

        /// <summary>
        /// ID of the containing blog post.
        /// <br/>
        /// <br/>Note: This is only returned if the attachment has a container that is a blog post.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("blogPostId")]
        public string BlogPostId { get; set; }

        /// <summary>
        /// ID of the containing custom content.
        /// <br/>
        /// <br/>Note: This is only returned if the attachment has a container that is custom content.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("customContentId")]
        public string CustomContentId { get; set; }

        /// <summary>
        /// Media Type for the attachment.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("mediaType")]
        public string MediaType { get; set; }

        /// <summary>
        /// Media Type description for the attachment.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("mediaTypeDescription")]
        public string MediaTypeDescription { get; set; }

        /// <summary>
        /// Comment for the attachment.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("comment")]
        public string Comment { get; set; }

        /// <summary>
        /// File ID of the attachment. This is the ID referenced in `atlas_doc_format` bodies and is distinct from the attachment ID.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("fileId")]
        public string FileId { get; set; }

        /// <summary>
        /// File size of the attachment.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("fileSize")]
        public long? FileSize { get; set; }

        /// <summary>
        /// WebUI link of the attachment.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("webuiLink")]
        public string WebuiLink { get; set; }

        /// <summary>
        /// Download link of the attachment.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("downloadLink")]
        public string DownloadLink { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("version")]
        public Version Version { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("labels")]
        public Labels Labels { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("properties")]
        public Properties Properties { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("operations")]
        public Operations Operations { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("versions")]
        public Versions Versions { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("_links")]
        public AttachmentLinks _links { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class AttachmentBulk
    {
        /// <summary>
        /// ID of the attachment.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("id")]
        public string Id { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("status")]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public ContentStatus? Status { get; set; }

        /// <summary>
        /// Title of the comment.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("title")]
        public string Title { get; set; }

        /// <summary>
        /// Date and time when the attachment was created. In format "YYYY-MM-DDTHH:mm:ss.sssZ".
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("createdAt")]
        public System.DateTimeOffset? CreatedAt { get; set; }

        /// <summary>
        /// ID of the containing page.
        /// <br/>
        /// <br/>Note: This is only returned if the attachment has a container that is a page.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("pageId")]
        public string PageId { get; set; }

        /// <summary>
        /// ID of the containing blog post.
        /// <br/>
        /// <br/>Note: This is only returned if the attachment has a container that is a blog post.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("blogPostId")]
        public string BlogPostId { get; set; }

        /// <summary>
        /// ID of the containing custom content.
        /// <br/>
        /// <br/>Note: This is only returned if the attachment has a container that is custom content.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("customContentId")]
        public string CustomContentId { get; set; }

        /// <summary>
        /// Media Type for the attachment.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("mediaType")]
        public string MediaType { get; set; }

        /// <summary>
        /// Media Type description for the attachment.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("mediaTypeDescription")]
        public string MediaTypeDescription { get; set; }

        /// <summary>
        /// Comment for the attachment.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("comment")]
        public string Comment { get; set; }

        /// <summary>
        /// File ID of the attachment. This is the ID referenced in `atlas_doc_format` bodies and is distinct from the attachment ID.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("fileId")]
        public string FileId { get; set; }

        /// <summary>
        /// File size of the attachment.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("fileSize")]
        public long? FileSize { get; set; }

        /// <summary>
        /// WebUI link of the attachment.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("webuiLink")]
        public string WebuiLink { get; set; }

        /// <summary>
        /// Download link of the attachment.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("downloadLink")]
        public string DownloadLink { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("version")]
        public Version Version { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("_links")]
        public AttachmentLinks _links { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class BlogPostSingle
    {
        /// <summary>
        /// ID of the blog post.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("id")]
        public string Id { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("status")]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public BlogPostContentStatus? Status { get; set; }

        /// <summary>
        /// Title of the blog post.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("title")]
        public string Title { get; set; }

        /// <summary>
        /// ID of the space the blog post is in.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("spaceId")]
        public string SpaceId { get; set; }

        /// <summary>
        /// The account ID of the user who created this blog post originally.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("authorId")]
        public string AuthorId { get; set; }

        /// <summary>
        /// Date and time when the blog post was created. In format "YYYY-MM-DDTHH:mm:ss.sssZ".
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("createdAt")]
        public System.DateTimeOffset? CreatedAt { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("version")]
        public Version Version { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("body")]
        public BodySingle Body { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("labels")]
        public Labels2 Labels { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("properties")]
        public Properties2 Properties { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("operations")]
        public Operations2 Operations { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("likes")]
        public Likes Likes { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("versions")]
        public Versions2 Versions { get; set; }

        /// <summary>
        /// Whether the blog post has been favorited by the current user.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("isFavoritedByCurrentUser")]
        public bool? IsFavoritedByCurrentUser { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("_links")]
        public AbstractPageLinks _links { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class BlogPostBulk
    {
        /// <summary>
        /// ID of the blog post.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("id")]
        public string Id { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("status")]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public BlogPostContentStatus? Status { get; set; }

        /// <summary>
        /// Title of the blog post.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("title")]
        public string Title { get; set; }

        /// <summary>
        /// ID of the space the blog post is in.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("spaceId")]
        public string SpaceId { get; set; }

        /// <summary>
        /// The account ID of the user who created this blog post originally.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("authorId")]
        public string AuthorId { get; set; }

        /// <summary>
        /// Date and time when the blog post was created. In format "YYYY-MM-DDTHH:mm:ss.sssZ".
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("createdAt")]
        public System.DateTimeOffset? CreatedAt { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("version")]
        public Version Version { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("body")]
        public BodyBulk Body { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("_links")]
        public AbstractPageLinks _links { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// Contains fields for each representation type requested.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class TaskBodySingle
    {

        [System.Text.Json.Serialization.JsonPropertyName("storage")]
        public BodyType Storage { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("atlas_doc_format")]
        public BodyType Atlas_doc_format { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// Contains fields for each representation type requested.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class BodySingle
    {

        [System.Text.Json.Serialization.JsonPropertyName("storage")]
        public BodyType Storage { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("atlas_doc_format")]
        public BodyType Atlas_doc_format { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("view")]
        public BodyType View { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// Contains fields for each representation type requested.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class BodyBulk
    {

        [System.Text.Json.Serialization.JsonPropertyName("storage")]
        public BodyType Storage { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("atlas_doc_format")]
        public BodyType Atlas_doc_format { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class BodyType
    {
        /// <summary>
        /// Type of content representation used for the value field.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("representation")]
        public string Representation { get; set; }

        /// <summary>
        /// Body of the content, in the format found in the representation field.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("value")]
        public string Value { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// The primary formats a body can be represented as. A subset of BodyRepresentation. These formats are the only allowed formats in certain use cases.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum PrimaryBodyRepresentation
    {

        [System.Runtime.Serialization.EnumMember(Value = @"storage")]
        Storage = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"atlas_doc_format")]
        Atlas_doc_format = 1,

    }

    /// <summary>
    /// The primary formats a body can be represented as. A subset of BodyRepresentation. These formats are the only allowed formats in certain use cases.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum PrimaryBodyRepresentationSingle
    {

        [System.Runtime.Serialization.EnumMember(Value = @"storage")]
        Storage = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"atlas_doc_format")]
        Atlas_doc_format = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"view")]
        View = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"export_view")]
        Export_view = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"anonymous_export_view")]
        Anonymous_export_view = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"styled_view")]
        Styled_view = 5,

        [System.Runtime.Serialization.EnumMember(Value = @"editor")]
        Editor = 6,

    }

    /// <summary>
    /// The formats a custom content body can be represented as. A subset of BodyRepresentation.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum CustomContentBodyRepresentation
    {

        [System.Runtime.Serialization.EnumMember(Value = @"raw")]
        Raw = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"storage")]
        Storage = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"atlas_doc_format")]
        Atlas_doc_format = 2,

    }

    /// <summary>
    /// The formats a custom content body can be represented as. A subset of BodyRepresentation.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum CustomContentBodyRepresentationSingle
    {

        [System.Runtime.Serialization.EnumMember(Value = @"raw")]
        Raw = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"storage")]
        Storage = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"atlas_doc_format")]
        Atlas_doc_format = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"view")]
        View = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"export_view")]
        Export_view = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"anonymous_export_view")]
        Anonymous_export_view = 5,

    }

    /// <summary>
    /// The formats a space description can be represented as. A subset of BodyRepresentation.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum SpaceDescriptionBodyRepresentation
    {

        [System.Runtime.Serialization.EnumMember(Value = @"plain")]
        Plain = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"view")]
        View = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ContentIdToContentTypeResponse
    {
        /// <summary>
        /// JSON object containing all requested content ids as keys and their associated content types as the values.
        /// <br/>Duplicate content ids in the request will be returned under a single key in the response. For built-in content
        /// <br/>types, the enumerations are as specified. Custom content ids will be mapped to their associated type.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("results")]
        public System.Collections.Generic.IDictionary<string, Anonymous20> Results { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// The status of the content.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum ContentStatus
    {

        [System.Runtime.Serialization.EnumMember(Value = @"current")]
        Current = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"draft")]
        Draft = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"archived")]
        Archived = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"historical")]
        Historical = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"trashed")]
        Trashed = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"deleted")]
        Deleted = 5,

        [System.Runtime.Serialization.EnumMember(Value = @"any")]
        Any = 6,

    }

    /// <summary>
    /// The status of the content.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum BlogPostContentStatus
    {

        [System.Runtime.Serialization.EnumMember(Value = @"current")]
        Current = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"draft")]
        Draft = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"historical")]
        Historical = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"trashed")]
        Trashed = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"deleted")]
        Deleted = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"any")]
        Any = 5,

    }

    /// <summary>
    /// The status of the content.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum OnlyArchivedAndCurrentContentStatus
    {

        [System.Runtime.Serialization.EnumMember(Value = @"current")]
        Current = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"archived")]
        Archived = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ContentProperty
    {
        /// <summary>
        /// ID of the property
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("id")]
        public string Id { get; set; }

        /// <summary>
        /// Key of the property
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("key")]
        public string Key { get; set; }

        /// <summary>
        /// Value of the property. Must be a valid JSON value.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("value")]
        public object Value { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("version")]
        public Version Version { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ContentPropertyCreateRequest
    {
        /// <summary>
        /// Key of the content property
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("key")]
        public string Key { get; set; }

        /// <summary>
        /// Value of the content property.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("value")]
        public object Value { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ContentPropertyUpdateRequest
    {
        /// <summary>
        /// Key of the content property
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("key")]
        public string Key { get; set; }

        /// <summary>
        /// Value of the content property.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("value")]
        public object Value { get; set; }

        /// <summary>
        /// New version number and associated message
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("version")]
        public Version2 Version { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class CustomContentSingle
    {
        /// <summary>
        /// ID of the custom content.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("id")]
        public string Id { get; set; }

        /// <summary>
        /// The type of custom content.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("type")]
        public string Type { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("status")]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public ContentStatus? Status { get; set; }

        /// <summary>
        /// Title of the custom content.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("title")]
        public string Title { get; set; }

        /// <summary>
        /// ID of the space the custom content is in.
        /// <br/>
        /// <br/>Note: This is always returned, regardless of if the custom content has a container that is a space.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("spaceId")]
        public string SpaceId { get; set; }

        /// <summary>
        /// ID of the containing page.
        /// <br/>
        /// <br/>Note: This is only returned if the custom content has a container that is a page.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("pageId")]
        public string PageId { get; set; }

        /// <summary>
        /// ID of the containing blog post.
        /// <br/>
        /// <br/>Note: This is only returned if the custom content has a container that is a blog post.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("blogPostId")]
        public string BlogPostId { get; set; }

        /// <summary>
        /// ID of the containing custom content.
        /// <br/>
        /// <br/>Note: This is only returned if the custom content has a container that is custom content.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("customContentId")]
        public string CustomContentId { get; set; }

        /// <summary>
        /// The account ID of the user who created this custom content originally.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("authorId")]
        public string AuthorId { get; set; }

        /// <summary>
        /// Date and time when the custom content was created. In format "YYYY-MM-DDTHH:mm:ss.sssZ".
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("createdAt")]
        public System.DateTimeOffset? CreatedAt { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("version")]
        public Version Version { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("labels")]
        public Labels3 Labels { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("properties")]
        public Properties3 Properties { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("operations")]
        public Operations3 Operations { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("versions")]
        public Versions3 Versions { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("body")]
        public CustomContentBodySingle Body { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("_links")]
        public CustomContentLinks _links { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class CustomContentBulk
    {
        /// <summary>
        /// ID of the custom content.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("id")]
        public string Id { get; set; }

        /// <summary>
        /// The type of custom content.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("type")]
        public string Type { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("status")]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public ContentStatus? Status { get; set; }

        /// <summary>
        /// Title of the custom content.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("title")]
        public string Title { get; set; }

        /// <summary>
        /// ID of the space the custom content is in.
        /// <br/>
        /// <br/>Note: This is always returned, regardless of if the custom content has a container that is a space.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("spaceId")]
        public string SpaceId { get; set; }

        /// <summary>
        /// ID of the containing page.
        /// <br/>
        /// <br/>Note: This is only returned if the custom content has a container that is a page.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("pageId")]
        public string PageId { get; set; }

        /// <summary>
        /// ID of the containing blog post.
        /// <br/>
        /// <br/>Note: This is only returned if the custom content has a container that is a blog post.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("blogPostId")]
        public string BlogPostId { get; set; }

        /// <summary>
        /// ID of the containing custom content.
        /// <br/>
        /// <br/>Note: This is only returned if the custom content has a container that is custom content.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("customContentId")]
        public string CustomContentId { get; set; }

        /// <summary>
        /// The account ID of the user who created this custom content originally.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("authorId")]
        public string AuthorId { get; set; }

        /// <summary>
        /// Date and time when the custom content was created. In format "YYYY-MM-DDTHH:mm:ss.sssZ".
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("createdAt")]
        public System.DateTimeOffset? CreatedAt { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("version")]
        public Version Version { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("body")]
        public CustomContentBodyBulk Body { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("_links")]
        public CustomContentLinks _links { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// Contains fields for each representation type requested.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class CustomContentBodySingle
    {

        [System.Text.Json.Serialization.JsonPropertyName("raw")]
        public BodyType Raw { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("storage")]
        public BodyType Storage { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("atlas_doc_format")]
        public BodyType Atlas_doc_format { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("view")]
        public BodyType View { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// Contains fields for each representation type requested.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class CustomContentBodyBulk
    {

        [System.Text.Json.Serialization.JsonPropertyName("raw")]
        public BodyType Raw { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("storage")]
        public BodyType Storage { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("atlas_doc_format")]
        public BodyType Atlas_doc_format { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class DetailedVersion
    {
        /// <summary>
        /// The current version number.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("number")]
        public int? Number { get; set; }

        /// <summary>
        /// The account ID of the user who created this version.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("authorId")]
        public string AuthorId { get; set; }

        /// <summary>
        /// Message associated with the current version.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("message")]
        public string Message { get; set; }

        /// <summary>
        /// Date and time when the version was created. In format "YYYY-MM-DDTHH:mm:ss.sssZ".
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("createdAt")]
        public System.DateTimeOffset? CreatedAt { get; set; }

        /// <summary>
        /// Describes if this version is a minor version. Email notifications and activity stream updates are not created for minor versions.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("minorEdit")]
        public bool? MinorEdit { get; set; }

        /// <summary>
        /// Describes if the content type is modified in this version (e.g. page to blog)
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("contentTypeModified")]
        public bool? ContentTypeModified { get; set; }

        /// <summary>
        /// The account IDs of users that collaborated on this version.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("collaborators")]
        public System.Collections.Generic.IEnumerable<string> Collaborators { get; set; }

        /// <summary>
        /// The version number of the version prior to this current content update.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("prevVersion")]
        public int? PrevVersion { get; set; }

        /// <summary>
        /// The version number of the version after this current content update.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("nextVersion")]
        public int? NextVersion { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Label
    {
        /// <summary>
        /// ID of the label.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("id")]
        public string Id { get; set; }

        /// <summary>
        /// Name of the label.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("name")]
        public string Name { get; set; }

        /// <summary>
        /// Prefix of the label.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("prefix")]
        public string Prefix { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Like
    {
        /// <summary>
        /// Account ID.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("accountId")]
        public string AccountId { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Operation
    {
        /// <summary>
        /// The type of operation.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("operation")]
        public string Operation1 { get; set; }

        /// <summary>
        /// The type of entity the operation type targets.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("targetType")]
        public string TargetType { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// The list of operations permitted on entity.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class PermittedOperationsResponse
    {

        [System.Text.Json.Serialization.JsonPropertyName("operations")]
        public System.Collections.Generic.IEnumerable<Operation> Operations { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class PageSingle
    {
        /// <summary>
        /// ID of the page.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("id")]
        public string Id { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("status")]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public ContentStatus? Status { get; set; }

        /// <summary>
        /// Title of the page.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("title")]
        public string Title { get; set; }

        /// <summary>
        /// ID of the space the page is in.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("spaceId")]
        public string SpaceId { get; set; }

        /// <summary>
        /// ID of the parent page, or null if there is no parent page.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("parentId")]
        public string ParentId { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("parentType")]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public ParentContentType? ParentType { get; set; }

        /// <summary>
        /// Position of child page within the given parent page tree.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("position")]
        public int? Position { get; set; }

        /// <summary>
        /// The account ID of the user who created this page originally.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("authorId")]
        public string AuthorId { get; set; }

        /// <summary>
        /// The account ID of the user who owns this page.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("ownerId")]
        public string OwnerId { get; set; }

        /// <summary>
        /// The account ID of the user who owned this page previously, or null if there is no previous owner.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("lastOwnerId")]
        public string LastOwnerId { get; set; }

        /// <summary>
        /// Date and time when the page was created. In format "YYYY-MM-DDTHH:mm:ss.sssZ".
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("createdAt")]
        public System.DateTimeOffset? CreatedAt { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("version")]
        public Version Version { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("body")]
        public BodySingle Body { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("labels")]
        public Labels4 Labels { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("properties")]
        public Properties4 Properties { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("operations")]
        public Operations4 Operations { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("likes")]
        public Likes2 Likes { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("versions")]
        public Versions4 Versions { get; set; }

        /// <summary>
        /// Whether the page has been favorited by the current user.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("isFavoritedByCurrentUser")]
        public bool? IsFavoritedByCurrentUser { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("_links")]
        public AbstractPageLinks _links { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class PageBulk
    {
        /// <summary>
        /// ID of the page.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("id")]
        public string Id { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("status")]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public ContentStatus? Status { get; set; }

        /// <summary>
        /// Title of the page.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("title")]
        public string Title { get; set; }

        /// <summary>
        /// ID of the space the page is in.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("spaceId")]
        public string SpaceId { get; set; }

        /// <summary>
        /// ID of the parent page, or null if there is no parent page.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("parentId")]
        public string ParentId { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("parentType")]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public ParentContentType? ParentType { get; set; }

        /// <summary>
        /// Position of child page within the given parent page tree.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("position")]
        public int? Position { get; set; }

        /// <summary>
        /// The account ID of the user who created this page originally.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("authorId")]
        public string AuthorId { get; set; }

        /// <summary>
        /// The account ID of the user who owns this page.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("ownerId")]
        public string OwnerId { get; set; }

        /// <summary>
        /// The account ID of the user who owned this page previously, or null if there is no previous owner.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("lastOwnerId")]
        public string LastOwnerId { get; set; }

        /// <summary>
        /// Date and time when the page was created. In format "YYYY-MM-DDTHH:mm:ss.sssZ".
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("createdAt")]
        public System.DateTimeOffset? CreatedAt { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("version")]
        public Version Version { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("body")]
        public BodyBulk Body { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("_links")]
        public AbstractPageLinks _links { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// Content type of the parent, or null if there is no parent.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum ParentContentType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"page")]
        Page = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"whiteboard")]
        Whiteboard = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"database")]
        Database = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"embed")]
        Embed = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"folder")]
        Folder = 4,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class PageBodyWrite
    {
        /// <summary>
        /// Type of content representation used for the value field.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("representation")]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public PageBodyWriteRepresentation? Representation { get; set; }

        /// <summary>
        /// Body of the page, in the format found in the representation field.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("value")]
        public string Value { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// Body of the page. Only one body format should be specified as the property
    /// <br/>for this object, e.g. `storage`.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class PageNestedBodyWrite
    {

        [System.Text.Json.Serialization.JsonPropertyName("storage")]
        public PageBodyWrite Storage { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("atlas_doc_format")]
        public PageBodyWrite Atlas_doc_format { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("wiki")]
        public PageBodyWrite Wiki { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class BlogPostBodyWrite
    {
        /// <summary>
        /// Type of content representation used for the value field.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("representation")]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public BlogPostBodyWriteRepresentation? Representation { get; set; }

        /// <summary>
        /// Body of the blog post, in the format found in the representation field.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("value")]
        public string Value { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// Body of the blog post. Only one body format should be specified as the property
    /// <br/>for this object, e.g. `storage`.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class BlogPostNestedBodyWrite
    {

        [System.Text.Json.Serialization.JsonPropertyName("storage")]
        public BlogPostBodyWrite Storage { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("atlas_doc_format")]
        public BlogPostBodyWrite Atlas_doc_format { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("wiki")]
        public BlogPostBodyWrite Wiki { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class CommentBodyWrite
    {
        /// <summary>
        /// Type of content representation used for the value field.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("representation")]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public CommentBodyWriteRepresentation? Representation { get; set; }

        /// <summary>
        /// Body of the comment, in the format found in the representation field.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("value")]
        public string Value { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// Body of the comment. Only one body format should be specified as the property
    /// <br/>for this object, e.g. `storage`.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class CommentNestedBodyWrite
    {

        [System.Text.Json.Serialization.JsonPropertyName("storage")]
        public CommentBodyWrite Storage { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("atlas_doc_format")]
        public CommentBodyWrite Atlas_doc_format { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("wiki")]
        public CommentBodyWrite Wiki { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class CustomContentBodyWrite
    {
        /// <summary>
        /// Type of content representation used for the value field.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("representation")]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public CustomContentBodyWriteRepresentation? Representation { get; set; }

        /// <summary>
        /// Body of the custom content, in the format found in the representation field.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("value")]
        public string Value { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// Body of the custom content. Only one body format should be specified as the property
    /// <br/>for this object, e.g. `storage`.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class CustomContentNestedBodyWrite
    {

        [System.Text.Json.Serialization.JsonPropertyName("storage")]
        public CustomContentBodyWrite Storage { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("atlas_doc_format")]
        public CustomContentBodyWrite Atlas_doc_format { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("raw")]
        public CustomContentBodyWrite Raw { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ChildPage
    {
        /// <summary>
        /// ID of the page.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("id")]
        public string Id { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("status")]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public OnlyArchivedAndCurrentContentStatus? Status { get; set; }

        /// <summary>
        /// Title of the page.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("title")]
        public string Title { get; set; }

        /// <summary>
        /// ID of the space the page is in.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("spaceId")]
        public string SpaceId { get; set; }

        /// <summary>
        /// Position of child page within the given parent page tree.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("childPosition")]
        public int? ChildPosition { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ChildCustomContent
    {
        /// <summary>
        /// ID of the child custom content.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("id")]
        public string Id { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("status")]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public OnlyArchivedAndCurrentContentStatus? Status { get; set; }

        /// <summary>
        /// Title of the custom content.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("title")]
        public string Title { get; set; }

        /// <summary>
        /// Custom content type.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("type")]
        public string Type { get; set; }

        /// <summary>
        /// ID of the space the custom content is in.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("spaceId")]
        public string SpaceId { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ChildrenResponse
    {
        /// <summary>
        /// ID of the child content.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("id")]
        public string Id { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("status")]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public OnlyArchivedAndCurrentContentStatus? Status { get; set; }

        /// <summary>
        /// Title of the child content.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("title")]
        public string Title { get; set; }

        /// <summary>
        /// Hierarchical content type (database/embed/folder/page/whiteboard).
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("type")]
        public string Type { get; set; }

        /// <summary>
        /// ID of the space the content is in.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("spaceId")]
        public string SpaceId { get; set; }

        /// <summary>
        /// Numerical value indicating position of the content relative to its siblings (with the same parentId) within the content tree.
        /// <br/>If the content is sorted by childPosition, it will reflect the default content ordering within the content tree.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("childPosition")]
        public int? ChildPosition { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class DescendantsResponse
    {
        /// <summary>
        /// ID of the descendant.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("id")]
        public string Id { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("status")]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public OnlyArchivedAndCurrentContentStatus? Status { get; set; }

        /// <summary>
        /// Title of the descendant.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("title")]
        public string Title { get; set; }

        /// <summary>
        /// Hierarchical content type (database/embed/folder/page/whiteboard).
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("type")]
        public string Type { get; set; }

        /// <summary>
        /// ID of the parent content.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("parentId")]
        public string ParentId { get; set; }

        /// <summary>
        /// Depth of the descendant in the content tree relative to the content specified in the request.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("depth")]
        public int? Depth { get; set; }

        /// <summary>
        /// Numerical value indicating position of the content relative to its siblings (with the same parentId) within the content tree.
        /// <br/>If the content is sorted by childPosition, it will reflect the default content ordering within the content tree.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("childPosition")]
        public int? ChildPosition { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class WhiteboardSingle
    {
        /// <summary>
        /// ID of the whiteboard.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("id")]
        public string Id { get; set; }

        /// <summary>
        /// The content type of the object.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("type")]
        public string Type { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("status")]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public ContentStatus? Status { get; set; }

        /// <summary>
        /// Title of the whiteboard.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("title")]
        public string Title { get; set; }

        /// <summary>
        /// ID of the parent content, or null if there is no parent content.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("parentId")]
        public string ParentId { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("parentType")]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public ParentContentType? ParentType { get; set; }

        /// <summary>
        /// Position of the whiteboard within the given parent page tree.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("position")]
        public int? Position { get; set; }

        /// <summary>
        /// The account ID of the user who created this whiteboard originally.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("authorId")]
        public string AuthorId { get; set; }

        /// <summary>
        /// The account ID of the user who owns this whiteboard.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("ownerId")]
        public string OwnerId { get; set; }

        /// <summary>
        /// Date and time when the whiteboard was created. In format "YYYY-MM-DDTHH:mm:ss.sssZ".
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("createdAt")]
        public System.DateTimeOffset? CreatedAt { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("version")]
        public Version Version { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("_links")]
        public WhiteboardLinks _links { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class DatabaseSingle
    {
        /// <summary>
        /// ID of the database.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("id")]
        public string Id { get; set; }

        /// <summary>
        /// The content type of the object.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("type")]
        public string Type { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("status")]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public ContentStatus? Status { get; set; }

        /// <summary>
        /// Title of the database.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("title")]
        public string Title { get; set; }

        /// <summary>
        /// ID of the parent content, or null if there is no parent content.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("parentId")]
        public string ParentId { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("parentType")]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public ParentContentType? ParentType { get; set; }

        /// <summary>
        /// Position of the database within the given parent page tree.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("position")]
        public int? Position { get; set; }

        /// <summary>
        /// The account ID of the user who created this database originally.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("authorId")]
        public string AuthorId { get; set; }

        /// <summary>
        /// The account ID of the user who owns this database.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("ownerId")]
        public string OwnerId { get; set; }

        /// <summary>
        /// Date and time when the database was created. In format "YYYY-MM-DDTHH:mm:ss.sssZ".
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("createdAt")]
        public System.DateTimeOffset? CreatedAt { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("version")]
        public Version Version { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("_links")]
        public DatabaseLinks _links { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class SmartLinkSingle
    {
        /// <summary>
        /// ID of the Smart Link in the content tree.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("id")]
        public string Id { get; set; }

        /// <summary>
        /// The content type of the object.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("type")]
        public string Type { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("status")]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public ContentStatus? Status { get; set; }

        /// <summary>
        /// Title of the Smart Link in the content tree.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("title")]
        public string Title { get; set; }

        /// <summary>
        /// ID of the parent content, or null if there is no parent content.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("parentId")]
        public string ParentId { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("parentType")]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public ParentContentType? ParentType { get; set; }

        /// <summary>
        /// Position of the Smart Link within the given parent page tree.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("position")]
        public int? Position { get; set; }

        /// <summary>
        /// The account ID of the user who created this Smart Link in the content tree originally.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("authorId")]
        public string AuthorId { get; set; }

        /// <summary>
        /// The account ID of the user who owns this Smart Link in the content tree.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("ownerId")]
        public string OwnerId { get; set; }

        /// <summary>
        /// Date and time when the Smart Link in the content tree was created. In format "YYYY-MM-DDTHH:mm:ss.sssZ".
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("createdAt")]
        public System.DateTimeOffset? CreatedAt { get; set; }

        /// <summary>
        /// The embedded URL of the Smart Link. If the Smart Link does not have an embedded URL, this property will not be included in the response.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("embedUrl")]
        public string EmbedUrl { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("version")]
        public Version Version { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("_links")]
        public SmartLinkLinks _links { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class FolderSingle
    {
        /// <summary>
        /// ID of the folder.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("id")]
        public string Id { get; set; }

        /// <summary>
        /// The content type of the object.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("type")]
        public string Type { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("status")]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public ContentStatus? Status { get; set; }

        /// <summary>
        /// Title of the folder.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("title")]
        public string Title { get; set; }

        /// <summary>
        /// ID of the parent content, or null if there is no parent content.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("parentId")]
        public string ParentId { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("parentType")]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public ParentContentType? ParentType { get; set; }

        /// <summary>
        /// Position of the folder within the given parent page tree.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("position")]
        public int? Position { get; set; }

        /// <summary>
        /// The account ID of the user who created this folder.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("authorId")]
        public string AuthorId { get; set; }

        /// <summary>
        /// The account ID of the user who owns this folder.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("ownerId")]
        public string OwnerId { get; set; }

        /// <summary>
        /// Date and time when the folder was created. In format "YYYY-MM-DDTHH:mm:ss.sssZ".
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("createdAt")]
        public System.DateTimeOffset? CreatedAt { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("version")]
        public Version Version { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("_links")]
        public FolderLinks _links { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Ancestor
    {
        /// <summary>
        /// ID of the ancestor
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("id")]
        public string Id { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("type")]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public AncestorType? Type { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// The type of ancestor.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum AncestorType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"page")]
        Page = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"whiteboard")]
        Whiteboard = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"database")]
        Database = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"embed")]
        Embed = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"folder")]
        Folder = 4,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class SpaceSingle
    {
        /// <summary>
        /// ID of the space.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("id")]
        public string Id { get; set; }

        /// <summary>
        /// Key of the space.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("key")]
        public string Key { get; set; }

        /// <summary>
        /// Name of the space.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("name")]
        public string Name { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("type")]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public SpaceType? Type { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("status")]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public SpaceStatus? Status { get; set; }

        /// <summary>
        /// The account ID of the user who created this space originally.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("authorId")]
        public string AuthorId { get; set; }

        /// <summary>
        /// Date and time when the space was created. In format "YYYY-MM-DDTHH:mm:ss.sssZ".
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("createdAt")]
        public System.DateTimeOffset? CreatedAt { get; set; }

        /// <summary>
        /// ID of the space's homepage.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("homepageId")]
        public string HomepageId { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("description")]
        public SpaceDescription Description { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("icon")]
        public SpaceIcon Icon { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("labels")]
        public Labels5 Labels { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("properties")]
        public Properties5 Properties { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("operations")]
        public Operations5 Operations { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("permissions")]
        public Permissions Permissions { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("_links")]
        public SpaceLinks _links { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class SpaceBulk
    {
        /// <summary>
        /// ID of the space.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("id")]
        public string Id { get; set; }

        /// <summary>
        /// Key of the space.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("key")]
        public string Key { get; set; }

        /// <summary>
        /// Name of the space.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("name")]
        public string Name { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("type")]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public SpaceType? Type { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("status")]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public SpaceStatus? Status { get; set; }

        /// <summary>
        /// The account ID of the user who created this space originally.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("authorId")]
        public string AuthorId { get; set; }

        /// <summary>
        /// Date and time when the space was created. In format "YYYY-MM-DDTHH:mm:ss.sssZ".
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("createdAt")]
        public System.DateTimeOffset? CreatedAt { get; set; }

        /// <summary>
        /// ID of the space's homepage.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("homepageId")]
        public string HomepageId { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("description")]
        public SpaceDescription Description { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("icon")]
        public SpaceIcon Icon { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("_links")]
        public SpaceLinks _links { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// Contains fields for each representation type requested.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class SpaceDescription
    {

        [System.Text.Json.Serialization.JsonPropertyName("plain")]
        public BodyType Plain { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("view")]
        public BodyType View { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// The icon of the space
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class SpaceIcon
    {
        /// <summary>
        /// The path (relative to base URL) at which the space's icon can be retrieved. The format should be like `/wiki/download/...` or `/wiki/aa-avatar/...`
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("path")]
        public string Path { get; set; }

        /// <summary>
        /// The path (relative to base URL) that can be used to retrieve a link to download the space icon. 3LO apps should use this link instead of the value provided
        /// <br/>in the `path` property to retrieve the icon.
        /// <br/>
        /// <br/>Currently this field is only returned for `global` spaces and not `personal` spaces.
        /// <br/>
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("apiDownloadLink")]
        public string ApiDownloadLink { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class SpacePermission
    {
        /// <summary>
        /// The identifier for the space permission.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("id")]
        public string Id { get; set; }

        /// <summary>
        /// The display name for the space permission.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("displayName")]
        public string DisplayName { get; set; }

        /// <summary>
        /// Describes the space permission’s usage.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("description")]
        public string Description { get; set; }

        /// <summary>
        /// The permissions required for this permission to be enabled.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("requiredPermissionIds")]
        public System.Collections.Generic.IEnumerable<string> RequiredPermissionIds { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class SpacePermissionAssignment
    {
        /// <summary>
        /// ID of the space permission.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("id")]
        public string Id { get; set; }

        /// <summary>
        /// The entity the space permissions corresponds to.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("principal")]
        public Principal2 Principal { get; set; }

        /// <summary>
        /// The operation the space permission corresponds to.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("operation")]
        public Operation2 Operation { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class SpaceRole
    {
        /// <summary>
        /// The identifier for the space role.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("id")]
        public string Id { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("type")]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public RoleType? Type { get; set; }

        /// <summary>
        /// The display name for the space role.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("displayName")]
        public string DisplayName { get; set; }

        /// <summary>
        /// The description for the space role’s usage.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("description")]
        public string Description { get; set; }

        /// <summary>
        /// The space permissions the space role is comprised of.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("spacePermissions")]
        public System.Collections.Generic.IEnumerable<string> SpacePermissions { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class SpaceRoleAssignment
    {

        [System.Text.Json.Serialization.JsonPropertyName("principal")]
        public Principal Principal { get; set; }

        /// <summary>
        /// The role to which the principal is assigned.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("roleId")]
        public string RoleId { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// The principal of the role assignment.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Principal
    {

        [System.Text.Json.Serialization.JsonPropertyName("principalType")]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public PrincipalType? PrincipalType { get; set; }

        /// <summary>
        /// The principal ID.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("principalId")]
        public string PrincipalId { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// The principal type.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum PrincipalType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"USER")]
        USER = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"GROUP")]
        GROUP = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"ACCESS_CLASS")]
        ACCESS_CLASS = 2,

    }

    /// <summary>
    /// The role type.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum RoleType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"SYSTEM")]
        SYSTEM = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"CUSTOM")]
        CUSTOM = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class SpaceProperty
    {
        /// <summary>
        /// ID of the space property.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("id")]
        public string Id { get; set; }

        /// <summary>
        /// Key of the space property.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("key")]
        public string Key { get; set; }

        /// <summary>
        /// Value of the space property.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("value")]
        public object Value { get; set; }

        /// <summary>
        /// RFC3339 compliant date time at which the property was created.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("createdAt")]
        public System.DateTimeOffset? CreatedAt { get; set; }

        /// <summary>
        /// Atlassian account ID of the user that created the space property.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("createdBy")]
        public string CreatedBy { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("version")]
        public Version3 Version { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class SpacePropertyCreateRequest
    {
        /// <summary>
        /// Key of the space property
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("key")]
        public string Key { get; set; }

        /// <summary>
        /// Value of the space property.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("value")]
        public object Value { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class SpacePropertyUpdateRequest
    {
        /// <summary>
        /// Key of the space property
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("key")]
        public string Key { get; set; }

        /// <summary>
        /// Value of the space property.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("value")]
        public object Value { get; set; }

        /// <summary>
        /// New version number and associated message
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("version")]
        public Version4 Version { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// The type of space.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum SpaceType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"global")]
        Global = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"collaboration")]
        Collaboration = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"knowledge_base")]
        Knowledge_base = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"personal")]
        Personal = 3,

    }

    /// <summary>
    /// The status of the space.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum SpaceStatus
    {

        [System.Runtime.Serialization.EnumMember(Value = @"current")]
        Current = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"archived")]
        Archived = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ConfluenceTask
    {
        /// <summary>
        /// ID of the task.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("id")]
        public string Id { get; set; }

        /// <summary>
        /// Local ID of the task. This ID is local to the corresponding page or blog post.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("localId")]
        public string LocalId { get; set; }

        /// <summary>
        /// ID of the space the task is in.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("spaceId")]
        public string SpaceId { get; set; }

        /// <summary>
        /// ID of the page the task is in.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("pageId")]
        public string PageId { get; set; }

        /// <summary>
        /// ID of the blog post the task is in.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("blogPostId")]
        public string BlogPostId { get; set; }

        /// <summary>
        /// Status of the task.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("status")]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public TaskStatus? Status { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("body")]
        public TaskBodySingle Body { get; set; }

        /// <summary>
        /// Account ID of the user who created this task.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("createdBy")]
        public string CreatedBy { get; set; }

        /// <summary>
        /// Account ID of the user to whom this task is assigned.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("assignedTo")]
        public string AssignedTo { get; set; }

        /// <summary>
        /// Account ID of the user who completed this task.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("completedBy")]
        public string CompletedBy { get; set; }

        /// <summary>
        /// Date and time when the task was created. In format "YYYY-MM-DDTHH:mm:ss.sssZ".
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("createdAt")]
        public System.DateTimeOffset? CreatedAt { get; set; }

        /// <summary>
        /// Date and time when the task was updated. In format "YYYY-MM-DDTHH:mm:ss.sssZ".
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("updatedAt")]
        public System.DateTimeOffset? UpdatedAt { get; set; }

        /// <summary>
        /// Date and time when the task is due. In format "YYYY-MM-DDTHH:mm:ss.sssZ".
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("dueAt")]
        public System.DateTimeOffset? DueAt { get; set; }

        /// <summary>
        /// Date and time when the task was completed. In format "YYYY-MM-DDTHH:mm:ss.sssZ".
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("completedAt")]
        public System.DateTimeOffset? CompletedAt { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// The account type of the user.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum AccountType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"atlassian")]
        Atlassian = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"app")]
        App = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"customer")]
        Customer = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"unknown")]
        Unknown = 3,

    }

    /// <summary>
    /// The account status of the user.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum AccountStatus
    {

        [System.Runtime.Serialization.EnumMember(Value = @"active")]
        Active = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"inactive")]
        Inactive = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"closed")]
        Closed = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"unknown")]
        Unknown = 3,

    }

    /// <summary>
    /// This object represents an icon. If used as a profilePicture, this may be returned as null, depending on the user's privacy setting.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Icon
    {

        [System.Text.Json.Serialization.JsonPropertyName("path")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Path { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("isDefault")]
        public bool IsDefault { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class User
    {
        /// <summary>
        /// Display name of the user.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("displayName")]
        public string DisplayName { get; set; }

        /// <summary>
        /// Time zone of the user. Depending on the user's privacy
        /// <br/>setting, this may return null.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("timeZone")]
        public string TimeZone { get; set; }

        /// <summary>
        /// Space ID of the user's personal space. Returns null, if no personal space for the user.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("personalSpaceId")]
        public string PersonalSpaceId { get; set; }

        /// <summary>
        /// Whether the user is an external collaborator.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("isExternalCollaborator")]
        public bool? IsExternalCollaborator { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("accountStatus")]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public AccountStatus? AccountStatus { get; set; }

        /// <summary>
        /// Account ID of the user.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("accountId")]
        public string AccountId { get; set; }

        /// <summary>
        /// The email address of the user. Depending on the user's privacy setting, this may return an empty string.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("email")]
        public string Email { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("accountType")]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public AccountType? AccountType { get; set; }

        /// <summary>
        /// Public name of the user.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("publicName")]
        public string PublicName { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("profilePicture")]
        public Icon ProfilePicture { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Version
    {
        /// <summary>
        /// Date and time when the version was created. In format "YYYY-MM-DDTHH:mm:ss.sssZ".
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("createdAt")]
        public System.DateTimeOffset? CreatedAt { get; set; }

        /// <summary>
        /// Message associated with the current version.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("message")]
        public string Message { get; set; }

        /// <summary>
        /// The version number.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("number")]
        public int? Number { get; set; }

        /// <summary>
        /// Describes if this version is a minor version. Email notifications and activity stream updates are not created for minor versions.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("minorEdit")]
        public bool? MinorEdit { get; set; }

        /// <summary>
        /// The account ID of the user who created this version.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("authorId")]
        public string AuthorId { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class AttachmentVersion
    {
        /// <summary>
        /// Date and time when the version was created. In format "YYYY-MM-DDTHH:mm:ss.sssZ".
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("createdAt")]
        public System.DateTimeOffset? CreatedAt { get; set; }

        /// <summary>
        /// Message associated with the current version.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("message")]
        public string Message { get; set; }

        /// <summary>
        /// The version number.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("number")]
        public int? Number { get; set; }

        /// <summary>
        /// Describes if this version is a minor version. Email notifications and activity stream updates are not created for minor versions.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("minorEdit")]
        public bool? MinorEdit { get; set; }

        /// <summary>
        /// The account ID of the user who created this version.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("authorId")]
        public string AuthorId { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("attachment")]
        public VersionedEntity Attachment { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class BlogPostVersion
    {
        /// <summary>
        /// Date and time when the version was created. In format "YYYY-MM-DDTHH:mm:ss.sssZ".
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("createdAt")]
        public System.DateTimeOffset? CreatedAt { get; set; }

        /// <summary>
        /// Message associated with the current version.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("message")]
        public string Message { get; set; }

        /// <summary>
        /// The version number.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("number")]
        public int? Number { get; set; }

        /// <summary>
        /// Describes if this version is a minor version. Email notifications and activity stream updates are not created for minor versions.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("minorEdit")]
        public bool? MinorEdit { get; set; }

        /// <summary>
        /// The account ID of the user who created this version.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("authorId")]
        public string AuthorId { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("blogpost")]
        public VersionedEntity Blogpost { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class PageVersion
    {
        /// <summary>
        /// Date and time when the version was created. In format "YYYY-MM-DDTHH:mm:ss.sssZ".
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("createdAt")]
        public System.DateTimeOffset? CreatedAt { get; set; }

        /// <summary>
        /// Message associated with the current version.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("message")]
        public string Message { get; set; }

        /// <summary>
        /// The version number.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("number")]
        public int? Number { get; set; }

        /// <summary>
        /// Describes if this version is a minor version. Email notifications and activity stream updates are not created for minor versions.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("minorEdit")]
        public bool? MinorEdit { get; set; }

        /// <summary>
        /// The account ID of the user who created this version.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("authorId")]
        public string AuthorId { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("page")]
        public VersionedEntity Page { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class CustomContentVersion
    {
        /// <summary>
        /// Date and time when the version was created. In format "YYYY-MM-DDTHH:mm:ss.sssZ".
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("createdAt")]
        public System.DateTimeOffset? CreatedAt { get; set; }

        /// <summary>
        /// Message associated with the current version.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("message")]
        public string Message { get; set; }

        /// <summary>
        /// The version number.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("number")]
        public int? Number { get; set; }

        /// <summary>
        /// Describes if this version is a minor version. Email notifications and activity stream updates are not created for minor versions.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("minorEdit")]
        public bool? MinorEdit { get; set; }

        /// <summary>
        /// The account ID of the user who created this version.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("authorId")]
        public string AuthorId { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("custom")]
        public VersionedEntity Custom { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class CommentVersion
    {
        /// <summary>
        /// Date and time when the version was created. In format "YYYY-MM-DDTHH:mm:ss.sssZ".
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("createdAt")]
        public System.DateTimeOffset? CreatedAt { get; set; }

        /// <summary>
        /// Message associated with the current version.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("message")]
        public string Message { get; set; }

        /// <summary>
        /// The version number.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("number")]
        public int? Number { get; set; }

        /// <summary>
        /// Describes if this version is a minor version. Email notifications and activity stream updates are not created for minor versions.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("minorEdit")]
        public bool? MinorEdit { get; set; }

        /// <summary>
        /// The account ID of the user who created this version.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("authorId")]
        public string AuthorId { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("comment")]
        public VersionedEntity Comment { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class VersionedEntity
    {
        /// <summary>
        /// Title of the entity.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("title")]
        public string Title { get; set; }

        /// <summary>
        /// ID of the entity.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("id")]
        public string Id { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("body")]
        public BodyBulk Body { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// The sort fields for attachments. The default sort direction is ascending. To sort in descending order, append a `-` character before the sort field. For example, `fieldName` or `-fieldName`.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum AttachmentSortOrder
    {

        [System.Runtime.Serialization.EnumMember(Value = @"created-date")]
        CreatedDate = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"-created-date")]
        MinuscreatedDate = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"modified-date")]
        ModifiedDate = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"-modified-date")]
        MinusmodifiedDate = 3,

    }

    /// <summary>
    /// The sort fields for blog posts. The default sort direction is ascending. To sort in descending order, append a `-` character before the sort field. For example, `fieldName` or `-fieldName`.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum BlogPostSortOrder
    {

        [System.Runtime.Serialization.EnumMember(Value = @"id")]
        Id = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"-id")]
        Minusid = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"created-date")]
        CreatedDate = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"-created-date")]
        MinuscreatedDate = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"modified-date")]
        ModifiedDate = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"-modified-date")]
        MinusmodifiedDate = 5,

    }

    /// <summary>
    /// The sort fields for comments. The default sort direction is ascending. To sort in descending order, append a `-` character before the sort field. For example, `fieldName` or `-fieldName`.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum CommentSortOrder
    {

        [System.Runtime.Serialization.EnumMember(Value = @"created-date")]
        CreatedDate = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"-created-date")]
        MinuscreatedDate = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"modified-date")]
        ModifiedDate = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"-modified-date")]
        MinusmodifiedDate = 3,

    }

    /// <summary>
    /// The sort fields for content properties. The default sort direction is ascending. To sort in descending order, append a `-` character before the sort field. For example, `fieldName` or `-fieldName`.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum ContentPropertySortOrder
    {

        [System.Runtime.Serialization.EnumMember(Value = @"key")]
        Key = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"-key")]
        Minuskey = 1,

    }

    /// <summary>
    /// The sort fields for hierarchical content types. The default sort direction is ascending. To sort in descending order, append a `-` character before the sort field. For example, `fieldName` or `-fieldName`.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum ContentSortOrder
    {

        [System.Runtime.Serialization.EnumMember(Value = @"created-date")]
        CreatedDate = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"-created-date")]
        MinuscreatedDate = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"id")]
        Id = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"-id")]
        Minusid = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"modified-date")]
        ModifiedDate = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"-modified-date")]
        MinusmodifiedDate = 5,

        [System.Runtime.Serialization.EnumMember(Value = @"child-position")]
        ChildPosition = 6,

        [System.Runtime.Serialization.EnumMember(Value = @"-child-position")]
        MinuschildPosition = 7,

        [System.Runtime.Serialization.EnumMember(Value = @"title")]
        Title = 8,

        [System.Runtime.Serialization.EnumMember(Value = @"-title")]
        Minustitle = 9,

    }

    /// <summary>
    /// The sort fields for labels. The default sort direction is ascending. To sort in descending order, append a `-` character before the sort field. For example, `fieldName` or `-fieldName`.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum LabelSortOrder
    {

        [System.Runtime.Serialization.EnumMember(Value = @"created-date")]
        CreatedDate = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"-created-date")]
        MinuscreatedDate = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"id")]
        Id = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"-id")]
        Minusid = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"name")]
        Name = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"-name")]
        Minusname = 5,

    }

    /// <summary>
    /// The sort fields for child pages. The default sort direction is ascending by child-position. To sort in descending order, append a `-` character before the sort field. For example, `fieldName` or `-fieldName`.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum ChildPageSortOrder
    {

        [System.Runtime.Serialization.EnumMember(Value = @"created-date")]
        CreatedDate = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"-created-date")]
        MinuscreatedDate = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"id")]
        Id = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"-id")]
        Minusid = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"child-position")]
        ChildPosition = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"-child-position")]
        MinuschildPosition = 5,

        [System.Runtime.Serialization.EnumMember(Value = @"modified-date")]
        ModifiedDate = 6,

        [System.Runtime.Serialization.EnumMember(Value = @"-modified-date")]
        MinusmodifiedDate = 7,

    }

    /// <summary>
    /// The sort fields for child custom content. The default sort direction is ascending by id. To sort in descending order, append a `-` character before the sort field. For example, `fieldName` or `-fieldName`.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum ChildCustomContentSortOrder
    {

        [System.Runtime.Serialization.EnumMember(Value = @"created-date")]
        CreatedDate = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"-created-date")]
        MinuscreatedDate = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"id")]
        Id = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"-id")]
        Minusid = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"modified-date")]
        ModifiedDate = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"-modified-date")]
        MinusmodifiedDate = 5,

    }

    /// <summary>
    /// The sort fields for custom content. The default sort direction is ascending. To sort in descending order, append a `-` character before the sort field. For example, `fieldName` or `-fieldName`.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum CustomContentSortOrder
    {

        [System.Runtime.Serialization.EnumMember(Value = @"id")]
        Id = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"-id")]
        Minusid = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"created-date")]
        CreatedDate = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"-created-date")]
        MinuscreatedDate = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"modified-date")]
        ModifiedDate = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"-modified-date")]
        MinusmodifiedDate = 5,

        [System.Runtime.Serialization.EnumMember(Value = @"title")]
        Title = 6,

        [System.Runtime.Serialization.EnumMember(Value = @"-title")]
        Minustitle = 7,

    }

    /// <summary>
    /// The sort fields for pages. The default sort direction is ascending. To sort in descending order, append a `-` character before the sort field. For example, `fieldName` or `-fieldName`.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum PageSortOrder
    {

        [System.Runtime.Serialization.EnumMember(Value = @"id")]
        Id = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"-id")]
        Minusid = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"created-date")]
        CreatedDate = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"-created-date")]
        MinuscreatedDate = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"modified-date")]
        ModifiedDate = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"-modified-date")]
        MinusmodifiedDate = 5,

        [System.Runtime.Serialization.EnumMember(Value = @"title")]
        Title = 6,

        [System.Runtime.Serialization.EnumMember(Value = @"-title")]
        Minustitle = 7,

    }

    /// <summary>
    /// The sort fields for spaces. The default sort direction is ascending. To sort in descending order, append a `-` character before the sort field. For example, `fieldName` or `-fieldName`.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum SpaceSortOrder
    {

        [System.Runtime.Serialization.EnumMember(Value = @"id")]
        Id = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"-id")]
        Minusid = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"key")]
        Key = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"-key")]
        Minuskey = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"name")]
        Name = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"-name")]
        Minusname = 5,

    }

    /// <summary>
    /// The sort fields for versions. The default sort direction is ascending. To sort in descending order, append a `-` character before the sort field. For example, `fieldName` or `-fieldName`.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum VersionSortOrder
    {

        [System.Runtime.Serialization.EnumMember(Value = @"modified-date")]
        ModifiedDate = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"-modified-date")]
        MinusmodifiedDate = 1,

    }

    /// <summary>
    /// Inline comment resolution status
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum InlineCommentResolutionStatus
    {

        [System.Runtime.Serialization.EnumMember(Value = @"open")]
        Open = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"reopened")]
        Reopened = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"resolved")]
        Resolved = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"dangling")]
        Dangling = 3,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class InlineCommentProperties
    {
        /// <summary>
        /// Property value used to reference the highlighted element in DOM.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("inlineMarkerRef")]
        public string InlineMarkerRef { get; set; }

        /// <summary>
        /// Text that is highlighted.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("inlineOriginalSelection")]
        public string InlineOriginalSelection { get; set; }

        /// <summary>
        /// Deprecated, use `inlineMarkerRef` instead.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("inline-marker-ref")]
        [System.Obsolete]
        public string InlineMarkerRef2 { get; set; }

        /// <summary>
        /// Deprecated, use `inlineOriginalSelection` instead.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("inline-original-selection")]
        [System.Obsolete]
        public string InlineOriginalSelection2 { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class PageCommentModel
    {
        /// <summary>
        /// ID of the comment.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("id")]
        public string Id { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("status")]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public ContentStatus? Status { get; set; }

        /// <summary>
        /// Title of the comment.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("title")]
        public string Title { get; set; }

        /// <summary>
        /// ID of the page the comment is in.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("pageId")]
        public string PageId { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("version")]
        public Version Version { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("body")]
        public BodyBulk Body { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("_links")]
        public CommentLinks _links { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class PageInlineCommentModel
    {
        /// <summary>
        /// ID of the comment.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("id")]
        public string Id { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("status")]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public ContentStatus? Status { get; set; }

        /// <summary>
        /// Title of the comment.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("title")]
        public string Title { get; set; }

        /// <summary>
        /// ID of the page the comment is in.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("pageId")]
        public string PageId { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("version")]
        public Version Version { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("body")]
        public BodyBulk Body { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("resolutionStatus")]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public InlineCommentResolutionStatus? ResolutionStatus { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("properties")]
        public InlineCommentProperties Properties { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("_links")]
        public CommentLinks _links { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class BlogPostCommentModel
    {
        /// <summary>
        /// ID of the comment.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("id")]
        public string Id { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("status")]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public ContentStatus? Status { get; set; }

        /// <summary>
        /// Title of the comment.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("title")]
        public string Title { get; set; }

        /// <summary>
        /// ID of the blog post the comment is in.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("blogPostId")]
        public string BlogPostId { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("version")]
        public Version Version { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("body")]
        public BodyBulk Body { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("_links")]
        public CommentLinks _links { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class BlogPostInlineCommentModel
    {
        /// <summary>
        /// ID of the comment.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("id")]
        public string Id { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("status")]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public ContentStatus? Status { get; set; }

        /// <summary>
        /// Title of the comment.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("title")]
        public string Title { get; set; }

        /// <summary>
        /// ID of the blog post the comment is in.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("blogPostId")]
        public string BlogPostId { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("version")]
        public Version Version { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("body")]
        public BodyBulk Body { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("resolutionStatus")]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public InlineCommentResolutionStatus? ResolutionStatus { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("properties")]
        public InlineCommentProperties Properties { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("_links")]
        public CommentLinks _links { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ChildrenCommentModel
    {
        /// <summary>
        /// ID of the comment.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("id")]
        public string Id { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("status")]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public ContentStatus? Status { get; set; }

        /// <summary>
        /// Title of the comment.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("title")]
        public string Title { get; set; }

        /// <summary>
        /// ID of the parent comment the child comment is in.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("parentCommentId")]
        public string ParentCommentId { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("version")]
        public Version Version { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("body")]
        public BodyBulk Body { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("_links")]
        public CommentLinks _links { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class InlineCommentChildrenModel
    {
        /// <summary>
        /// ID of the comment.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("id")]
        public string Id { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("status")]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public ContentStatus? Status { get; set; }

        /// <summary>
        /// Title of the comment.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("title")]
        public string Title { get; set; }

        /// <summary>
        /// ID of the parent comment the child comment is in.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("parentCommentId")]
        public string ParentCommentId { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("version")]
        public Version Version { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("body")]
        public BodyBulk Body { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("resolutionStatus")]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public InlineCommentResolutionStatus? ResolutionStatus { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("properties")]
        public InlineCommentProperties Properties { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("_links")]
        public CommentLinks _links { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class AttachmentCommentModel
    {
        /// <summary>
        /// ID of the comment.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("id")]
        public string Id { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("status")]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public ContentStatus? Status { get; set; }

        /// <summary>
        /// Title of the comment.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("title")]
        public string Title { get; set; }

        /// <summary>
        /// ID of the attachment containing the comment.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("attachmentId")]
        public string AttachmentId { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("version")]
        public Version Version { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("body")]
        public BodySingle Body { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("_links")]
        public CommentLinks _links { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class CustomContentCommentModel
    {
        /// <summary>
        /// ID of the comment.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("id")]
        public string Id { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("status")]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public ContentStatus? Status { get; set; }

        /// <summary>
        /// Title of the comment.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("title")]
        public string Title { get; set; }

        /// <summary>
        /// ID of the custom content containing the comment.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("customContentId")]
        public string CustomContentId { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("version")]
        public Version Version { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("body")]
        public BodySingle Body { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("_links")]
        public CommentLinks _links { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class FooterCommentModel
    {
        /// <summary>
        /// ID of the comment.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("id")]
        public string Id { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("status")]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public ContentStatus? Status { get; set; }

        /// <summary>
        /// Title of the comment.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("title")]
        public string Title { get; set; }

        /// <summary>
        /// ID of the blog post containing the comment if the comment is on a blog post.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("blogPostId")]
        public string BlogPostId { get; set; }

        /// <summary>
        /// ID of the page containing the comment if the comment is on a page.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("pageId")]
        public string PageId { get; set; }

        /// <summary>
        /// ID of the attachment containing the comment if the comment is on an attachment.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("attachmentId")]
        public string AttachmentId { get; set; }

        /// <summary>
        /// ID of the custom content containing the comment if the comment is on a custom content.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("customContentId")]
        public string CustomContentId { get; set; }

        /// <summary>
        /// ID of the parent comment if the comment is a reply.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("parentCommentId")]
        public string ParentCommentId { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("version")]
        public Version Version { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("properties")]
        public Properties6 Properties { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("operations")]
        public Operations6 Operations { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("likes")]
        public Likes3 Likes { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("versions")]
        public Versions5 Versions { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("body")]
        public BodySingle Body { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("_links")]
        public CommentLinks _links { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class InlineCommentModel
    {
        /// <summary>
        /// ID of the comment.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("id")]
        public string Id { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("status")]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public ContentStatus? Status { get; set; }

        /// <summary>
        /// Title of the comment.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("title")]
        public string Title { get; set; }

        /// <summary>
        /// ID of the blog post containing the comment if the comment is on a blog post.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("blogPostId")]
        public string BlogPostId { get; set; }

        /// <summary>
        /// ID of the page containing the comment if the comment is on a page.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("pageId")]
        public string PageId { get; set; }

        /// <summary>
        /// ID of the parent comment if the comment is a reply.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("parentCommentId")]
        public string ParentCommentId { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("version")]
        public Version Version { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("body")]
        public BodySingle Body { get; set; }

        /// <summary>
        /// Atlassian Account ID of last person who modified the resolve state of the comment. Null until comment is resolved or reopened.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("resolutionLastModifierId")]
        public string ResolutionLastModifierId { get; set; }

        /// <summary>
        /// Timestamp of the last modification to the comment's resolution status. Null until comment is resolved or reopened.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("resolutionLastModifiedAt")]
        public System.DateTimeOffset? ResolutionLastModifiedAt { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("resolutionStatus")]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public InlineCommentResolutionStatus? ResolutionStatus { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("properties")]
        public Properties7 Properties { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("operations")]
        public Operations7 Operations { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("likes")]
        public Likes4 Likes { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("versions")]
        public Versions6 Versions { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("_links")]
        public CommentLinks _links { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class CreateFooterCommentModel
    {
        /// <summary>
        /// ID of the containing blog post, if intending to create a top level footer comment. Do not provide if creating a reply.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("blogPostId")]
        public string BlogPostId { get; set; }

        /// <summary>
        /// ID of the containing page, if intending to create a top level footer comment. Do not provide if creating a reply.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("pageId")]
        public string PageId { get; set; }

        /// <summary>
        /// ID of the parent comment, if intending to create a reply. Do not provide if creating a top level comment.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("parentCommentId")]
        public string ParentCommentId { get; set; }

        /// <summary>
        /// ID of the attachment, if intending to create a comment against an attachment.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("attachmentId")]
        public string AttachmentId { get; set; }

        /// <summary>
        /// ID of the custom content, if intending to create a comment against a custom content.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("customContentId")]
        public string CustomContentId { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("body")]
        public CommentBodyWrite Body { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class CreateInlineCommentModel
    {
        /// <summary>
        /// ID of the containing blog post, if intending to create a top level footer comment. Do not provide if creating a reply.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("blogPostId")]
        public string BlogPostId { get; set; }

        /// <summary>
        /// ID of the containing page, if intending to create a top level footer comment. Do not provide if creating a reply.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("pageId")]
        public string PageId { get; set; }

        /// <summary>
        /// ID of the parent comment, if intending to create a reply. Do not provide if creating a top level comment.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("parentCommentId")]
        public string ParentCommentId { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("body")]
        public CommentBodyWrite Body { get; set; }

        /// <summary>
        /// Object describing the text to highlight on the page/blog post. Only applicable for top level inline comments (not replies) and required in that case.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("inlineCommentProperties")]
        public InlineCommentProperties2 InlineCommentProperties { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class UpdateFooterCommentModel
    {

        [System.Text.Json.Serialization.JsonPropertyName("version")]
        public Version5 Version { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("body")]
        public CommentBodyWrite Body { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class UpdateInlineCommentModel
    {

        [System.Text.Json.Serialization.JsonPropertyName("version")]
        public Version6 Version { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("body")]
        public CommentBodyWrite Body { get; set; }

        /// <summary>
        /// Resolved state of the comment. Set to true to resolve the comment, set to false to reopen it. If
        /// <br/>matching the existing state (i.e. true -&gt; resolved or false -&gt; open/reopened) , no change will occur. A dangling
        /// <br/>comment cannot be updated.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("resolved")]
        public bool? Resolved { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class AbstractPageLinks
    {
        /// <summary>
        /// Web UI link of the content.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("webui")]
        public string Webui { get; set; }

        /// <summary>
        /// Edit UI link of the content.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("editui")]
        public string Editui { get; set; }

        /// <summary>
        /// Web UI link of the content.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("tinyui")]
        public string Tinyui { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class AttachmentLinks
    {
        /// <summary>
        /// Web UI link of the content.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("webui")]
        public string Webui { get; set; }

        /// <summary>
        /// Download link of the content.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("download")]
        public string Download { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class CustomContentLinks
    {
        /// <summary>
        /// Web UI link of the content.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("webui")]
        public string Webui { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class CommentLinks
    {
        /// <summary>
        /// Web UI link of the content.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("webui")]
        public string Webui { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class DatabaseLinks
    {
        /// <summary>
        /// Web UI link of the content.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("webui")]
        public string Webui { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class FolderLinks
    {
        /// <summary>
        /// Web UI link of the content.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("webui")]
        public string Webui { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class SmartLinkLinks
    {
        /// <summary>
        /// Web UI link of the content.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("webui")]
        public string Webui { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class SpaceLinks
    {
        /// <summary>
        /// Web UI link of the space.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("webui")]
        public string Webui { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class WhiteboardLinks
    {
        /// <summary>
        /// Web UI link of the content.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("webui")]
        public string Webui { get; set; }

        /// <summary>
        /// Edit UI link of the content.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("editui")]
        public string Editui { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// Details about data policies.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class DataPolicyMetadata
    {
        /// <summary>
        /// Whether the workspace contains any content blocked for (inaccessible to) the requesting client application.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("anyContentBlocked")]
        public bool? AnyContentBlocked { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class DataPolicySpace
    {
        /// <summary>
        /// ID of the space.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("id")]
        public string Id { get; set; }

        /// <summary>
        /// Key of the space.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("key")]
        public string Key { get; set; }

        /// <summary>
        /// Name of the space.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("name")]
        public string Name { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("description")]
        public SpaceDescription Description { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("dataPolicy")]
        public DataPolicy DataPolicy { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("icon")]
        public SpaceIcon Icon { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("_links")]
        public SpaceLinks _links { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class OptionalFieldMeta
    {
        /// <summary>
        /// Indicates if there are more available results that can be fetched.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("hasMore")]
        public bool? HasMore { get; set; }

        /// <summary>
        /// A token that can be used in the query parameter of the endpoint returned in the `_links` property to retrieve the next set of results.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("cursor")]
        public string Cursor { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class OptionalFieldLinks
    {
        /// <summary>
        /// A relative URL that can be used to fetch results beyond what this include parameter retrieves.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("self")]
        public string Self { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class MultiEntityLinks
    {
        /// <summary>
        /// Used for pagination. Contains the relative URL for the next set of results, using a cursor query parameter.
        /// <br/>This property will not be present if there is no additional data available.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("next")]
        public string Next { get; set; }

        /// <summary>
        /// Base url of the Confluence site.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("base")]
        public string Base { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// A unit of [data classification](https://support.atlassian.com/security-and-access-policies/docs/what-is-data-classification/) defined by an organiation. 
    /// <br/>A classification level may be associated with specific storage and handling requirements or expectations.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ClassificationLevel
    {
        /// <summary>
        /// The ID of the classification level.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("id")]
        public string Id { get; set; }

        /// <summary>
        /// The status of the classification level.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("status")]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public ClassificationLevelStatus? Status { get; set; }

        /// <summary>
        /// The order of the classification level object.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("order")]
        public double? Order { get; set; }

        /// <summary>
        /// The name of the classification level object.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("name")]
        public string Name { get; set; }

        /// <summary>
        /// The description of the classification level object.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("description")]
        public string Description { get; set; }

        /// <summary>
        /// The guideline of the classification level object.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("guideline")]
        public string Guideline { get; set; }

        /// <summary>
        /// The color of the classification level object.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("color")]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public ClassificationLevelColor? Color { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum ClassificationLevelColor
    {

        [System.Runtime.Serialization.EnumMember(Value = @"RED")]
        RED = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"RED_BOLD")]
        RED_BOLD = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"ORANGE")]
        ORANGE = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"YELLOW")]
        YELLOW = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"GREEN")]
        GREEN = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"BLUE")]
        BLUE = 5,

        [System.Runtime.Serialization.EnumMember(Value = @"NAVY")]
        NAVY = 6,

        [System.Runtime.Serialization.EnumMember(Value = @"TEAL")]
        TEAL = 7,

        [System.Runtime.Serialization.EnumMember(Value = @"PURPLE")]
        PURPLE = 8,

        [System.Runtime.Serialization.EnumMember(Value = @"GREY")]
        GREY = 9,

        [System.Runtime.Serialization.EnumMember(Value = @"LIME")]
        LIME = 10,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum ClassificationLevelStatus
    {

        [System.Runtime.Serialization.EnumMember(Value = @"DRAFT")]
        DRAFT = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"PUBLISHED")]
        PUBLISHED = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"ARCHIVED")]
        ARCHIVED = 2,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum Anonymous
    {

        [System.Runtime.Serialization.EnumMember(Value = @"current")]
        Current = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"archived")]
        Archived = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"trashed")]
        Trashed = 2,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum Prefix
    {

        [System.Runtime.Serialization.EnumMember(Value = @"my")]
        My = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"team")]
        Team = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"global")]
        Global = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"system")]
        System = 3,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum Anonymous2
    {

        [System.Runtime.Serialization.EnumMember(Value = @"current")]
        Current = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"deleted")]
        Deleted = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"trashed")]
        Trashed = 2,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum Anonymous3
    {

        [System.Runtime.Serialization.EnumMember(Value = @"current")]
        Current = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"trashed")]
        Trashed = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"deleted")]
        Deleted = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"historical")]
        Historical = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"draft")]
        Draft = 4,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum Anonymous4
    {

        [System.Runtime.Serialization.EnumMember(Value = @"current")]
        Current = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"archived")]
        Archived = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"trashed")]
        Trashed = 2,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum Prefix2
    {

        [System.Runtime.Serialization.EnumMember(Value = @"my")]
        My = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"team")]
        Team = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"global")]
        Global = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"system")]
        System = 3,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum Anonymous5
    {

        [System.Runtime.Serialization.EnumMember(Value = @"current")]
        Current = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"archived")]
        Archived = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"trashed")]
        Trashed = 2,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum Prefix3
    {

        [System.Runtime.Serialization.EnumMember(Value = @"my")]
        My = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"team")]
        Team = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"global")]
        Global = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"system")]
        System = 3,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum Anonymous6
    {

        [System.Runtime.Serialization.EnumMember(Value = @"current")]
        Current = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"archived")]
        Archived = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"deleted")]
        Deleted = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"trashed")]
        Trashed = 3,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum Anonymous7
    {

        [System.Runtime.Serialization.EnumMember(Value = @"current")]
        Current = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"archived")]
        Archived = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"trashed")]
        Trashed = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"deleted")]
        Deleted = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"historical")]
        Historical = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"draft")]
        Draft = 5,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum Anonymous8
    {

        [System.Runtime.Serialization.EnumMember(Value = @"current")]
        Current = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"archived")]
        Archived = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"trashed")]
        Trashed = 2,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum Prefix4
    {

        [System.Runtime.Serialization.EnumMember(Value = @"my")]
        My = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"team")]
        Team = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"global")]
        Global = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"system")]
        System = 3,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum ConfluenceType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"global")]
        Global = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"collaboration")]
        Collaboration = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"knowledge_base")]
        Knowledge_base = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"personal")]
        Personal = 3,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum Status
    {

        [System.Runtime.Serialization.EnumMember(Value = @"current")]
        Current = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"archived")]
        Archived = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum Anonymous9
    {

        [System.Runtime.Serialization.EnumMember(Value = @"current")]
        Current = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"deleted")]
        Deleted = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"trashed")]
        Trashed = 2,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum Prefix5
    {

        [System.Runtime.Serialization.EnumMember(Value = @"my")]
        My = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"team")]
        Team = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum Prefix6
    {

        [System.Runtime.Serialization.EnumMember(Value = @"my")]
        My = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"team")]
        Team = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum Depth
    {

        [System.Runtime.Serialization.EnumMember(Value = @"all")]
        All = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"root")]
        Root = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum Anonymous10
    {

        [System.Runtime.Serialization.EnumMember(Value = @"current")]
        Current = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"archived")]
        Archived = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"deleted")]
        Deleted = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"trashed")]
        Trashed = 3,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum Anonymous11
    {

        [System.Runtime.Serialization.EnumMember(Value = @"current")]
        Current = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"archived")]
        Archived = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"trashed")]
        Trashed = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"deleted")]
        Deleted = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"historical")]
        Historical = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"draft")]
        Draft = 5,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum Anonymous12
    {

        [System.Runtime.Serialization.EnumMember(Value = @"current")]
        Current = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"archived")]
        Archived = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"trashed")]
        Trashed = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"deleted")]
        Deleted = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"historical")]
        Historical = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"draft")]
        Draft = 5,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum Anonymous13
    {

        [System.Runtime.Serialization.EnumMember(Value = @"resolved")]
        Resolved = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"open")]
        Open = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"dangling")]
        Dangling = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"reopened")]
        Reopened = 3,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum Anonymous14
    {

        [System.Runtime.Serialization.EnumMember(Value = @"current")]
        Current = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"deleted")]
        Deleted = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"trashed")]
        Trashed = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"historical")]
        Historical = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"draft")]
        Draft = 4,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum Anonymous15
    {

        [System.Runtime.Serialization.EnumMember(Value = @"current")]
        Current = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"deleted")]
        Deleted = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"trashed")]
        Trashed = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"historical")]
        Historical = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"draft")]
        Draft = 4,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum Anonymous16
    {

        [System.Runtime.Serialization.EnumMember(Value = @"resolved")]
        Resolved = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"open")]
        Open = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"dangling")]
        Dangling = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"reopened")]
        Reopened = 3,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Body : UpdateFooterCommentModel
    {

        [System.Text.Json.Serialization.JsonPropertyName("_links")]
        public _links _links { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum Status2
    {

        [System.Runtime.Serialization.EnumMember(Value = @"complete")]
        Complete = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"incomplete")]
        Incomplete = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum Status3
    {

        [System.Runtime.Serialization.EnumMember(Value = @"current")]
        Current = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"draft")]
        Draft = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"archived")]
        Archived = 2,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum Status4
    {

        [System.Runtime.Serialization.EnumMember(Value = @"current")]
        Current = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"draft")]
        Draft = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"archived")]
        Archived = 2,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Response
    {

        [System.Text.Json.Serialization.JsonPropertyName("results")]
        public System.Collections.Generic.IEnumerable<AttachmentBulk> Results { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("_links")]
        public MultiEntityLinks _links { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Response2 : AttachmentSingle
    {

        [System.Text.Json.Serialization.JsonPropertyName("_links")]
        public _links2 _links { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Response3
    {

        [System.Text.Json.Serialization.JsonPropertyName("results")]
        public System.Collections.Generic.IEnumerable<Label> Results { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("_links")]
        public MultiEntityLinks _links { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Response4
    {

        [System.Text.Json.Serialization.JsonPropertyName("results")]
        public System.Collections.Generic.IEnumerable<ContentProperty> Results { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("_links")]
        public MultiEntityLinks _links { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Response5
    {

        [System.Text.Json.Serialization.JsonPropertyName("results")]
        public System.Collections.Generic.IEnumerable<AttachmentVersion> Results { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("_links")]
        public MultiEntityLinks _links { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Response6
    {

        [System.Text.Json.Serialization.JsonPropertyName("results")]
        public System.Collections.Generic.IEnumerable<AttachmentCommentModel> Results { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("_links")]
        public MultiEntityLinks _links { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Response7
    {

        [System.Text.Json.Serialization.JsonPropertyName("results")]
        public System.Collections.Generic.IEnumerable<BlogPostBulk> Results { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("_links")]
        public MultiEntityLinks _links { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Response8 : BlogPostSingle
    {

        [System.Text.Json.Serialization.JsonPropertyName("_links")]
        public _links3 _links { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Response9 : BlogPostSingle
    {

        [System.Text.Json.Serialization.JsonPropertyName("_links")]
        public _links4 _links { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Response10 : BlogPostSingle
    {

        [System.Text.Json.Serialization.JsonPropertyName("_links")]
        public _links5 _links { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Response11
    {

        [System.Text.Json.Serialization.JsonPropertyName("results")]
        public System.Collections.Generic.IEnumerable<AttachmentBulk> Results { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("_links")]
        public MultiEntityLinks _links { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Response12
    {

        [System.Text.Json.Serialization.JsonPropertyName("results")]
        public System.Collections.Generic.IEnumerable<CustomContentBulk> Results { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("_links")]
        public MultiEntityLinks _links { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Response13
    {

        [System.Text.Json.Serialization.JsonPropertyName("results")]
        public System.Collections.Generic.IEnumerable<Label> Results { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("_links")]
        public MultiEntityLinks _links { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Integer
    {
        /// <summary>
        /// The count number
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("count")]
        public long? Count { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Response14
    {

        [System.Text.Json.Serialization.JsonPropertyName("results")]
        public System.Collections.Generic.IEnumerable<Like> Results { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("_links")]
        public MultiEntityLinks _links { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Response15
    {

        [System.Text.Json.Serialization.JsonPropertyName("results")]
        public System.Collections.Generic.IEnumerable<ContentProperty> Results { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("_links")]
        public MultiEntityLinks _links { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Response16
    {

        [System.Text.Json.Serialization.JsonPropertyName("results")]
        public System.Collections.Generic.IEnumerable<BlogPostVersion> Results { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("_links")]
        public MultiEntityLinks _links { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Response17
    {

        [System.Text.Json.Serialization.JsonPropertyName("results")]
        public System.Collections.Generic.IEnumerable<CustomContentBulk> Results { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("_links")]
        public MultiEntityLinks _links { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Response18 : CustomContentSingle
    {

        [System.Text.Json.Serialization.JsonPropertyName("_links")]
        public _links6 _links { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Response19 : CustomContentSingle
    {

        [System.Text.Json.Serialization.JsonPropertyName("_links")]
        public _links7 _links { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Response20 : CustomContentSingle
    {

        [System.Text.Json.Serialization.JsonPropertyName("_links")]
        public _links8 _links { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Response21
    {

        [System.Text.Json.Serialization.JsonPropertyName("results")]
        public System.Collections.Generic.IEnumerable<AttachmentBulk> Results { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("_links")]
        public MultiEntityLinks _links { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Response22
    {

        [System.Text.Json.Serialization.JsonPropertyName("results")]
        public System.Collections.Generic.IEnumerable<CustomContentCommentModel> Results { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("_links")]
        public MultiEntityLinks _links { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Response23
    {

        [System.Text.Json.Serialization.JsonPropertyName("results")]
        public System.Collections.Generic.IEnumerable<Label> Results { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("_links")]
        public MultiEntityLinks _links { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Response24
    {

        [System.Text.Json.Serialization.JsonPropertyName("results")]
        public System.Collections.Generic.IEnumerable<ContentProperty> Results { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("_links")]
        public MultiEntityLinks _links { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Response25
    {

        [System.Text.Json.Serialization.JsonPropertyName("results")]
        public System.Collections.Generic.IEnumerable<Label> Results { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("_links")]
        public MultiEntityLinks _links { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Response26
    {

        [System.Text.Json.Serialization.JsonPropertyName("results")]
        public System.Collections.Generic.IEnumerable<AttachmentBulk> Results { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("_links")]
        public MultiEntityLinks _links { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Response27
    {

        [System.Text.Json.Serialization.JsonPropertyName("results")]
        public System.Collections.Generic.IEnumerable<BlogPostBulk> Results { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("_links")]
        public MultiEntityLinks _links { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Response28
    {

        [System.Text.Json.Serialization.JsonPropertyName("results")]
        public System.Collections.Generic.IEnumerable<PageBulk> Results { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("_links")]
        public MultiEntityLinks _links { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Response29
    {

        [System.Text.Json.Serialization.JsonPropertyName("results")]
        public System.Collections.Generic.IEnumerable<PageBulk> Results { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("_links")]
        public MultiEntityLinks _links { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Response30 : PageSingle
    {

        [System.Text.Json.Serialization.JsonPropertyName("_links")]
        public _links9 _links { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Response31 : PageSingle
    {

        [System.Text.Json.Serialization.JsonPropertyName("_links")]
        public _links10 _links { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Response32 : PageSingle
    {

        [System.Text.Json.Serialization.JsonPropertyName("_links")]
        public _links11 _links { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Response33
    {

        [System.Text.Json.Serialization.JsonPropertyName("results")]
        public System.Collections.Generic.IEnumerable<AttachmentBulk> Results { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("_links")]
        public MultiEntityLinks _links { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Response34
    {

        [System.Text.Json.Serialization.JsonPropertyName("results")]
        public System.Collections.Generic.IEnumerable<CustomContentBulk> Results { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("_links")]
        public MultiEntityLinks _links { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Response35
    {

        [System.Text.Json.Serialization.JsonPropertyName("results")]
        public System.Collections.Generic.IEnumerable<Label> Results { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("_links")]
        public MultiEntityLinks _links { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Anonymous17
    {
        /// <summary>
        /// The count number
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("count")]
        public long? Count { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Response36
    {

        [System.Text.Json.Serialization.JsonPropertyName("results")]
        public System.Collections.Generic.IEnumerable<Like> Results { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("_links")]
        public MultiEntityLinks _links { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Response37
    {

        [System.Text.Json.Serialization.JsonPropertyName("results")]
        public System.Collections.Generic.IEnumerable<ContentProperty> Results { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("_links")]
        public MultiEntityLinks _links { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Response38 : PageSingle
    {

        [System.Text.Json.Serialization.JsonPropertyName("_links")]
        public _links12 _links { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Response39
    {

        [System.Text.Json.Serialization.JsonPropertyName("results")]
        public System.Collections.Generic.IEnumerable<PageVersion> Results { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("_links")]
        public MultiEntityLinks _links { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Response40 : WhiteboardSingle
    {

        [System.Text.Json.Serialization.JsonPropertyName("_links")]
        public _links13 _links { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Response41 : WhiteboardSingle
    {

        [System.Text.Json.Serialization.JsonPropertyName("_links")]
        public _links14 _links { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Response42
    {

        [System.Text.Json.Serialization.JsonPropertyName("results")]
        public System.Collections.Generic.IEnumerable<ContentProperty> Results { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("_links")]
        public MultiEntityLinks _links { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Response43
    {

        [System.Text.Json.Serialization.JsonPropertyName("results")]
        public System.Collections.Generic.IEnumerable<ChildrenResponse> Results { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("_links")]
        public MultiEntityLinks _links { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Response44
    {

        [System.Text.Json.Serialization.JsonPropertyName("results")]
        public System.Collections.Generic.IEnumerable<DescendantsResponse> Results { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("_links")]
        public MultiEntityLinks _links { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Response45
    {

        [System.Text.Json.Serialization.JsonPropertyName("results")]
        public System.Collections.Generic.IEnumerable<Ancestor> Results { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Response46 : DatabaseSingle
    {

        [System.Text.Json.Serialization.JsonPropertyName("_links")]
        public _links15 _links { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Response47 : DatabaseSingle
    {

        [System.Text.Json.Serialization.JsonPropertyName("_links")]
        public _links16 _links { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Response48
    {

        [System.Text.Json.Serialization.JsonPropertyName("results")]
        public System.Collections.Generic.IEnumerable<ContentProperty> Results { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("_links")]
        public MultiEntityLinks _links { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Response49
    {

        [System.Text.Json.Serialization.JsonPropertyName("results")]
        public System.Collections.Generic.IEnumerable<ChildrenResponse> Results { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("_links")]
        public MultiEntityLinks _links { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Response50
    {

        [System.Text.Json.Serialization.JsonPropertyName("results")]
        public System.Collections.Generic.IEnumerable<DescendantsResponse> Results { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("_links")]
        public MultiEntityLinks _links { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Response51
    {

        [System.Text.Json.Serialization.JsonPropertyName("results")]
        public System.Collections.Generic.IEnumerable<Ancestor> Results { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Response52 : SmartLinkSingle
    {

        [System.Text.Json.Serialization.JsonPropertyName("_links")]
        public _links17 _links { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Response53 : SmartLinkSingle
    {

        [System.Text.Json.Serialization.JsonPropertyName("_links")]
        public _links18 _links { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Response54
    {

        [System.Text.Json.Serialization.JsonPropertyName("results")]
        public System.Collections.Generic.IEnumerable<ContentProperty> Results { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("_links")]
        public MultiEntityLinks _links { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Response55
    {

        [System.Text.Json.Serialization.JsonPropertyName("results")]
        public System.Collections.Generic.IEnumerable<ChildrenResponse> Results { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("_links")]
        public MultiEntityLinks _links { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Response56
    {

        [System.Text.Json.Serialization.JsonPropertyName("results")]
        public System.Collections.Generic.IEnumerable<DescendantsResponse> Results { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("_links")]
        public MultiEntityLinks _links { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Response57
    {

        [System.Text.Json.Serialization.JsonPropertyName("results")]
        public System.Collections.Generic.IEnumerable<Ancestor> Results { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Response58 : FolderSingle
    {

        [System.Text.Json.Serialization.JsonPropertyName("_links")]
        public _links19 _links { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Response59 : FolderSingle
    {

        [System.Text.Json.Serialization.JsonPropertyName("_links")]
        public _links20 _links { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Response60
    {

        [System.Text.Json.Serialization.JsonPropertyName("results")]
        public System.Collections.Generic.IEnumerable<ContentProperty> Results { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("_links")]
        public MultiEntityLinks _links { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Response61
    {

        [System.Text.Json.Serialization.JsonPropertyName("results")]
        public System.Collections.Generic.IEnumerable<ChildrenResponse> Results { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("_links")]
        public MultiEntityLinks _links { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Response62
    {

        [System.Text.Json.Serialization.JsonPropertyName("results")]
        public System.Collections.Generic.IEnumerable<DescendantsResponse> Results { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("_links")]
        public MultiEntityLinks _links { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Response63
    {

        [System.Text.Json.Serialization.JsonPropertyName("results")]
        public System.Collections.Generic.IEnumerable<Ancestor> Results { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Response64
    {

        [System.Text.Json.Serialization.JsonPropertyName("results")]
        public System.Collections.Generic.IEnumerable<CustomContentVersion> Results { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("_links")]
        public MultiEntityLinks _links { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Response65
    {

        [System.Text.Json.Serialization.JsonPropertyName("results")]
        public System.Collections.Generic.IEnumerable<SpaceBulk> Results { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("_links")]
        public MultiEntityLinks _links { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Response66 : SpaceBulk
    {

        [System.Text.Json.Serialization.JsonPropertyName("_links")]
        public _links21 _links { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Response67 : SpaceSingle
    {

        [System.Text.Json.Serialization.JsonPropertyName("_links")]
        public _links22 _links { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Response68
    {

        [System.Text.Json.Serialization.JsonPropertyName("results")]
        public System.Collections.Generic.IEnumerable<BlogPostBulk> Results { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("_links")]
        public MultiEntityLinks _links { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Response69
    {

        [System.Text.Json.Serialization.JsonPropertyName("results")]
        public System.Collections.Generic.IEnumerable<Label> Results { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("_links")]
        public MultiEntityLinks _links { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Response70
    {

        [System.Text.Json.Serialization.JsonPropertyName("results")]
        public System.Collections.Generic.IEnumerable<Label> Results { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("_links")]
        public MultiEntityLinks _links { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Response71
    {

        [System.Text.Json.Serialization.JsonPropertyName("results")]
        public System.Collections.Generic.IEnumerable<CustomContentBulk> Results { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("_links")]
        public MultiEntityLinks _links { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Response72
    {

        [System.Text.Json.Serialization.JsonPropertyName("results")]
        public System.Collections.Generic.IEnumerable<PageBulk> Results { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("_links")]
        public MultiEntityLinks _links { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Response73
    {

        [System.Text.Json.Serialization.JsonPropertyName("results")]
        public System.Collections.Generic.IEnumerable<SpaceProperty> Results { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("_links")]
        public MultiEntityLinks _links { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Response74
    {

        [System.Text.Json.Serialization.JsonPropertyName("results")]
        public System.Collections.Generic.IEnumerable<SpacePermissionAssignment> Results { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("_links")]
        public MultiEntityLinks _links { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Response75
    {

        [System.Text.Json.Serialization.JsonPropertyName("results")]
        public System.Collections.Generic.IEnumerable<SpacePermission> Results { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("_links")]
        public MultiEntityLinks _links { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Response76
    {

        [System.Text.Json.Serialization.JsonPropertyName("results")]
        public System.Collections.Generic.IEnumerable<SpaceRole> Results { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("_links")]
        public MultiEntityLinks _links { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Response77 : SpaceRole
    {

        [System.Text.Json.Serialization.JsonPropertyName("_links")]
        public _links23 _links { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Response78
    {

        [System.Text.Json.Serialization.JsonPropertyName("results")]
        public System.Collections.Generic.IEnumerable<SpaceRoleAssignment> Results { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("_links")]
        public MultiEntityLinks _links { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Response79
    {

        [System.Text.Json.Serialization.JsonPropertyName("results")]
        public System.Collections.Generic.IEnumerable<SpaceRoleAssignment> Results { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("_links")]
        public MultiEntityLinks _links { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Response80
    {

        [System.Text.Json.Serialization.JsonPropertyName("results")]
        public System.Collections.Generic.IEnumerable<PageCommentModel> Results { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("_links")]
        public MultiEntityLinks _links { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Response81
    {

        [System.Text.Json.Serialization.JsonPropertyName("results")]
        public System.Collections.Generic.IEnumerable<PageInlineCommentModel> Results { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("_links")]
        public MultiEntityLinks _links { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Response82
    {

        [System.Text.Json.Serialization.JsonPropertyName("results")]
        public System.Collections.Generic.IEnumerable<BlogPostCommentModel> Results { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("_links")]
        public MultiEntityLinks _links { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Response83
    {

        [System.Text.Json.Serialization.JsonPropertyName("results")]
        public System.Collections.Generic.IEnumerable<BlogPostInlineCommentModel> Results { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("_links")]
        public MultiEntityLinks _links { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Response84
    {

        [System.Text.Json.Serialization.JsonPropertyName("results")]
        public System.Collections.Generic.IEnumerable<FooterCommentModel> Results { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("_links")]
        public MultiEntityLinks _links { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Response85 : FooterCommentModel
    {

        [System.Text.Json.Serialization.JsonPropertyName("_links")]
        public _links24 _links { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Response86 : FooterCommentModel
    {

        [System.Text.Json.Serialization.JsonPropertyName("_links")]
        public _links25 _links { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Response87
    {

        [System.Text.Json.Serialization.JsonPropertyName("results")]
        public System.Collections.Generic.IEnumerable<ChildrenCommentModel> Results { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("_links")]
        public MultiEntityLinks _links { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Anonymous18
    {
        /// <summary>
        /// The count number
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("count")]
        public long? Count { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Response88
    {

        [System.Text.Json.Serialization.JsonPropertyName("results")]
        public System.Collections.Generic.IEnumerable<Like> Results { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("_links")]
        public MultiEntityLinks _links { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Response89
    {

        [System.Text.Json.Serialization.JsonPropertyName("results")]
        public System.Collections.Generic.IEnumerable<CommentVersion> Results { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("_links")]
        public MultiEntityLinks _links { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Response90
    {

        [System.Text.Json.Serialization.JsonPropertyName("results")]
        public System.Collections.Generic.IEnumerable<InlineCommentModel> Results { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("_links")]
        public MultiEntityLinks _links { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Response91 : InlineCommentModel
    {

        [System.Text.Json.Serialization.JsonPropertyName("_links")]
        public _links26 _links { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Response92 : InlineCommentModel
    {

        [System.Text.Json.Serialization.JsonPropertyName("_links")]
        public _links27 _links { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Response93 : InlineCommentModel
    {

        [System.Text.Json.Serialization.JsonPropertyName("_links")]
        public _links28 _links { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Response94
    {

        [System.Text.Json.Serialization.JsonPropertyName("results")]
        public System.Collections.Generic.IEnumerable<InlineCommentChildrenModel> Results { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("_links")]
        public MultiEntityLinks _links { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Anonymous19
    {
        /// <summary>
        /// The count number
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("count")]
        public long? Count { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Response95
    {

        [System.Text.Json.Serialization.JsonPropertyName("results")]
        public System.Collections.Generic.IEnumerable<Like> Results { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("_links")]
        public MultiEntityLinks _links { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Response96
    {

        [System.Text.Json.Serialization.JsonPropertyName("results")]
        public System.Collections.Generic.IEnumerable<CommentVersion> Results { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("_links")]
        public MultiEntityLinks _links { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Response97
    {

        [System.Text.Json.Serialization.JsonPropertyName("results")]
        public System.Collections.Generic.IEnumerable<ContentProperty> Results { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("_links")]
        public MultiEntityLinks _links { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Response98
    {

        [System.Text.Json.Serialization.JsonPropertyName("results")]
        public System.Collections.Generic.IEnumerable<ConfluenceTask> Results { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("_links")]
        public MultiEntityLinks _links { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Response99
    {

        [System.Text.Json.Serialization.JsonPropertyName("results")]
        public System.Collections.Generic.IEnumerable<ChildPage> Results { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("_links")]
        public MultiEntityLinks _links { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Response100
    {

        [System.Text.Json.Serialization.JsonPropertyName("results")]
        public System.Collections.Generic.IEnumerable<ChildCustomContent> Results { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("_links")]
        public MultiEntityLinks _links { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Response101
    {

        [System.Text.Json.Serialization.JsonPropertyName("results")]
        public System.Collections.Generic.IEnumerable<ChildrenResponse> Results { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("_links")]
        public MultiEntityLinks _links { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Response102
    {

        [System.Text.Json.Serialization.JsonPropertyName("results")]
        public System.Collections.Generic.IEnumerable<Ancestor> Results { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("_links")]
        public MultiEntityLinks _links { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Response103
    {

        [System.Text.Json.Serialization.JsonPropertyName("results")]
        public System.Collections.Generic.IEnumerable<DescendantsResponse> Results { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("_links")]
        public MultiEntityLinks _links { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Response104
    {

        [System.Text.Json.Serialization.JsonPropertyName("results")]
        public System.Collections.Generic.IEnumerable<User> Results { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("_links")]
        public MultiEntityLinks _links { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Response105
    {
        /// <summary>
        /// List of emails that do not have access to site.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("emailsWithoutAccess")]
        public System.Collections.Generic.IEnumerable<string> EmailsWithoutAccess { get; set; }

        /// <summary>
        /// List of invalid emails provided in the request.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("invalidEmails")]
        public System.Collections.Generic.IEnumerable<string> InvalidEmails { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Response106
    {

        [System.Text.Json.Serialization.JsonPropertyName("results")]
        public System.Collections.Generic.IEnumerable<DataPolicySpace> Results { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("_links")]
        public MultiEntityLinks _links { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Labels
    {

        [System.Text.Json.Serialization.JsonPropertyName("results")]
        public System.Collections.Generic.IEnumerable<Label> Results { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("meta")]
        public OptionalFieldMeta Meta { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("_links")]
        public OptionalFieldLinks _links { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Properties
    {

        [System.Text.Json.Serialization.JsonPropertyName("results")]
        public System.Collections.Generic.IEnumerable<ContentProperty> Results { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("meta")]
        public OptionalFieldMeta Meta { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("_links")]
        public OptionalFieldLinks _links { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Operations
    {

        [System.Text.Json.Serialization.JsonPropertyName("results")]
        public System.Collections.Generic.IEnumerable<Operation> Results { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("meta")]
        public OptionalFieldMeta Meta { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("_links")]
        public OptionalFieldLinks _links { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Versions
    {

        [System.Text.Json.Serialization.JsonPropertyName("results")]
        public System.Collections.Generic.IEnumerable<Version> Results { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("meta")]
        public OptionalFieldMeta Meta { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("_links")]
        public OptionalFieldLinks _links { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Labels2
    {

        [System.Text.Json.Serialization.JsonPropertyName("results")]
        public System.Collections.Generic.IEnumerable<Label> Results { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("meta")]
        public OptionalFieldMeta Meta { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("_links")]
        public OptionalFieldLinks _links { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Properties2
    {

        [System.Text.Json.Serialization.JsonPropertyName("results")]
        public System.Collections.Generic.IEnumerable<ContentProperty> Results { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("meta")]
        public OptionalFieldMeta Meta { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("_links")]
        public OptionalFieldLinks _links { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Operations2
    {

        [System.Text.Json.Serialization.JsonPropertyName("results")]
        public System.Collections.Generic.IEnumerable<Operation> Results { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("meta")]
        public OptionalFieldMeta Meta { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("_links")]
        public OptionalFieldLinks _links { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Likes
    {

        [System.Text.Json.Serialization.JsonPropertyName("results")]
        public System.Collections.Generic.IEnumerable<Like> Results { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("meta")]
        public OptionalFieldMeta Meta { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("_links")]
        public OptionalFieldLinks _links { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Versions2
    {

        [System.Text.Json.Serialization.JsonPropertyName("results")]
        public System.Collections.Generic.IEnumerable<Version> Results { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("meta")]
        public OptionalFieldMeta Meta { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("_links")]
        public OptionalFieldLinks _links { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Anonymous20
    {

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Version2
    {
        /// <summary>
        /// Version number of the new version. Should be 1 more than the current version number.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("number")]
        public int? Number { get; set; }

        /// <summary>
        /// Message to be associated with the new version.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("message")]
        public string Message { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Labels3
    {

        [System.Text.Json.Serialization.JsonPropertyName("results")]
        public System.Collections.Generic.IEnumerable<Label> Results { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("meta")]
        public OptionalFieldMeta Meta { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("_links")]
        public OptionalFieldLinks _links { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Properties3
    {

        [System.Text.Json.Serialization.JsonPropertyName("results")]
        public System.Collections.Generic.IEnumerable<ContentProperty> Results { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("meta")]
        public OptionalFieldMeta Meta { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("_links")]
        public OptionalFieldLinks _links { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Operations3
    {

        [System.Text.Json.Serialization.JsonPropertyName("results")]
        public System.Collections.Generic.IEnumerable<Operation> Results { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("meta")]
        public OptionalFieldMeta Meta { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("_links")]
        public OptionalFieldLinks _links { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Versions3
    {

        [System.Text.Json.Serialization.JsonPropertyName("results")]
        public System.Collections.Generic.IEnumerable<Version> Results { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("meta")]
        public OptionalFieldMeta Meta { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("_links")]
        public OptionalFieldLinks _links { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Labels4
    {

        [System.Text.Json.Serialization.JsonPropertyName("results")]
        public System.Collections.Generic.IEnumerable<Label> Results { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("meta")]
        public OptionalFieldMeta Meta { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("_links")]
        public OptionalFieldLinks _links { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Properties4
    {

        [System.Text.Json.Serialization.JsonPropertyName("results")]
        public System.Collections.Generic.IEnumerable<ContentProperty> Results { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("meta")]
        public OptionalFieldMeta Meta { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("_links")]
        public OptionalFieldLinks _links { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Operations4
    {

        [System.Text.Json.Serialization.JsonPropertyName("results")]
        public System.Collections.Generic.IEnumerable<Operation> Results { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("meta")]
        public OptionalFieldMeta Meta { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("_links")]
        public OptionalFieldLinks _links { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Likes2
    {

        [System.Text.Json.Serialization.JsonPropertyName("results")]
        public System.Collections.Generic.IEnumerable<Like> Results { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("meta")]
        public OptionalFieldMeta Meta { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("_links")]
        public OptionalFieldLinks _links { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Versions4
    {

        [System.Text.Json.Serialization.JsonPropertyName("results")]
        public System.Collections.Generic.IEnumerable<Version> Results { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("meta")]
        public OptionalFieldMeta Meta { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("_links")]
        public OptionalFieldLinks _links { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum PageBodyWriteRepresentation
    {

        [System.Runtime.Serialization.EnumMember(Value = @"storage")]
        Storage = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"atlas_doc_format")]
        Atlas_doc_format = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"wiki")]
        Wiki = 2,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum BlogPostBodyWriteRepresentation
    {

        [System.Runtime.Serialization.EnumMember(Value = @"storage")]
        Storage = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"atlas_doc_format")]
        Atlas_doc_format = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"wiki")]
        Wiki = 2,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum CommentBodyWriteRepresentation
    {

        [System.Runtime.Serialization.EnumMember(Value = @"storage")]
        Storage = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"atlas_doc_format")]
        Atlas_doc_format = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"wiki")]
        Wiki = 2,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum CustomContentBodyWriteRepresentation
    {

        [System.Runtime.Serialization.EnumMember(Value = @"storage")]
        Storage = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"atlas_doc_format")]
        Atlas_doc_format = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"raw")]
        Raw = 2,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Labels5
    {

        [System.Text.Json.Serialization.JsonPropertyName("results")]
        public System.Collections.Generic.IEnumerable<Label> Results { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("meta")]
        public OptionalFieldMeta Meta { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("_links")]
        public OptionalFieldLinks _links { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Properties5
    {

        [System.Text.Json.Serialization.JsonPropertyName("results")]
        public System.Collections.Generic.IEnumerable<SpaceProperty> Results { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("meta")]
        public OptionalFieldMeta Meta { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("_links")]
        public OptionalFieldLinks _links { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Operations5
    {

        [System.Text.Json.Serialization.JsonPropertyName("results")]
        public System.Collections.Generic.IEnumerable<Operation> Results { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("meta")]
        public OptionalFieldMeta Meta { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("_links")]
        public OptionalFieldLinks _links { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Permissions
    {

        [System.Text.Json.Serialization.JsonPropertyName("results")]
        public System.Collections.Generic.IEnumerable<SpacePermissionAssignment> Results { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("meta")]
        public OptionalFieldMeta Meta { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("_links")]
        public OptionalFieldLinks _links { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Principal2
    {

        [System.Text.Json.Serialization.JsonPropertyName("type")]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public Principal2Type? Type { get; set; }

        /// <summary>
        /// ID of the entity.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("id")]
        public string Id { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Operation2
    {
        /// <summary>
        /// The type of operation.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("key")]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public Operation2Key? Key { get; set; }

        /// <summary>
        /// The type of entity the operation type targets.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("targetType")]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public Operation2TargetType? TargetType { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Version3
    {
        /// <summary>
        /// RFC3339 compliant date time at which the property's current version was created.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("createdAt")]
        public System.DateTimeOffset? CreatedAt { get; set; }

        /// <summary>
        /// Atlassian account ID of the user that created the space property's current version.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("createdBy")]
        public string CreatedBy { get; set; }

        /// <summary>
        /// Message associated with the current version.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("message")]
        public string Message { get; set; }

        /// <summary>
        /// The space property's current version number.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("number")]
        public int? Number { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Version4
    {
        /// <summary>
        /// Version number of the new version. Should be 1 more than the current version number.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("number")]
        public int? Number { get; set; }

        /// <summary>
        /// Message to be associated with the new version.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("message")]
        public string Message { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum TaskStatus
    {

        [System.Runtime.Serialization.EnumMember(Value = @"complete")]
        Complete = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"incomplete")]
        Incomplete = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Properties6
    {

        [System.Text.Json.Serialization.JsonPropertyName("results")]
        public System.Collections.Generic.IEnumerable<ContentProperty> Results { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("meta")]
        public OptionalFieldMeta Meta { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("_links")]
        public OptionalFieldLinks _links { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Operations6
    {

        [System.Text.Json.Serialization.JsonPropertyName("results")]
        public System.Collections.Generic.IEnumerable<Operation> Results { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("meta")]
        public OptionalFieldMeta Meta { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("_links")]
        public OptionalFieldLinks _links { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Likes3
    {

        [System.Text.Json.Serialization.JsonPropertyName("results")]
        public System.Collections.Generic.IEnumerable<Like> Results { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("meta")]
        public OptionalFieldMeta Meta { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("_links")]
        public OptionalFieldLinks _links { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Versions5
    {

        [System.Text.Json.Serialization.JsonPropertyName("results")]
        public System.Collections.Generic.IEnumerable<Version> Results { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("meta")]
        public OptionalFieldMeta Meta { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("_links")]
        public OptionalFieldLinks _links { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Properties7
    {

        [System.Text.Json.Serialization.JsonPropertyName("results")]
        public System.Collections.Generic.IEnumerable<ContentProperty> Results { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("meta")]
        public OptionalFieldMeta Meta { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("_links")]
        public OptionalFieldLinks _links { get; set; }

        /// <summary>
        /// Property value used to reference the highlighted element in DOM.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("inlineMarkerRef")]
        public string InlineMarkerRef { get; set; }

        /// <summary>
        /// Text that is highlighted.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("inlineOriginalSelection")]
        public string InlineOriginalSelection { get; set; }

        /// <summary>
        /// Deprecated, use `inlineMarkerRef` instead.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("inline-marker-ref")]
        [System.Obsolete]
        public string InlineMarkerRef2 { get; set; }

        /// <summary>
        /// Deprecated, use `inlineOriginalSelection` instead.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("inline-original-selection")]
        [System.Obsolete]
        public string InlineOriginalSelection2 { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Operations7
    {

        [System.Text.Json.Serialization.JsonPropertyName("results")]
        public System.Collections.Generic.IEnumerable<Operation> Results { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("meta")]
        public OptionalFieldMeta Meta { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("_links")]
        public OptionalFieldLinks _links { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Likes4
    {

        [System.Text.Json.Serialization.JsonPropertyName("results")]
        public System.Collections.Generic.IEnumerable<Like> Results { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("meta")]
        public OptionalFieldMeta Meta { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("_links")]
        public OptionalFieldLinks _links { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Versions6
    {

        [System.Text.Json.Serialization.JsonPropertyName("results")]
        public System.Collections.Generic.IEnumerable<Version> Results { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("meta")]
        public OptionalFieldMeta Meta { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("_links")]
        public OptionalFieldLinks _links { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class InlineCommentProperties2
    {
        /// <summary>
        /// The text to highlight
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("textSelection")]
        public string TextSelection { get; set; }

        /// <summary>
        /// The number of matches for the selected text on the page (should be strictly greater than textSelectionMatchIndex)
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("textSelectionMatchCount")]
        public int? TextSelectionMatchCount { get; set; }

        /// <summary>
        /// The match index to highlight. This is zero-based. E.g. if you have 3 occurrences of "hello world" on a page 
        /// <br/>and you want to highlight the second occurrence, you should pass 1 for textSelectionMatchIndex and 3 for textSelectionMatchCount.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("textSelectionMatchIndex")]
        public int? TextSelectionMatchIndex { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Version5
    {
        /// <summary>
        /// Number of new version. Should be 1 higher than current version of the comment.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("number")]
        public int? Number { get; set; }

        /// <summary>
        /// Optional message store for the new version.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("message")]
        public string Message { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Version6
    {
        /// <summary>
        /// Number of new version. Should be 1 higher than current version of the comment.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("number")]
        public int? Number { get; set; }

        /// <summary>
        /// Optional message store for the new version.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("message")]
        public string Message { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class DataPolicy
    {
        /// <summary>
        /// Whether the space contains any content blocked for (inaccessible to) the requesting client application.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("anyContentBlocked")]
        public bool? AnyContentBlocked { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class _links
    {
        /// <summary>
        /// Base url of the Confluence site.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("base")]
        public string Base { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class _links2
    {
        /// <summary>
        /// Base url of the Confluence site.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("base")]
        public string Base { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class _links3
    {
        /// <summary>
        /// Base url of the Confluence site.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("base")]
        public string Base { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class _links4
    {
        /// <summary>
        /// Base url of the Confluence site.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("base")]
        public string Base { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class _links5
    {
        /// <summary>
        /// Base url of the Confluence site.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("base")]
        public string Base { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class _links6
    {
        /// <summary>
        /// Base url of the Confluence site.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("base")]
        public string Base { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class _links7
    {
        /// <summary>
        /// Base url of the Confluence site.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("base")]
        public string Base { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class _links8
    {
        /// <summary>
        /// Base url of the Confluence site.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("base")]
        public string Base { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class _links9
    {
        /// <summary>
        /// Base url of the Confluence site.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("base")]
        public string Base { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class _links10
    {
        /// <summary>
        /// Base url of the Confluence site.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("base")]
        public string Base { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class _links11
    {
        /// <summary>
        /// Base url of the Confluence site.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("base")]
        public string Base { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class _links12
    {
        /// <summary>
        /// Base url of the Confluence site.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("base")]
        public string Base { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class _links13
    {
        /// <summary>
        /// Base url of the Confluence site.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("base")]
        public string Base { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class _links14
    {
        /// <summary>
        /// Base url of the Confluence site.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("base")]
        public string Base { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class _links15
    {
        /// <summary>
        /// Base url of the Confluence site.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("base")]
        public string Base { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class _links16
    {
        /// <summary>
        /// Base url of the Confluence site.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("base")]
        public string Base { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class _links17
    {
        /// <summary>
        /// Base url of the Confluence site.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("base")]
        public string Base { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class _links18
    {
        /// <summary>
        /// Base url of the Confluence site.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("base")]
        public string Base { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class _links19
    {
        /// <summary>
        /// Base url of the Confluence site.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("base")]
        public string Base { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class _links20
    {
        /// <summary>
        /// Base url of the Confluence site.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("base")]
        public string Base { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class _links21
    {
        /// <summary>
        /// Base url of the Confluence site.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("base")]
        public string Base { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class _links22
    {
        /// <summary>
        /// Base url of the Confluence site.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("base")]
        public string Base { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class _links23
    {
        /// <summary>
        /// Base url of the Confluence site.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("base")]
        public string Base { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class _links24
    {
        /// <summary>
        /// Base url of the Confluence site.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("base")]
        public string Base { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class _links25
    {
        /// <summary>
        /// Base url of the Confluence site.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("base")]
        public string Base { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class _links26
    {
        /// <summary>
        /// Base url of the Confluence site.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("base")]
        public string Base { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class _links27
    {
        /// <summary>
        /// Base url of the Confluence site.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("base")]
        public string Base { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class _links28
    {
        /// <summary>
        /// Base url of the Confluence site.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("base")]
        public string Base { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum Principal2Type
    {

        [System.Runtime.Serialization.EnumMember(Value = @"user")]
        User = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"group")]
        Group = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"role")]
        Role = 2,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum Operation2Key
    {

        [System.Runtime.Serialization.EnumMember(Value = @"use")]
        Use = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"create")]
        Create = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"read")]
        Read = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"update")]
        Update = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"delete")]
        Delete = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"copy")]
        Copy = 5,

        [System.Runtime.Serialization.EnumMember(Value = @"move")]
        Move = 6,

        [System.Runtime.Serialization.EnumMember(Value = @"export")]
        Export = 7,

        [System.Runtime.Serialization.EnumMember(Value = @"purge")]
        Purge = 8,

        [System.Runtime.Serialization.EnumMember(Value = @"purge_version")]
        Purge_version = 9,

        [System.Runtime.Serialization.EnumMember(Value = @"administer")]
        Administer = 10,

        [System.Runtime.Serialization.EnumMember(Value = @"restore")]
        Restore = 11,

        [System.Runtime.Serialization.EnumMember(Value = @"create_space")]
        Create_space = 12,

        [System.Runtime.Serialization.EnumMember(Value = @"restrict_content")]
        Restrict_content = 13,

        [System.Runtime.Serialization.EnumMember(Value = @"archive")]
        Archive = 14,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum Operation2TargetType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"page")]
        Page = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"blogpost")]
        Blogpost = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"comment")]
        Comment = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"attachment")]
        Attachment = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"whiteboard")]
        Whiteboard = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"database")]
        Database = 5,

        [System.Runtime.Serialization.EnumMember(Value = @"embed")]
        Embed = 6,

        [System.Runtime.Serialization.EnumMember(Value = @"folder")]
        Folder = 7,

        [System.Runtime.Serialization.EnumMember(Value = @"space")]
        Space = 8,

        [System.Runtime.Serialization.EnumMember(Value = @"application")]
        Application = 9,

        [System.Runtime.Serialization.EnumMember(Value = @"userProfile")]
        UserProfile = 10,

    }



    [System.CodeDom.Compiler.GeneratedCode("NSwag", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ApiException : System.Exception
    {
        public int StatusCode { get; private set; }

        public string Response { get; private set; }

        public System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> Headers { get; private set; }

        public ApiException(string message, int statusCode, string response, System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> headers, System.Exception innerException)
            : base(message + "\n\nStatus: " + statusCode + "\nResponse: \n" + ((response == null) ? "(null)" : response.Substring(0, response.Length >= 512 ? 512 : response.Length)), innerException)
        {
            StatusCode = statusCode;
            Response = response;
            Headers = headers;
        }

        public override string ToString()
        {
            return string.Format("HTTP Response: \n\n{0}\n\n{1}", Response, base.ToString());
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ApiException<TResult> : ApiException
    {
        public TResult Result { get; private set; }

        public ApiException(string message, int statusCode, string response, System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> headers, TResult result, System.Exception innerException)
            : base(message, statusCode, response, headers, innerException)
        {
            Result = result;
        }
    }

}

#pragma warning restore  108
#pragma warning restore  114
#pragma warning restore  472
#pragma warning restore  612
#pragma warning restore 1573
#pragma warning restore 1591
#pragma warning restore 8073
#pragma warning restore 3016
#pragma warning restore 8603
#pragma warning restore 8604
#pragma warning restore 8625